{
  Player player=game.getPlayer(controllerId);
  if (player == null || !(ability instanceof SpellAbility)) {
    return;
  }
  Target target=new TargetControlledCreaturePermanent(1,Integer.MAX_VALUE,filter,true);
  target.setTargetName("creatures to convoke");
  if (!target.canChoose(sourceId,controllerId,game)) {
    return;
  }
  if (player.chooseUse(Outcome.Detriment,"Convoke creatures?",game)) {
    player.chooseTarget(Outcome.Tap,target,ability,game);
    if (target.getTargets().size() > 0) {
      int adjCost=0;
      for (      UUID creatureId : target.getTargets()) {
        Permanent perm=game.getPermanent(creatureId);
        if (perm == null) {
          continue;
        }
        if (perm.tap(game)) {
          Choice chooseManaType=buildChoice(perm.getColor(),ability.getManaCostsToPay());
          if (chooseManaType.getChoices().size() > 0) {
            if (chooseManaType.getChoices().size() > 1) {
              chooseManaType.getChoices().add("Colorless");
              chooseManaType.setMessage("Choose mana color to reduce from " + perm.getName());
              while (!chooseManaType.isChosen()) {
                player.choose(Outcome.Benefit,chooseManaType,game);
              }
            }
 else {
              chooseManaType.setChoice(chooseManaType.getChoices().iterator().next());
            }
            ManaCosts manaCostsToReduce=new ManaCostsImpl();
            if (chooseManaType.getChoice().equals("Black")) {
              manaCostsToReduce.load("{B}");
            }
            if (chooseManaType.getChoice().equals("Blue")) {
              manaCostsToReduce.load("{U}");
            }
            if (chooseManaType.getChoice().equals("Green")) {
              manaCostsToReduce.load("{G}");
            }
            if (chooseManaType.getChoice().equals("White")) {
              manaCostsToReduce.load("{W}");
            }
            if (chooseManaType.getChoice().equals("Red")) {
              manaCostsToReduce.load("{R}");
            }
            if (chooseManaType.getChoice().equals("Colorless")) {
              ++adjCost;
            }
            CardUtil.adjustCost((SpellAbility)ability,manaCostsToReduce);
          }
 else {
            ++adjCost;
          }
        }
      }
      this.getTargets().add(target);
      CardUtil.adjustCost((SpellAbility)ability,adjCost);
    }
  }
}
