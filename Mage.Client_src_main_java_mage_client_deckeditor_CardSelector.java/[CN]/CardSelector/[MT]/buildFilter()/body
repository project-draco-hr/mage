{
  FilterCard filter=new FilterCard();
  String name=jTextFieldSearch.getText().trim();
  filter.add(new CardTextPredicate(name));
  if (limited) {
    ArrayList<Predicate<MageObject>> predicates=new ArrayList<>();
    if (this.tbGreen.isSelected()) {
      predicates.add(new ColorPredicate(ObjectColor.GREEN));
    }
    if (this.tbRed.isSelected()) {
      predicates.add(new ColorPredicate(ObjectColor.RED));
    }
    if (this.tbBlack.isSelected()) {
      predicates.add(new ColorPredicate(ObjectColor.BLACK));
    }
    if (this.tbBlue.isSelected()) {
      predicates.add(new ColorPredicate(ObjectColor.BLUE));
    }
    if (this.tbWhite.isSelected()) {
      predicates.add(new ColorPredicate(ObjectColor.WHITE));
    }
    if (this.tbColorless.isSelected()) {
      predicates.add(new ColorlessPredicate());
    }
    filter.add(Predicates.or(predicates));
    predicates.clear();
    if (this.tbLand.isSelected()) {
      predicates.add(new CardTypePredicate(CardType.LAND));
    }
    if (this.tbArifiacts.isSelected()) {
      predicates.add(new CardTypePredicate(CardType.ARTIFACT));
    }
    if (this.tbCreatures.isSelected()) {
      predicates.add(new CardTypePredicate(CardType.CREATURE));
    }
    if (this.tbEnchantments.isSelected()) {
      predicates.add(new CardTypePredicate(CardType.ENCHANTMENT));
    }
    if (this.tbInstants.isSelected()) {
      predicates.add(new CardTypePredicate(CardType.INSTANT));
    }
    if (this.tbSorceries.isSelected()) {
      predicates.add(new CardTypePredicate(CardType.SORCERY));
    }
    if (this.tbPlaneswalkers.isSelected()) {
      predicates.add(new CardTypePredicate(CardType.PLANESWALKER));
    }
    filter.add(Predicates.or(predicates));
    if (this.cbExpansionSet.isVisible()) {
      String expansionSelection=this.cbExpansionSet.getSelectedItem().toString();
      if (!expansionSelection.equals("- All Sets")) {
        ArrayList<Predicate<Card>> expansionPredicates=new ArrayList<>();
        for (        String setCode : ConstructedFormats.getSetsByFormat(expansionSelection)) {
          expansionPredicates.add(new ExpansionSetPredicate(setCode));
        }
        filter.add(Predicates.or(expansionPredicates));
      }
    }
  }
  return filter;
}
