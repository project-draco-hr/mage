{
  bgView=new javax.swing.ButtonGroup();
  tbColor=new javax.swing.JToolBar();
  tbRed=new javax.swing.JToggleButton();
  tbGreen=new javax.swing.JToggleButton();
  tbBlue=new javax.swing.JToggleButton();
  tbBlack=new javax.swing.JToggleButton();
  tbWhite=new javax.swing.JToggleButton();
  tbColorless=new javax.swing.JToggleButton();
  jSeparator1=new javax.swing.JToolBar.Separator();
  cbExpansionSet=new javax.swing.JComboBox<String>();
  jSeparator2=new javax.swing.JToolBar.Separator();
  btnBooster=new javax.swing.JButton();
  btnClear=new javax.swing.JButton();
  tbTypes=new javax.swing.JToolBar();
  tbLand=new javax.swing.JToggleButton();
  tbCreatures=new javax.swing.JToggleButton();
  tbArifiacts=new javax.swing.JToggleButton();
  tbSorceries=new javax.swing.JToggleButton();
  tbInstants=new javax.swing.JToggleButton();
  tbEnchantments=new javax.swing.JToggleButton();
  tbPlaneswalkers=new javax.swing.JToggleButton();
  jSeparator6=new javax.swing.JToolBar.Separator();
  chkPiles=new javax.swing.JCheckBox();
  jSeparator3=new javax.swing.JToolBar.Separator();
  cbSortBy=new javax.swing.JComboBox<SortBy>();
  jSeparator4=new javax.swing.JToolBar.Separator();
  jToggleListView=new javax.swing.JToggleButton();
  jToggleCardView=new javax.swing.JToggleButton();
  cardSelectorScrollPane=new javax.swing.JScrollPane();
  cardSelectorBottomPanel=new javax.swing.JPanel();
  jButtonAddToMain=new javax.swing.JButton();
  jButtonAddToSideboard=new javax.swing.JButton();
  jLabelSearch=new javax.swing.JLabel();
  jTextFieldSearch=new javax.swing.JTextField();
  jButtonSearch=new javax.swing.JButton();
  jButtonClean=new javax.swing.JButton();
  cardCountLabel=new javax.swing.JLabel();
  cardCount=new javax.swing.JLabel();
  jButtonRemoveFromMain=new javax.swing.JButton();
  jButtonRemoveFromSideboard=new javax.swing.JButton();
  tbColor.setFloatable(false);
  tbColor.setRollover(true);
  tbColor.setToolTipText("Hold the ALT-key while clicking to deselect all other colors or hold the CTRL-key to select only all other colors.");
  tbColor.setBorderPainted(false);
  tbColor.setName("");
  tbRed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/color_red_off.png")));
  tbRed.setSelected(true);
  tbRed.setToolTipText("<html><font color='red'><strong>Red</strong></font><br/>" + tbColor.getToolTipText());
  tbRed.setActionCommand("Red");
  tbRed.setFocusable(false);
  tbRed.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  tbRed.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/color_red.png")));
  tbRed.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  tbRed.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      tbRedActionPerformed(evt);
    }
  }
);
  tbColor.add(tbRed);
  tbGreen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/color_green_off.png")));
  tbGreen.setSelected(true);
  tbGreen.setToolTipText("<html><font color='Green'><strong>Green</strong></font><br/>" + tbColor.getToolTipText());
  tbGreen.setActionCommand("Green");
  tbGreen.setFocusable(false);
  tbGreen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  tbGreen.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/color_green.png")));
  tbGreen.setVerifyInputWhenFocusTarget(false);
  tbGreen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  tbGreen.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      tbGreenActionPerformed(evt);
    }
  }
);
  tbColor.add(tbGreen);
  tbBlue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/color_blueOff.png")));
  tbBlue.setSelected(true);
  tbBlue.setToolTipText("<html><font color='blue'><strong>Blue</strong></font><br/>" + tbColor.getToolTipText());
  tbBlue.setActionCommand("Blue");
  tbBlue.setFocusable(false);
  tbBlue.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  tbBlue.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/color_blue.png")));
  tbBlue.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  tbBlue.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      tbBlueActionPerformed(evt);
    }
  }
);
  tbColor.add(tbBlue);
  tbBlack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/color_black_off.png")));
  tbBlack.setSelected(true);
  tbBlack.setToolTipText("<html><font color='black'><strong>Black</strong></font><br/>" + tbColor.getToolTipText());
  tbBlack.setActionCommand("Black");
  tbBlack.setFocusable(false);
  tbBlack.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  tbBlack.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/color_black.png")));
  tbBlack.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  tbBlack.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      tbBlackActionPerformed(evt);
    }
  }
);
  tbColor.add(tbBlack);
  tbWhite.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/color_white_off.png")));
  tbWhite.setSelected(true);
  tbWhite.setToolTipText("<html><font color='grey'><strong>White</strong></font><br/>" + tbColor.getToolTipText());
  tbWhite.setActionCommand("White");
  tbWhite.setFocusable(false);
  tbWhite.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  tbWhite.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/color_white.png")));
  tbWhite.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  tbWhite.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      tbWhiteActionPerformed(evt);
    }
  }
);
  tbColor.add(tbWhite);
  tbColorless.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/colorless_off.png")));
  tbColorless.setSelected(true);
  tbColorless.setToolTipText("<html>Colorless<br/>" + tbColor.getToolTipText());
  tbColorless.setActionCommand("Colorless");
  tbColorless.setFocusable(false);
  tbColorless.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  tbColorless.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/colorless.png")));
  tbColorless.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  tbColorless.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      tbColorlessActionPerformed(evt);
    }
  }
);
  tbColor.add(tbColorless);
  tbColor.add(jSeparator1);
  cbExpansionSet.setModel(new DefaultComboBoxModel<>(ConstructedFormats.getTypes()));
  cbExpansionSet.setMaximumSize(new java.awt.Dimension(250,25));
  cbExpansionSet.setMinimumSize(new java.awt.Dimension(250,25));
  cbExpansionSet.setName("cbExpansionSet");
  cbExpansionSet.setPreferredSize(new java.awt.Dimension(250,25));
  cbExpansionSet.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbExpansionSetActionPerformed(evt);
    }
  }
);
  tbColor.add(cbExpansionSet);
  tbColor.add(jSeparator2);
  btnBooster.setText("Open Booster");
  btnBooster.setToolTipText("(CURRENTLY NOT WORKING) Generates a booster of the selected set and adds the cards to the card selector.");
  btnBooster.setFocusable(false);
  btnBooster.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  btnBooster.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  btnBooster.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnBoosterActionPerformed(evt);
    }
  }
);
  tbColor.add(btnBooster);
  btnClear.setText("Clear");
  btnClear.setFocusable(false);
  btnClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  btnClear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  btnClear.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnClearActionPerformed(evt);
    }
  }
);
  tbColor.add(btnClear);
  tbTypes.setFloatable(false);
  tbTypes.setRollover(true);
  tbTypes.setToolTipText("Hold the ALT-key while clicking to deselect all other card types or hold the CTRL-key to only select all other card types.");
  tbTypes.setPreferredSize(new java.awt.Dimension(732,27));
  tbLand.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/type_land.png")));
  tbLand.setSelected(true);
  tbLand.setToolTipText("<html><strong>Land</strong><br/>" + tbTypes.getToolTipText());
  tbLand.setActionCommand("Lands");
  tbLand.setFocusable(false);
  tbLand.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  tbLand.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  tbLand.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      tbLandActionPerformed(evt);
    }
  }
);
  tbTypes.add(tbLand);
  tbCreatures.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/type_creatures.png")));
  tbCreatures.setSelected(true);
  tbCreatures.setToolTipText("<html><strong>Creatures</strong><br/>" + tbTypes.getToolTipText());
  tbCreatures.setActionCommand("Creatures");
  tbCreatures.setFocusable(false);
  tbCreatures.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  tbCreatures.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  tbCreatures.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      tbCreaturesActionPerformed(evt);
    }
  }
);
  tbTypes.add(tbCreatures);
  tbArifiacts.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/type_artifact.png")));
  tbArifiacts.setSelected(true);
  tbArifiacts.setToolTipText("<html><strong>Artifacts</strong><br/>" + tbTypes.getToolTipText());
  tbArifiacts.setActionCommand("Artifacts");
  tbArifiacts.setFocusable(false);
  tbArifiacts.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  tbArifiacts.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  tbArifiacts.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      tbArifiactsActionPerformed(evt);
    }
  }
);
  tbTypes.add(tbArifiacts);
  tbSorceries.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/type_sorcery.png")));
  tbSorceries.setSelected(true);
  tbSorceries.setToolTipText("<html><strong>Sorceries</strong><br/>" + tbTypes.getToolTipText());
  tbSorceries.setActionCommand("Soceries");
  tbSorceries.setFocusable(false);
  tbSorceries.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  tbSorceries.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  tbSorceries.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      tbSorceriesActionPerformed(evt);
    }
  }
);
  tbTypes.add(tbSorceries);
  tbInstants.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/type_instant.png")));
  tbInstants.setSelected(true);
  tbInstants.setToolTipText("<html><strong>Instants</strong><br/>" + tbTypes.getToolTipText());
  tbInstants.setActionCommand("Instants");
  tbInstants.setFocusable(false);
  tbInstants.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  tbInstants.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  tbInstants.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      tbInstantsActionPerformed(evt);
    }
  }
);
  tbTypes.add(tbInstants);
  tbEnchantments.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/type_enchantment.png")));
  tbEnchantments.setSelected(true);
  tbEnchantments.setToolTipText("<html><strong>Enchantments</strong><br/>" + tbTypes.getToolTipText());
  tbEnchantments.setActionCommand("Enchantments");
  tbEnchantments.setFocusable(false);
  tbEnchantments.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  tbEnchantments.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  tbEnchantments.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      tbEnchantmentsActionPerformed(evt);
    }
  }
);
  tbTypes.add(tbEnchantments);
  tbPlaneswalkers.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/type_planeswalker.png")));
  tbPlaneswalkers.setSelected(true);
  tbPlaneswalkers.setToolTipText("<html><strong>Planeswalker</strong><br/>" + tbTypes.getToolTipText());
  tbPlaneswalkers.setActionCommand("Planeswalkers");
  tbPlaneswalkers.setFocusable(false);
  tbPlaneswalkers.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  tbPlaneswalkers.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  tbPlaneswalkers.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      tbPlaneswalkersActionPerformed(evt);
    }
  }
);
  tbTypes.add(tbPlaneswalkers);
  tbTypes.add(jSeparator6);
  chkPiles.setText("Piles");
  chkPiles.setToolTipText("Shows the card in piles by the selected sort.");
  chkPiles.setFocusable(false);
  chkPiles.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
  chkPiles.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  chkPiles.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      chkPilesActionPerformed(evt);
    }
  }
);
  tbTypes.add(chkPiles);
  tbTypes.add(jSeparator3);
  cbSortBy.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1","Item 2","Item 3","Item 4"}));
  cbSortBy.setMaximumSize(new java.awt.Dimension(120,20));
  cbSortBy.setMinimumSize(new java.awt.Dimension(120,20));
  cbSortBy.setPreferredSize(new java.awt.Dimension(120,20));
  cbSortBy.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbSortByActionPerformed(evt);
    }
  }
);
  tbTypes.add(cbSortBy);
  tbTypes.add(jSeparator4);
  bgView.add(jToggleListView);
  jToggleListView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/list_panel.png")));
  jToggleListView.setSelected(true);
  jToggleListView.setToolTipText("Shows the cards as a list.");
  jToggleListView.setBorderPainted(false);
  jToggleListView.setFocusable(false);
  jToggleListView.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  jToggleListView.setMargin(new java.awt.Insets(2,2,2,2));
  jToggleListView.setMaximumSize(new java.awt.Dimension(37,22));
  jToggleListView.setMinimumSize(new java.awt.Dimension(37,22));
  jToggleListView.setPreferredSize(new java.awt.Dimension(37,22));
  jToggleListView.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      jToggleListViewActionPerformed(evt);
    }
  }
);
  tbTypes.add(jToggleListView);
  bgView.add(jToggleCardView);
  jToggleCardView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/card_panel.png")));
  jToggleCardView.setToolTipText("Shows the card as images.");
  jToggleCardView.setBorderPainted(false);
  jToggleCardView.setFocusable(false);
  jToggleCardView.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
  jToggleCardView.setMargin(new java.awt.Insets(2,2,2,2));
  jToggleCardView.setMaximumSize(new java.awt.Dimension(37,22));
  jToggleCardView.setMinimumSize(new java.awt.Dimension(37,22));
  jToggleCardView.setName("");
  jToggleCardView.setPreferredSize(new java.awt.Dimension(37,22));
  jToggleCardView.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
  jToggleCardView.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      jToggleCardViewActionPerformed(evt);
    }
  }
);
  tbTypes.add(jToggleCardView);
  cardSelectorScrollPane.setToolTipText("<HTML>Double click to add the card to the main deck.<br/>\nALT + Double click to add the card to the sideboard.");
  cardSelectorBottomPanel.setOpaque(false);
  cardSelectorBottomPanel.setPreferredSize(new java.awt.Dimension(897,40));
  jButtonAddToMain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/deck_in.png")));
  jButtonAddToMain.setToolTipText("<html>Add selected cards to deck.<br/>\nAlternative: <strong>Double click</strong> the card in card selector to move a card to the deck.");
  jButtonAddToMain.setMargin(null);
  jButtonAddToMain.setMaximumSize(new java.awt.Dimension(42,23));
  jButtonAddToMain.setMinimumSize(new java.awt.Dimension(42,23));
  jButtonAddToMain.setPreferredSize(new java.awt.Dimension(40,28));
  jButtonAddToMain.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      jButtonAddToMainActionPerformed(evt);
    }
  }
);
  jButtonAddToSideboard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/sideboard_in.png")));
  jButtonAddToSideboard.setToolTipText("<html>Add selected cards to sideboard.<br/>\nAlternative: <strong>ALT key + Double click</strong> the card in card selector to move a card to the sideboard.");
  jButtonAddToSideboard.setMargin(new java.awt.Insets(2,0,2,0));
  jButtonAddToSideboard.setMaximumSize(new java.awt.Dimension(100,30));
  jButtonAddToSideboard.setMinimumSize(new java.awt.Dimension(10,30));
  jButtonAddToSideboard.setPreferredSize(new java.awt.Dimension(40,28));
  jButtonAddToSideboard.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      jButtonAddToSideboardActionPerformed(evt);
    }
  }
);
  jLabelSearch.setText("Search:");
  jLabelSearch.setToolTipText("Searches for card names and in the rule text of the card.");
  jTextFieldSearch.setToolTipText("Searches for card names and in the rule text of the card.");
  jButtonSearch.setText("Search");
  jButtonSearch.setToolTipText("Performs the search.");
  jButtonSearch.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      jButtonSearchActionPerformed(evt);
    }
  }
);
  jButtonClean.setText("Clear");
  jButtonClean.setToolTipText("Clears the search field.");
  jButtonClean.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      jButtonCleanActionPerformed(evt);
    }
  }
);
  cardCountLabel.setText("Card count:");
  cardCountLabel.setToolTipText("Number of cards currently shown.");
  cardCount.setText("0");
  jButtonRemoveFromMain.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/deck_out.png")));
  jButtonRemoveFromMain.setToolTipText("Remove selected cards from deck");
  jButtonRemoveFromMain.setMargin(null);
  jButtonRemoveFromMain.setMaximumSize(new java.awt.Dimension(42,23));
  jButtonRemoveFromMain.setMinimumSize(new java.awt.Dimension(42,23));
  jButtonRemoveFromMain.setPreferredSize(new java.awt.Dimension(40,28));
  jButtonRemoveFromMain.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      jButtonRemoveFromMainActionPerformed(evt);
    }
  }
);
  jButtonRemoveFromSideboard.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/sideboard_out.png")));
  jButtonRemoveFromSideboard.setToolTipText("Remove selected cards from sideboard.");
  jButtonRemoveFromSideboard.setMargin(new java.awt.Insets(2,0,2,0));
  jButtonRemoveFromSideboard.setMaximumSize(new java.awt.Dimension(10,30));
  jButtonRemoveFromSideboard.setMinimumSize(new java.awt.Dimension(100,30));
  jButtonRemoveFromSideboard.setPreferredSize(new java.awt.Dimension(40,28));
  jButtonRemoveFromSideboard.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      jButtonRemoveFromSideboardActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout cardSelectorBottomPanelLayout=new javax.swing.GroupLayout(cardSelectorBottomPanel);
  cardSelectorBottomPanel.setLayout(cardSelectorBottomPanelLayout);
  cardSelectorBottomPanelLayout.setHorizontalGroup(cardSelectorBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(cardSelectorBottomPanelLayout.createSequentialGroup().addGap(6,6,6).addComponent(jButtonAddToMain,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jButtonRemoveFromMain,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jButtonAddToSideboard,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jButtonRemoveFromSideboard,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabelSearch).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jTextFieldSearch,javax.swing.GroupLayout.PREFERRED_SIZE,135,javax.swing.GroupLayout.PREFERRED_SIZE).addGap(2,2,2).addComponent(jButtonSearch).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jButtonClean).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cardCountLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cardCount,javax.swing.GroupLayout.PREFERRED_SIZE,48,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  cardSelectorBottomPanelLayout.setVerticalGroup(cardSelectorBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(cardSelectorBottomPanelLayout.createSequentialGroup().addGap(4,4,4).addGroup(cardSelectorBottomPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(jButtonRemoveFromMain,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jButtonAddToSideboard,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jButtonRemoveFromSideboard,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jLabelSearch).addComponent(jTextFieldSearch,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(jButtonSearch).addComponent(jButtonClean).addComponent(cardCountLabel).addComponent(cardCount).addComponent(jButtonAddToMain,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(4,4,4)));
  cardCountLabel.getAccessibleContext().setAccessibleName("cardCountLabel");
  cardCount.getAccessibleContext().setAccessibleName("cardCount");
  javax.swing.GroupLayout layout=new javax.swing.GroupLayout(this);
  this.setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(tbColor,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(tbTypes,javax.swing.GroupLayout.DEFAULT_SIZE,1057,Short.MAX_VALUE).addComponent(cardSelectorScrollPane).addComponent(cardSelectorBottomPanel,javax.swing.GroupLayout.DEFAULT_SIZE,1057,Short.MAX_VALUE));
  layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(tbColor,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addGap(0,0,0).addComponent(tbTypes,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addGap(0,0,0).addComponent(cardSelectorScrollPane,javax.swing.GroupLayout.DEFAULT_SIZE,237,Short.MAX_VALUE).addGap(0,0,0).addComponent(cardSelectorBottomPanel,javax.swing.GroupLayout.PREFERRED_SIZE,31,javax.swing.GroupLayout.PREFERRED_SIZE)));
}
