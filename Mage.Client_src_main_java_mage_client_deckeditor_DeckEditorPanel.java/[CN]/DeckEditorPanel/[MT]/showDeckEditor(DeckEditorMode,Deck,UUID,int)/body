{
  if (deck != null) {
    this.deck=deck;
  }
  this.tableId=tableId;
  this.mode=mode;
  this.btnAddLand.setVisible(false);
switch (mode) {
case LIMITED_BUILDING:
    this.deckArea.setOrientation(true);
  this.btnAddLand.setVisible(true);
this.txtTimeRemaining.setVisible(true);
case SIDEBOARDING:
this.btnSubmit.setVisible(true);
this.btnSubmitTimer.setVisible(true);
if (deck != null) {
this.cardSelector.loadSideboard(new ArrayList<>(deck.getSideboard()),this.bigCard);
}
this.deckArea.setOrientation(false);
this.cardSelector.switchToGrid();
this.btnExit.setVisible(false);
this.btnImport.setVisible(false);
this.btnGenDeck.setVisible(false);
if (!SessionHandler.isTestMode()) {
this.btnLoad.setVisible(false);
}
this.deckArea.showSideboard(false);
countdown.stop();
this.timeout=time;
setTimeout(timeout);
if (timeout != 0) {
countdown.start();
if (updateDeckTask == null || updateDeckTask.isDone()) {
updateDeckTask=new UpdateDeckTask(SessionHandler.getSession(),tableId,deck);
updateDeckTask.execute();
}
}
break;
case FREE_BUILDING:
this.deckArea.setOrientation(false);
this.btnSubmit.setVisible(false);
this.btnSubmitTimer.setVisible(false);
this.btnAddLand.setVisible(true);
this.cardSelector.loadCards(this.bigCard);
this.btnExit.setVisible(true);
this.btnImport.setVisible(true);
this.btnGenDeck.setVisible(true);
if (!SessionHandler.isTestMode()) {
this.btnLoad.setVisible(true);
}
this.deckArea.showSideboard(true);
this.txtTimeRemaining.setVisible(false);
break;
}
init();
this.deckArea.setDeckEditorMode(mode);
}
