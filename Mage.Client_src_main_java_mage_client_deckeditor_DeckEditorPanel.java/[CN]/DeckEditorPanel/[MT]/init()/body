{
  this.cardSelector.setVisible(true);
  this.jPanel1.setVisible(true);
  this.cardSelector.getCardsList().clearCardEventListeners();
  this.cardSelector.getCardsList().addCardEventListener(new Listener<Event>(){
    @Override public void event(    Event event){
      if (event.getEventName().equals("double-click")) {
        Card card=cardSelector.getCard((UUID)event.getSource());
        if (card != null) {
          deck.getCards().add(Sets.createCard(card.getClass()));
          if (mode == DeckEditorMode.Sideboard || mode == DeckEditorMode.Limited) {
            deck.getSideboard().remove(card);
            cardSelector.getCardsList().removeCard(card.getId());
          }
          if (cardInfoPane instanceof CardInfoPane) {
            ((CardInfoPane)cardInfoPane).setCard(new CardView(card));
          }
        }
        refreshDeck();
      }
    }
  }
);
  this.deckArea.clearDeckEventListeners();
  this.deckArea.addDeckEventListener(new Listener<Event>(){
    @Override public void event(    Event event){
      if (event.getEventName().equals("double-click")) {
        for (        Card card : deck.getCards()) {
          if (card.getId().equals((UUID)event.getSource())) {
            deck.getCards().remove(card);
            if (mode == DeckEditorMode.Limited || mode == DeckEditorMode.Sideboard) {
              deck.getSideboard().add(card);
              cardSelector.loadCards(new ArrayList<Card>(deck.getSideboard()),getBigCard(),mode == DeckEditorMode.Limited);
            }
            break;
          }
        }
        refreshDeck();
      }
    }
  }
);
  refreshDeck();
  this.setVisible(true);
  this.repaint();
}
