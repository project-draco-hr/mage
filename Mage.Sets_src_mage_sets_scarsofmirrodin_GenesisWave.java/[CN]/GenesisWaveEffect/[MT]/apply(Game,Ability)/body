{
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller == null || sourceObject == null) {
    return false;
  }
  Cards cards=new CardsImpl(Zone.LIBRARY);
  int xValue=source.getManaCostsToPay().getX();
  int numberCards=Math.min(controller.getLibrary().size(),xValue);
  for (int i=0; i < numberCards; i++) {
    Card card=controller.getLibrary().removeFromTop(game);
    cards.add(card);
  }
  if (cards.size() > 0) {
    controller.revealCards(sourceObject.getLogName(),cards,game);
    FilterCard filter=new FilterCard("cards with converted mana cost " + xValue + " or less to put onto the battlefield");
    filter.add(new ConvertedManaCostPredicate(ComparisonType.LessThan,xValue + 1));
    filter.add(Predicates.or(new CardTypePredicate(CardType.ARTIFACT),new CardTypePredicate(CardType.CREATURE),new CardTypePredicate(CardType.ENCHANTMENT),new CardTypePredicate(CardType.LAND),new CardTypePredicate(CardType.PLANESWALKER)));
    TargetCard target1=new TargetCard(0,Integer.MAX_VALUE,Zone.LIBRARY,filter);
    target1.setRequired(false);
    controller.choose(Outcome.PutCardInPlay,cards,target1,game);
    for (    UUID cardId : target1.getTargets()) {
      Card card=cards.get(cardId,game);
      if (card != null) {
        cards.remove(card);
        controller.putOntoBattlefieldWithInfo(card,game,Zone.LIBRARY,source.getSourceId());
      }
    }
    while (cards.size() > 0) {
      Card card=cards.get(cards.iterator().next(),game);
      cards.remove(card);
      controller.moveCardToGraveyardWithInfo(card,source.getSourceId(),game,Zone.LIBRARY);
    }
  }
  return true;
}
