{
synchronized (this) {
    if (messageId < this.lastMessageId) {
      LOGGER.warn("ignoring message from later source: " + messageId + ", text="+ message);
      return;
    }
    this.lastMessageId=messageId;
  }
  this.helper.setBasicMessage(message);
  this.helper.setOriginalId(null);
  String lblText=addAdditionalText(message,options);
  this.helper.setTextArea(lblText);
  this.mode=mode;
switch (this.mode) {
case INFORM:
    setButtonState("","",mode);
  break;
case QUESTION:
setButtonState("Yes","No",mode);
if (options != null && options.containsKey(ORIGINAL_ID)) {
this.helper.setOriginalId((UUID)options.get(ORIGINAL_ID));
}
break;
case CONFIRM:
setButtonState("OK","Cancel",mode);
break;
case CANCEL:
setButtonState("","Cancel",mode);
this.helper.setUndoEnabled(false);
break;
case SELECT:
setButtonState("","Done",mode);
break;
case END:
setButtonState("","Close game",mode);
ArrowBuilder.getBuilder().removeAllArrows(gameId);
endWithTimeout();
break;
}
if (options != null && options.containsKey(SPECIAL_BUTTON)) {
this.setSpecial((String)options.get(SPECIAL_BUTTON),true);
}
 else {
this.setSpecial("Special",special);
}
requestFocusIfPossible();
handleOptions(options);
this.revalidate();
this.repaint();
this.helper.setLinks(btnLeft,btnRight,btnSpecial,btnUndo);
this.helper.setVisible(true);
}
