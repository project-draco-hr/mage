{
  logger.debug("text: " + message);
synchronized (this) {
    if (messageId < this.lastMessageId) {
      logger.warn("ignoring message from later source: " + messageId + ", text="+ message);
      return;
    }
    this.lastMessageId=messageId;
  }
  this.lblMessage.setText(message);
  this.helper.setMessage(message);
  this.selected=false;
  this.mode=mode;
switch (this.mode) {
case INFORM:
    this.btnLeft.setVisible(false);
  this.btnRight.setVisible(false);
this.helper.setState("",false,"",false);
break;
case QUESTION:
this.btnLeft.setVisible(true);
this.btnLeft.setText("Yes");
this.btnRight.setVisible(true);
this.btnRight.setText("No");
this.helper.setState("Yes",true,"No",true);
break;
case CONFIRM:
this.btnLeft.setVisible(true);
this.btnLeft.setText("OK");
this.btnRight.setVisible(true);
this.btnRight.setText("Cancel");
this.helper.setState("Ok",true,"Cancel",true);
break;
case CANCEL:
this.btnLeft.setVisible(false);
this.btnRight.setVisible(true);
this.btnRight.setText("Cancel");
this.helper.setState("",false,"Cancel",true);
this.helper.setUndoEnabled(false);
break;
case SELECT:
this.btnLeft.setVisible(false);
this.btnRight.setVisible(true);
this.btnRight.setText("Done");
this.helper.setState("",false,"Done",true);
break;
case END:
this.btnLeft.setVisible(false);
this.btnRight.setVisible(true);
this.btnRight.setText("Close game");
this.helper.setState("",false,"Close game",true);
ArrowBuilder.getBuilder().removeAllArrows(gameId);
endWithTimeout();
break;
}
this.btnSpecial.setVisible(special);
this.btnSpecial.setText("Special");
this.helper.setSpecial("Special",special);
if (message.contains("P}")) {
this.btnSpecial.setVisible(true);
this.btnSpecial.setText("Pay 2 life");
this.helper.setSpecial("Pay 2 life",true);
}
requestFocusIfPossible();
handleOptions(options);
this.revalidate();
this.repaint();
this.helper.setLinks(btnLeft,btnRight,btnSpecial,btnUndo);
this.helper.setVisible(true);
}
