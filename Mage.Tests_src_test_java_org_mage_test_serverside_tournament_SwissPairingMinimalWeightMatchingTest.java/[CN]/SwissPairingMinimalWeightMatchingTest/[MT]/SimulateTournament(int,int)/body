{
  Random rnd=new Random();
  List<TournamentPlayer> players=new ArrayList<>();
  for (int i=0; i < playersCount; i++) {
    players.add(new TournamentPlayer(new PlayerStub(),null));
  }
  List<TournamentPairing> playedPairs=new ArrayList<>();
  Set<TournamentPlayer> playersByes=new HashSet<>();
  List<Round> rounds=new ArrayList<>();
  for (int i=0; i < roundsCount; i++) {
    SwissPairingMinimalWeightMatching swissPairing=new SwissPairingMinimalWeightMatching(new ArrayList<>(players),rounds);
    RoundPairings roundPairings=swissPairing.getRoundPairings();
    Assert.assertEquals(playersCount / 2,roundPairings.getPairings().size());
    Assert.assertEquals(playersCount % 2,roundPairings.getPlayerByes().size());
    Round round=new Round(1,new TournamentStub());
    rounds.add(round);
    for (    TournamentPairing pairing : roundPairings.getPairings()) {
      if (ContainsPair(playedPairs,pairing.getPlayer1(),pairing.getPlayer2())) {
        if (i < (playersCount + 1) / 2) {
          throw new AssertionError("Match between players has been played already.");
        }
      }
      playedPairs.add(pairing);
      round.addPairing(pairing);
      if (rnd.nextBoolean()) {
        pairing.getPlayer1().setPoints(pairing.getPlayer1().getPoints() + 3);
      }
 else {
        pairing.getPlayer2().setPoints(pairing.getPlayer2().getPoints() + 3);
      }
    }
    for (    TournamentPlayer playerBye : roundPairings.getPlayerByes()) {
      if (playersByes.contains(playerBye)) {
        throw new AssertionError("Player already had bye.");
      }
      playersByes.add(playerBye);
      round.getPlayerByes().add(playerBye);
      playerBye.setPoints(playerBye.getPoints() + 3);
    }
  }
}
