{
  boolean valid=true;
  FilterMana colorIdentity=new FilterMana();
  if (deck.getCards().size() + deck.getSideboard().size() != 100) {
    invalid.put("Deck","Must contain 100 cards: has " + (deck.getCards().size() + deck.getSideboard().size()) + " cards");
    valid=false;
  }
  List<String> basicLandNames=new ArrayList<>(Arrays.asList("Forest","Island","Mountain","Swamp","Plains","Wastes","Snow-Covered Forest","Snow-Covered Island","Snow-Covered Mountain","Snow-Covered Swamp","Snow-Covered Plains"));
  Map<String,Integer> counts=new HashMap<>();
  countCards(counts,deck.getCards());
  countCards(counts,deck.getSideboard());
  for (  Map.Entry<String,Integer> entry : counts.entrySet()) {
    if (entry.getValue() > 1) {
      if (!basicLandNames.contains(entry.getKey()) && !entry.getKey().equals("Relentless Rats") && !entry.getKey().equals("Shadowborn Apostle")) {
        invalid.put(entry.getKey(),"Too many: " + entry.getValue());
        valid=false;
      }
    }
  }
  for (  String bannedCard : banned) {
    if (counts.containsKey(bannedCard)) {
      invalid.put(bannedCard,"Banned");
      valid=false;
    }
  }
  if (deck.getSideboard().size() < 1 || deck.getSideboard().size() > 2) {
    invalid.put("Commander","Sideboard must contain only the commander(s)");
    valid=false;
  }
 else {
    for (    Card commander : deck.getSideboard()) {
      if (bannedCommander.contains(commander.getName())) {
        invalid.put("Commander","Commander banned (" + commander.getName() + ")");
        valid=false;
      }
      if ((!commander.getCardType().contains(CardType.CREATURE) || !commander.getSupertype().contains("Legendary")) && (!commander.getCardType().contains(CardType.PLANESWALKER) || !commander.getAbilities().contains(CanBeYourCommanderAbility.getInstance()))) {
        invalid.put("Commander","Commander invalid (" + commander.getName() + ")");
        valid=false;
      }
      if (deck.getSideboard().size() == 2 && !commander.getAbilities().contains(PartnerAbility.getInstance())) {
        invalid.put("Commander","Commander without Partner (" + commander.getName() + ")");
        valid=false;
      }
      FilterMana commanderColor=CardUtil.getColorIdentity(commander);
      if (commanderColor.isWhite()) {
        colorIdentity.setWhite(true);
      }
      if (commanderColor.isBlue()) {
        colorIdentity.setBlue(true);
      }
      if (commanderColor.isBlack()) {
        colorIdentity.setBlack(true);
      }
      if (commanderColor.isRed()) {
        colorIdentity.setRed(true);
      }
      if (commanderColor.isGreen()) {
        colorIdentity.setGreen(true);
      }
    }
  }
  for (  Card card : deck.getCards()) {
    if (!cardHasValidColor(colorIdentity,card)) {
      invalid.put(card.getName(),"Invalid color (" + colorIdentity.toString() + ")");
      valid=false;
    }
  }
  for (  Card card : deck.getCards()) {
    if (!isSetAllowed(card.getExpansionSetCode())) {
      if (!legalSets(card)) {
        invalid.put(card.getName(),"Not allowed Set: " + card.getExpansionSetCode());
        valid=false;
      }
    }
  }
  for (  Card card : deck.getSideboard()) {
    if (!isSetAllowed(card.getExpansionSetCode())) {
      if (!legalSets(card)) {
        invalid.put(card.getName(),"Not allowed Set: " + card.getExpansionSetCode());
        valid=false;
      }
    }
  }
  return valid;
}
