{
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  int value=amount.calculate(game,source,this);
  boolean result=false;
  ChoiceColor choice=new ChoiceColor();
  for (int i=0; i < value; i++) {
    if (!choice.isChosen()) {
      if (!controller.choose(outcome,choice,game)) {
        return false;
      }
    }
    Mana mana=null;
    if (choice.getColor().isBlack()) {
      mana=manaBuilder.setMana(Mana.BlackMana(1),source,game).build();
    }
 else     if (choice.getColor().isBlue()) {
      mana=manaBuilder.setMana(Mana.BlueMana(1),source,game).build();
    }
 else     if (choice.getColor().isRed()) {
      mana=manaBuilder.setMana(Mana.RedMana(1),source,game).build();
    }
 else     if (choice.getColor().isGreen()) {
      mana=manaBuilder.setMana(Mana.GreenMana(1),source,game).build();
    }
 else     if (choice.getColor().isWhite()) {
      mana=manaBuilder.setMana(Mana.WhiteMana(1),source,game).build();
    }
    if (mana != null) {
      controller.getManaPool().addMana(mana,game,source);
      result=true;
    }
    if (!oneChoice) {
      choice.clearChoice();
    }
  }
  return result;
}
