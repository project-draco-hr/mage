{
  this.tableId=table.getId();
  this.gameType=table.getGameType();
  this.tableName=table.getName();
  this.controllerName=table.getControllerName();
  this.tableState=table.getState();
  if (table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.READY_TO_START) || table.getState().equals(TableState.STARTING)) {
    this.createTime=table.getCreateTime();
  }
 else {
    if (table.isTournament()) {
      this.createTime=table.getTournament().getStartTime();
    }
 else {
      this.createTime=table.getMatch().getStartTime();
    }
  }
  this.isTournament=table.isTournament();
  for (  Seat seat : table.getSeats()) {
    seats.add(new SeatView(seat));
  }
  if (!table.isTournament()) {
    this.wins=table.getMatch().getWinsNeeded();
    this.freeMulligans=table.getMatch().getFreeMulligans();
    for (    Game game : table.getMatch().getGames()) {
      games.add(game.getId());
    }
    StringBuilder sb=new StringBuilder();
    StringBuilder sbScore=new StringBuilder();
    for (    MatchPlayer matchPlayer : table.getMatch().getPlayers()) {
      if (matchPlayer.getPlayer() == null) {
        sb.append(", ").append("[unknown]");
        sbScore.append("-").append(matchPlayer.getWins());
      }
 else       if (!matchPlayer.getName().equals(table.getControllerName())) {
        sb.append(", ").append(matchPlayer.getName());
        sbScore.append("-").append(matchPlayer.getWins());
      }
 else {
        sbScore.insert(0,matchPlayer.getWins()).insert(0,"Score: ");
      }
    }
    if (table.getMatch().getDraws() > 0) {
      sbScore.append(" Draws: ").append(table.getMatch().getDraws());
    }
    this.controllerName+=sb.toString();
    this.deckType=table.getDeckType();
    if (table.getMatch().getGames().isEmpty()) {
      this.additionalInfo=new StringBuilder("Timer: ").append(table.getMatch().getOptions().getMatchTimeLimit().toString()).toString();
    }
 else {
      this.additionalInfo=sbScore.toString();
    }
  }
 else {
    this.wins=table.getTournament().getOptions().getMatchOptions().getWinsNeeded();
    if (table.getTournament().getOptions().getNumberRounds() > 0) {
      this.gameType=new StringBuilder(this.gameType).append(" ").append(table.getTournament().getOptions().getNumberRounds()).append(" Rounds").toString();
    }
    this.freeMulligans=table.getTournament().getOptions().getMatchOptions().getFreeMulligans();
    StringBuilder sb1=new StringBuilder();
    for (    TournamentPlayer tp : table.getTournament().getPlayers()) {
      if (!tp.getPlayer().getName().equals(table.getControllerName())) {
        sb1.append(", ").append(tp.getPlayer().getName());
      }
    }
    this.controllerName+=sb1.toString();
    StringBuilder sb=new StringBuilder("Seats: ").append(table.getTournament().getPlayers().size()).append("/").append(table.getNumberOfSeats());
switch (table.getState()) {
case WAITING:
case READY_TO_START:
case STARTING:
      sb.append(" Constr. Time: ").append(table.getTournament().getOptions().getLimitedOptions().getConstructionTime() / 60).append(" Min.");
    break;
case DUELING:
  sb.append(" - Running round: ").append(table.getTournament().getRounds().size());
break;
default :
}
this.additionalInfo=sb.toString();
this.deckType=new StringBuilder(table.getDeckType()).append(" ").append(table.getTournament().getBoosterInfo()).toString();
}
}
