{
  this.tableId=table.getId();
  this.gameType=table.getGameType();
  this.tableName=table.getName();
  String tableNameInfo=null;
  if (tableName != null && !tableName.isEmpty()) {
    tableNameInfo=" [" + table.getName() + "]";
  }
  this.controllerName=table.getControllerName();
  this.tableState=table.getState();
  if (table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.READY_TO_START) || table.getState().equals(TableState.STARTING)) {
    this.createTime=table.getCreateTime();
  }
 else {
    if (table.isTournament()) {
      this.createTime=table.getTournament().getStartTime();
    }
 else {
      this.createTime=table.getMatch().getStartTime();
    }
  }
  this.isTournament=table.isTournament();
  for (  Seat seat : table.getSeats()) {
    seats.add(new SeatView(seat));
  }
  if (!table.isTournament()) {
    if (table.getState().equals(TableState.WAITING) || table.getState().equals(TableState.READY_TO_START)) {
      tableStateText=table.getState().toString() + " (" + table.getMatch().getPlayers().size()+ "/"+ table.getSeats().length+ ")"+ (table.getMatch().getOptions().getPassword().isEmpty() ? "" : " PW");
    }
 else {
      tableStateText=table.getState().toString();
    }
    for (    Game game : table.getMatch().getGames()) {
      games.add(game.getId());
    }
    StringBuilder sb=new StringBuilder();
    StringBuilder sbScore=new StringBuilder();
    for (    MatchPlayer matchPlayer : table.getMatch().getPlayers()) {
      if (matchPlayer.getPlayer() == null) {
        sb.append(", ").append("[unknown]");
        sbScore.append("-").append(matchPlayer.getWins());
      }
 else       if (!matchPlayer.getName().equals(table.getControllerName())) {
        sb.append(", ").append(matchPlayer.getName());
        sbScore.append("-").append(matchPlayer.getWins());
      }
 else {
        sbScore.insert(0,matchPlayer.getWins()).insert(0," Score: ");
      }
    }
    if (table.getMatch().getDraws() > 0) {
      sbScore.append(" Draws: ").append(table.getMatch().getDraws());
    }
    this.controllerName+=sb.toString();
    this.deckType=table.getDeckType() + (tableNameInfo != null ? tableNameInfo : "");
    StringBuilder addInfo=new StringBuilder();
    if (table.getMatch().getGames().isEmpty()) {
      addInfo.append("Wins:").append(table.getMatch().getWinsNeeded());
      addInfo.append(" Time: ").append(table.getMatch().getOptions().getMatchTimeLimit().toString());
      if (table.getMatch().getFreeMulligans() > 0) {
        addInfo.append(" Free Mul.: ").append(table.getMatch().getFreeMulligans());
      }
    }
 else {
      addInfo.append("Wins:").append(table.getMatch().getWinsNeeded());
      addInfo.append(sbScore.toString());
    }
    this.additionalInfo=addInfo.toString();
  }
 else {
    if (table.getTournament().getOptions().getNumberRounds() > 0) {
      this.gameType=new StringBuilder(this.gameType).append(" ").append(table.getTournament().getOptions().getNumberRounds()).append(" Rounds").toString();
    }
    StringBuilder sb1=new StringBuilder();
    for (    TournamentPlayer tp : table.getTournament().getPlayers()) {
      if (!tp.getPlayer().getName().equals(table.getControllerName())) {
        sb1.append(", ").append(tp.getPlayer().getName());
      }
    }
    this.controllerName+=sb1.toString();
    StringBuilder infoText=new StringBuilder();
    StringBuilder stateText=new StringBuilder(table.getState().toString());
    infoText.append("Wins:").append(table.getTournament().getOptions().getMatchOptions().getWinsNeeded());
    infoText.append(" Seats: ").append(table.getTournament().getPlayers().size()).append("/").append(table.getNumberOfSeats());
switch (table.getState()) {
case WAITING:
      stateText.append(" (").append(table.getTournament().getPlayers().size()).append("/").append(table.getNumberOfSeats()).append(")");
    if (!table.getTournament().getOptions().getPassword().isEmpty()) {
      stateText.append(" PW");
    }
case READY_TO_START:
case STARTING:
  infoText.append(" Time: ").append(table.getTournament().getOptions().getMatchOptions().getMatchTimeLimit().toString());
if (table.getTournament().getOptions().getMatchOptions().getFreeMulligans() > 0) {
  infoText.append(" Fr.Mul: ").append(table.getTournament().getOptions().getMatchOptions().getFreeMulligans());
}
if (table.getTournament().getTournamentType().isLimited()) {
infoText.append(" Constr.: ").append(table.getTournament().getOptions().getLimitedOptions().getConstructionTime() / 60).append(" Min.");
}
break;
case DUELING:
stateText.append(" Round: ").append(table.getTournament().getRounds().size());
break;
case DRAFTING:
Draft draft=table.getTournament().getDraft();
if (draft != null) {
stateText.append(" ").append(draft.getBoosterNum()).append("/").append(draft.getCardNum() - 1);
}
default :
}
this.additionalInfo=infoText.toString();
this.tableStateText=stateText.toString();
this.deckType=table.getDeckType() + " " + table.getTournament().getBoosterInfo()+ (tableNameInfo != null ? tableNameInfo : "");
}
}
