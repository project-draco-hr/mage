{
  super(null,card.getName());
  this.cardNumber=card.getCardNumber();
  this.expansionSetCode=card.getSetCode();
  this.power=mageIntFromString(card.getPower());
  this.toughness=mageIntFromString(card.getToughness());
  this.rarity=card.getRarity();
  this.cardType=card.getTypes();
  this.subtype=card.getSubTypes();
  this.supertype=card.getSupertypes();
  this.usesVariousArt=card.usesVariousArt();
  this.manaCost=new ManaCostsImpl(join(card.getManaCosts()));
  this.color=card.getColor();
  this.frameColor=card.getFrameColor();
  this.frameStyle=card.getFrameStyle();
  this.splitCard=card.isSplitCard();
  this.flipCard=card.isFlipCard();
  this.canTransform=card.isDoubleFaced();
  this.nightCard=card.isNightCard();
  if (card.getSecondSideName() != null && !card.getSecondSideName().isEmpty()) {
    this.secondSideCard=new MockCard(CardRepository.instance.findCard(card.getSecondSideName()));
  }
  if (this.cardType.contains(CardType.PLANESWALKER)) {
    String startingLoyaltyString=card.getStartingLoyalty();
    if (startingLoyaltyString.isEmpty()) {
    }
 else {
      try {
        this.startingLoyalty=Integer.parseInt(startingLoyaltyString);
      }
 catch (      NumberFormatException e) {
        Logger.getLogger(MockCard.class).warn("Planeswalker `" + this.name + "` starting loyalty in bad format: `"+ startingLoyaltyString+ "`.");
      }
    }
  }
  this.flipCardName=card.getFlipCardName();
  for (  String ruleText : card.getRules()) {
    this.addAbility(textAbilityFromString(ruleText));
  }
}
