{
  ArrayList<TableView> tableList=new ArrayList<>();
  ArrayList<MatchView> matchList=new ArrayList<>();
  List<Table> allTables=new ArrayList<>(tables.values());
  Collections.sort(allTables,new TableListSorter());
  for (  Table table : allTables) {
    if (table.getState() != TableState.FINISHED) {
      tableList.add(new TableView(table));
    }
 else     if (matchList.size() < 50) {
      if (table.isTournament()) {
        matchList.add(new MatchView(table));
      }
 else {
        matchList.add(new MatchView(table));
      }
    }
 else {
      if (table.isTournament()) {
        TournamentManager.getInstance().removeTournament(table.getTournament().getId());
      }
      this.removeTable(table.getId());
    }
  }
  tableView=tableList;
  matchView=matchList;
  List<UsersView> users=new ArrayList<>();
  for (  User user : UserManager.getInstance().getUsers()) {
    try {
      users.add(new UsersView(user.getName(),user.getInfo(),user.getGameInfo(),user.getPingInfo()));
    }
 catch (    Exception ex) {
      logger.fatal("User update exception: " + user.getName() + " - "+ ex.toString(),ex);
      users.add(new UsersView(user.getName(),user.getInfo(),"[exception]",user.getPingInfo()));
    }
  }
  Collections.sort(users,new UserNameSorter());
  List<RoomUsersView> roomUserInfo=new ArrayList<>();
  roomUserInfo.add(new RoomUsersView(users,GameManager.getInstance().getNumberActiveGames(),ThreadExecutor.getInstance().getActiveThreads(ThreadExecutor.getInstance().getGameExecutor()),ConfigSettings.getInstance().getMaxGameThreads()));
  roomUsersView=roomUserInfo;
}
