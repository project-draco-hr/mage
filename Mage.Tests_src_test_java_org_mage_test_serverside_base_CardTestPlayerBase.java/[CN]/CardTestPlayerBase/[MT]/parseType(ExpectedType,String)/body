{
  if (type.equals(CardTestPlayerBase.ExpectedType.TURN_NUMBER)) {
    int turn=getIntParam(line,1);
    Assert.assertEquals("Turn numbers are not equal",turn,currentGame.getTurnNum());
    return;
  }
  if (type.equals(CardTestPlayerBase.ExpectedType.RESULT)) {
    String expected=getStringParam(line,1);
    String actual="draw";
switch (currentGame.getWinner()) {
case "Player ComputerA is the winner":
      actual="won";
    break;
case "Player ComputerB is the winner":
  actual="lost";
break;
}
Assert.assertEquals("Game results are not equal",expected,actual);
return;
}
Player player=null;
String playerName=getStringParam(line,1);
switch (playerName) {
case "ComputerA":
player=currentGame.getPlayer(playerA.getId());
break;
case "ComputerB":
player=currentGame.getPlayer(playerB.getId());
break;
}
if (player == null) {
throw new IllegalArgumentException("Wrong player in 'battlefield' line, player=" + player + ", line="+ line);
}
if (type.equals(CardTestPlayerBase.ExpectedType.LIFE)) {
int expected=getIntParam(line,2);
int actual=player.getLife();
Assert.assertEquals("Life amounts are not equal",expected,actual);
return;
}
if (type.equals(CardTestPlayerBase.ExpectedType.BATTLEFIELD)) {
String cardName=getStringParam(line,2);
int expectedCount=getIntParam(line,3);
int actualCount=0;
for (Permanent permanent : currentGame.getBattlefield().getAllPermanents()) {
if (permanent.getControllerId().equals(player.getId())) {
if (permanent.getName().equals(cardName)) {
actualCount++;
}
}
}
Assert.assertEquals("(Battlefield) Card counts are not equal (" + cardName + ")",expectedCount,actualCount);
return;
}
if (type.equals(CardTestPlayerBase.ExpectedType.GRAVEYARD)) {
String cardName=getStringParam(line,2);
int expectedCount=getIntParam(line,3);
int actualCount=0;
for (Card card : player.getGraveyard().getCards(currentGame)) {
if (card.getName().equals(cardName)) {
actualCount++;
}
}
Assert.assertEquals("(Graveyard) Card counts are not equal (" + cardName + ")",expectedCount,actualCount);
}
}
