{
  MageObject sourceObject=source.getSourceObject(game);
  if (sourceObject == null) {
    return false;
  }
  List<Card> cards=new ArrayList<>();
  for (  ExileZone zone : game.getExile().getExileZones()) {
    if (zone.getId().equals(exileId)) {
      for (      Card card : zone.getCards(game)) {
        if (!card.getSubtype(game).contains("Aura") && CardUtil.isPermanentCard(card)) {
          cards.add(card);
        }
      }
    }
  }
  game.getState().clear();
  for (  Card card : game.getCards()) {
    game.getState().addCard(card);
  }
  for (  Player player : game.getPlayers().values()) {
    if (player.isInGame()) {
      player.getGraveyard().clear();
      player.getHand().clear();
      player.getLibrary().clear();
      for (      Card card : game.getCards()) {
        if (card.getOwnerId().equals(player.getId()) && !card.isCopy() && !player.getSideboard().contains(card.getId())&& !cards.contains(card)) {
          if (card.getId().equals(player.getCommanderId())) {
            game.addCommander(new Commander(card));
            game.setZone(card.getId(),Zone.COMMAND);
          }
 else {
            player.getLibrary().putOnTop(card,game);
          }
        }
      }
      player.init(game);
    }
  }
  for (  Card card : cards) {
    game.getState().setZone(card.getId(),Zone.EXILED);
    if (CardUtil.isPermanentCard(card) && !card.getSubtype(game).contains("Aura")) {
      game.getExile().add(exileId,sourceObject.getIdName(),card);
    }
  }
  DelayedTriggeredAbility delayedAbility=new KarnLiberatedDelayedTriggeredAbility(exileId);
  delayedAbility.setSourceId(source.getSourceId());
  delayedAbility.setControllerId(source.getControllerId());
  delayedAbility.setSourceObject(source.getSourceObject(game),game);
  game.addDelayedTriggeredAbility(delayedAbility);
  game.start(null);
  return true;
}
