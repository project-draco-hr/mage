{
  JMenuItem menuItem;
  menuItem=new JMenuItem("F2 - Confirm");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (gamePanel.getFeedbackPanel() != null) {
        gamePanel.getFeedbackPanel().pressOKYesOrDone();
      }
    }
  }
);
  menuItem=new JMenuItem("F3 - Cancel previous F4/F9 skip action");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      gamePanel.getSession().sendPlayerAction(PlayerAction.PASS_PRIORITY_CANCEL_ALL_ACTIONS,gameId);
    }
  }
);
  popupMenu.addSeparator();
  menuItem=new JMenuItem("F4 - Skip phases until next turn (stop on stack/attack/block)");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      gamePanel.getSession().sendPlayerAction(PlayerAction.PASS_PRIORITY_UNTIL_NEXT_TURN,gameId);
    }
  }
);
  menuItem=new JMenuItem("F5 - Skip phases until opponent's end step (stop on stack/attack/block)");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      gamePanel.getSession().sendPlayerAction(PlayerAction.PASS_PRIORITY_UNTIL_OPPONENTS_TURN_END_STEP,gameId);
    }
  }
);
  menuItem=new JMenuItem("F9 - Skip everything until own next turn (stop on attack/block)");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      gamePanel.getSession().sendPlayerAction(PlayerAction.PASS_PRIORITY_UNTIL_MY_NEXT_TURN,gameId);
    }
  }
);
  popupMenu.addSeparator();
  manaPoolMenuItem=new JCheckBoxMenuItem("Use mana from pool automatically",true);
  manaPoolMenuItem.setMnemonic(KeyEvent.VK_M);
  manaPoolMenuItem.setToolTipText("If not active, you have to click the type of mana you want to pay in the player panel.");
  popupMenu.add(manaPoolMenuItem);
  manaPoolMenuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      boolean manaPoolAutomatic=((JCheckBoxMenuItem)e.getSource()).getState();
      gamePanel.setMenuStates(manaPoolAutomatic);
      gamePanel.getSession().sendPlayerAction(manaPoolAutomatic ? PlayerAction.MANA_AUTO_PAYMENT_ON : PlayerAction.MANA_AUTO_PAYMENT_OFF,gameId);
    }
  }
);
  popupMenu.addSeparator();
  menuItem=new JMenuItem("Concede game");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (JOptionPane.showConfirmDialog(PlayAreaPanel.this,"Are you sure you want to concede the game?","Confirm concede game",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
        MageFrame.getSession().sendPlayerAction(PlayerAction.CONCEDE,gameId);
      }
    }
  }
);
  popupMenu.addSeparator();
  menuItem=new JMenuItem("Concede complete match");
  popupMenu.add(menuItem);
  menuItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      if (JOptionPane.showConfirmDialog(PlayAreaPanel.this,"Are you sure you want to concede the complete match?","Confirm concede match",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
        MageFrame.getSession().quitMatch(gameId);
      }
    }
  }
);
  battlefieldPanel.getMainPanel().addMouseListener(new MouseAdapter(){
    @Override public void mouseReleased(    MouseEvent Me){
      this.checkMenu(Me);
    }
    @Override public void mousePressed(    MouseEvent Me){
      this.checkMenu(Me);
    }
    private void checkMenu(    MouseEvent Me){
      if (Me.isPopupTrigger() && playingMode) {
        popupMenu.show(Me.getComponent(),Me.getX(),Me.getY());
      }
    }
  }
);
}
