{
  try {
    System.setSecurityManager(null);
    System.setProperty("http.nonProxyHosts","code.google.com");
    System.setProperty("socksNonProxyHosts","code.google.com");
    System.clearProperty("socksProxyHost");
    System.clearProperty("socksProxyPort");
    System.clearProperty("http.proxyHost");
    System.clearProperty("http.proxyPort");
switch (connection.getProxyType()) {
case SOCKS:
      System.setProperty("socksProxyHost",connection.getProxyHost());
    System.setProperty("socksProxyPort",Integer.toString(connection.getProxyPort()));
  break;
case HTTP:
System.setProperty("http.proxyHost",connection.getProxyHost());
System.setProperty("http.proxyPort",Integer.toString(connection.getProxyPort()));
Authenticator.setDefault(new MageAuthenticator(connection.getProxyUsername(),connection.getProxyPassword()));
break;
}
Registry reg=LocateRegistry.getRegistry(connection.getHost(),connection.getPort());
this.userName=connection.getUsername();
if (client == null) client=new Client(this,frame);
sessionId=registerClient(userName,client.getId(),frame.getVersion());
callbackDaemon=new CallbackClientDaemon(sessionId,client,connection);
serverState=getServerState();
future=sessionExecutor.scheduleWithFixedDelay(new ServerPinger(),5,5,TimeUnit.SECONDS);
logger.info("Connected to RMI server at " + connection.getHost() + ":"+ connection.getPort());
frame.setStatusText("Connected to " + connection.getHost() + ":"+ connection.getPort()+ " ");
frame.enableButtons();
reconnecting=false;
connecting=false;
return true;
}
 catch (Exception ex) {
logger.fatal("",ex);
if (!reconnecting) {
disconnect(false);
JOptionPane.showMessageDialog(frame,"Unable to connect to server. " + ex.getMessage());
}
}
return false;
}
