{
  boolean skip=false;
  while (true) {
    Phase currentPhase=game.getPhase();
    if (!skip) {
      currentPhase.getStep().endStep(game,activePlayerId);
    }
    game.applyEffects();
switch (currentPhase.getStep().getType()) {
case UNTAP:
      game.getPhase().setStep(new UpkeepStep());
    break;
case UPKEEP:
  game.getPhase().setStep(new DrawStep());
break;
case DRAW:
game.getTurn().setPhase(new PreCombatMainPhase());
game.getPhase().setStep(new PreCombatMainStep());
break;
case PRECOMBAT_MAIN:
game.getTurn().setPhase(new CombatPhase());
game.getPhase().setStep(new BeginCombatStep());
break;
case BEGIN_COMBAT:
game.getPhase().setStep(new DeclareAttackersStep());
break;
case DECLARE_ATTACKERS:
game.getPhase().setStep(new DeclareBlockersStep());
break;
case DECLARE_BLOCKERS:
game.getPhase().setStep(new FirstCombatDamageStep());
break;
case FIRST_COMBAT_DAMAGE:
game.getPhase().setStep(new CombatDamageStep());
break;
case COMBAT_DAMAGE:
game.getPhase().setStep(new EndOfCombatStep());
break;
case END_COMBAT:
game.getTurn().setPhase(new PostCombatMainPhase());
game.getPhase().setStep(new PostCombatMainStep());
break;
case POSTCOMBAT_MAIN:
game.getTurn().setPhase(new EndPhase());
game.getPhase().setStep(new EndStep());
break;
case END_TURN:
game.getPhase().setStep(new CleanupStep());
break;
case CLEANUP:
game.getPhase().getStep().beginStep(game,activePlayerId);
if (!game.checkStateAndTriggered() && !game.gameOver(null)) {
game.getState().setActivePlayerId(game.getState().getPlayerList(game.getActivePlayerId()).getNext());
game.getTurn().setPhase(new BeginningPhase());
game.getPhase().setStep(new UntapStep());
}
}
if (!game.getStep().skipStep(game,game.getActivePlayerId())) {
if (game.getTurn().getStepType() == PhaseStep.DECLARE_ATTACKERS) {
declareAttackers(game,activePlayerId,node);
}
 else if (game.getTurn().getStepType() == PhaseStep.DECLARE_BLOCKERS) {
declareBlockers(game,activePlayerId,node);
}
 else {
game.getStep().beginStep(game,activePlayerId);
}
if (game.getStep().getHasPriority()) {
break;
}
}
 else {
skip=true;
}
}
game.checkStateAndTriggered();
}
