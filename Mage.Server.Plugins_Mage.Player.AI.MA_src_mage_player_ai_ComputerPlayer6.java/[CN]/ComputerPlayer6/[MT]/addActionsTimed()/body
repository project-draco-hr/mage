{
  FutureTask<Integer> task=new FutureTask<>(new Callable<Integer>(){
    @Override public Integer call() throws Exception {
      return addActions(root,maxDepth,Integer.MIN_VALUE,Integer.MAX_VALUE);
    }
  }
);
  pool.execute(task);
  try {
    int maxSeconds=maxThink;
    if (!ALLOW_INTERRUPT) {
      maxSeconds=3600;
    }
    logger.debug("maxThink: " + maxSeconds + " seconds ");
    return task.get(maxSeconds,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    logger.info("simulating - timed out");
    task.cancel(true);
  }
catch (  ExecutionException e) {
    e.printStackTrace();
    task.cancel(true);
  }
catch (  InterruptedException e) {
    e.printStackTrace();
    task.cancel(true);
  }
catch (  Exception e) {
    e.printStackTrace();
    task.cancel(true);
  }
  return 0;
}
