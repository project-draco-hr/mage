{
  game.fireEvent(new GameEvent(GameEvent.EventType.DECLARE_ATTACKERS_STEP_PRE,null,null,activePlayerId));
  if (!game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.DECLARING_ATTACKERS,activePlayerId,activePlayerId))) {
    Player attackingPlayer=game.getPlayer(activePlayerId);
    UUID defenderId=game.getOpponents(playerId).iterator().next();
    Player defender=game.getPlayer(defenderId);
    List<Permanent> attackersList=super.getAvailableAttackers(game);
    if (attackersList.isEmpty()) {
      return;
    }
    for (    Permanent attacker : attackersList) {
      System.out.println("Number of potential attackers " + attackersList.size());
      System.out.println("Potential attacker is " + attacker.getName());
    }
    if (attackersList.isEmpty()) {
      return;
    }
    List<Permanent> possibleBlockers=defender.getAvailableBlockers(game);
    for (    Permanent blocker : possibleBlockers) {
      System.out.println("Number of blockers " + possibleBlockers.size());
      System.out.println("Blocker is " + blocker.getName());
    }
    List<Permanent> killers=CombatUtil.canKillOpponent(game,attackersList,possibleBlockers,defender);
    if (!killers.isEmpty()) {
      for (      Permanent attacker : killers) {
        attackingPlayer.declareAttacker(attacker.getId(),defenderId,game);
      }
      return;
    }
    boolean safeToAttack;
    CombatEvaluator eval=new CombatEvaluator();
    for (    Permanent attacker : attackersList) {
      safeToAttack=true;
      int attackerValue=eval.evaluate(attacker,game);
      for (      Permanent blocker : possibleBlockers) {
        int blockerValue=eval.evaluate(blocker,game);
        if (attacker.getPower().getValue() <= blocker.getToughness().getValue() && attacker.getToughness().getValue() <= blocker.getPower().getValue()) {
          safeToAttack=false;
        }
        if (attacker.getToughness().getValue() == blocker.getPower().getValue() && attacker.getPower().getValue() == blocker.getToughness().getValue()) {
          if (attackerValue < blockerValue || blocker.getAbilities().containsKey(FirstStrikeAbility.getInstance().getId()) || blocker.getAbilities().containsKey(DoubleStrikeAbility.getInstance().getId())) {
            safeToAttack=false;
          }
        }
      }
      if (attacker.getAbilities().containsKey(DeathtouchAbility.getInstance().getId())) {
        safeToAttack=true;
      }
      if (safeToAttack) {
        attackingPlayer.declareAttacker(attacker.getId(),defenderId,game);
      }
    }
  }
}
