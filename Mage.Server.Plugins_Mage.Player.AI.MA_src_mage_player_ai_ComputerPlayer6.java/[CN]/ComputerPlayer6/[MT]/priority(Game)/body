{
  logState(game);
  game.firePriorityEvent(playerId);
switch (game.getTurn().getStepType()) {
case UPKEEP:
case DRAW:
    pass();
  break;
case PRECOMBAT_MAIN:
case DECLARE_BLOCKERS:
case POSTCOMBAT_MAIN:
if (game.getActivePlayerId().equals(playerId)) {
  printOutState(game,playerId);
  printOutState(game,game.getOpponents(playerId).iterator().next());
  if (actions.size() == 0) {
    calculateActions(game);
  }
  act(game);
}
 else {
  pass();
}
break;
case BEGIN_COMBAT:
case FIRST_COMBAT_DAMAGE:
case COMBAT_DAMAGE:
case END_COMBAT:
pass();
break;
case DECLARE_ATTACKERS:
if (!game.getActivePlayerId().equals(playerId)) {
printOutState(game,playerId);
printOutState(game,game.getOpponents(playerId).iterator().next());
if (actions.size() == 0) {
calculateActions(game);
}
act(game);
}
 else {
pass();
}
break;
case END_TURN:
pass();
break;
case CLEANUP:
pass();
break;
}
}
