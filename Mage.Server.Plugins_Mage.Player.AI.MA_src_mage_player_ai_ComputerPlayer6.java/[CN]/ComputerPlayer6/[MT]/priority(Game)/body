{
  logState(game);
  game.getState().setPriorityPlayerId(playerId);
  game.firePriorityEvent(playerId);
switch (game.getTurn().getStepType()) {
case UPKEEP:
case DRAW:
    pass();
  return false;
case PRECOMBAT_MAIN:
case POSTCOMBAT_MAIN:
if (game.getActivePlayerId().equals(playerId)) {
  if (logger.isInfoEnabled()) {
    printOutState(game,playerId);
    Iterator it=game.getOpponents(playerId).iterator();
    while (it.hasNext()) {
      UUID opponentId=(UUID)it.next();
      printOutState(game,opponentId);
    }
  }
  if (actions.size() == 0) {
    calculateActions(game);
  }
  act(game);
  return true;
}
 else {
  pass();
}
return false;
case BEGIN_COMBAT:
case FIRST_COMBAT_DAMAGE:
case COMBAT_DAMAGE:
case END_COMBAT:
pass();
return false;
case DECLARE_ATTACKERS:
if (game.getActivePlayerId().equals(playerId)) {
pass();
}
 else {
pass();
}
return false;
case DECLARE_BLOCKERS:
if (!game.getActivePlayerId().equals(playerId)) {
declareBlockers(game,playerId);
pass();
}
 else {
pass();
}
return false;
case END_TURN:
pass();
return false;
case CLEANUP:
pass();
return false;
}
return false;
}
