{
  this.updateCard=card;
  if (isPermanent && (card instanceof PermanentView)) {
    boolean needsTapping=isTapped() != ((PermanentView)card).isTapped();
    boolean needsFlipping=isFlipped() != ((PermanentView)card).isFlipped();
    if (needsTapping || needsFlipping) {
      Animation.tapCardToggle(this,this,needsTapping,needsFlipping);
    }
    if (needsTapping && ((PermanentView)card).isTapped()) {
      AudioManager.playTapPermanent();
    }
    boolean needsTranforming=isTransformed() != card.isTransformed();
    if (needsTranforming) {
      Animation.transformCard(this,this,card.isTransformed());
    }
  }
  if (card.canTransform()) {
    dayNightButton.setVisible(!isPermanent);
  }
  if (CardUtil.isCreature(card) && CardUtil.isPlaneswalker(card)) {
    ptText.setText(card.getPower() + "/" + card.getToughness()+ " ("+ card.getLoyalty()+ ")");
  }
 else   if (CardUtil.isCreature(card)) {
    ptText.setText(card.getPower() + "/" + card.getToughness());
  }
 else   if (CardUtil.isPlaneswalker(card)) {
    ptText.setText(card.getLoyalty());
  }
 else {
    ptText.setText("");
  }
  setText(card);
  this.isPlayable=card.isPlayable();
  this.isChoosable=card.isChoosable();
  this.canAttack=card.isCanAttack();
  this.isSelected=card.isSelected();
  boolean updateImage=!gameCard.getName().equals(card.getName()) || gameCard.isFaceDown() != card.isFaceDown();
  this.gameCard=card;
  String cardType=getType(card);
  popupText.setText(getText(cardType,card));
  if (hasSickness && CardUtil.isCreature(gameCard) && isPermanent) {
    overlayPanel.setVisible(true);
  }
 else {
    overlayPanel.setVisible(false);
  }
  if (updateImage) {
    updateImage();
    if (card.canTransform()) {
      BufferedImage transformIcon;
      if (card.isTransformed()) {
        transformIcon=ImageManagerImpl.getInstance().getNightImage();
      }
 else {
        transformIcon=ImageManagerImpl.getInstance().getDayImage();
      }
      dayNightButton.setIcon(new ImageIcon(transformIcon));
    }
  }
  if (card.getCounters() != null && !card.getCounters().isEmpty()) {
    String name="";
    if (lastCardWidth != cardWidth) {
      lastCardWidth=cardWidth;
      plusCounter=0;
      minusCounter=0;
      otherCounter=0;
      loyaltyCounter=0;
    }
    plusCounterLabel.setVisible(false);
    minusCounterLabel.setVisible(false);
    loyaltyCounterLabel.setVisible(false);
    otherCounterLabel.setVisible(false);
    for (    CounterView counterView : card.getCounters()) {
      if (counterView.getCount() == 0) {
        continue;
      }
switch (counterView.getName()) {
case "+1/+1":
        if (counterView.getCount() != plusCounter) {
          plusCounter=counterView.getCount();
          plusCounterLabel.setIcon(getCounterImageWithAmount(plusCounter,ImageManagerImpl.getInstance().getCounterImageGreen(),cardWidth));
        }
      plusCounterLabel.setVisible(true);
    break;
case "-1/-1":
  if (counterView.getCount() != minusCounter) {
    minusCounter=counterView.getCount();
    minusCounterLabel.setIcon(getCounterImageWithAmount(minusCounter,ImageManagerImpl.getInstance().getCounterImageRed(),cardWidth));
  }
minusCounterLabel.setVisible(true);
break;
case "loyalty":
if (counterView.getCount() != loyaltyCounter) {
loyaltyCounter=counterView.getCount();
loyaltyCounterLabel.setIcon(getCounterImageWithAmount(loyaltyCounter,ImageManagerImpl.getInstance().getCounterImageViolet(),cardWidth));
}
loyaltyCounterLabel.setVisible(true);
break;
default :
if (name.isEmpty()) {
name=counterView.getName();
otherCounter=counterView.getCount();
otherCounterLabel.setToolTipText(name);
otherCounterLabel.setIcon(getCounterImageWithAmount(otherCounter,ImageManagerImpl.getInstance().getCounterImageGrey(),cardWidth));
otherCounterLabel.setVisible(true);
}
}
}
counterPanel.setVisible(true);
}
 else {
plusCounterLabel.setVisible(false);
minusCounterLabel.setVisible(false);
loyaltyCounterLabel.setVisible(false);
otherCounterLabel.setVisible(false);
counterPanel.setVisible(false);
}
repaint();
}
