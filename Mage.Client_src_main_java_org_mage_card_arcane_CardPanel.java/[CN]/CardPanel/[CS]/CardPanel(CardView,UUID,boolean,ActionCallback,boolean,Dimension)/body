{
  this.gameCard=newGameCard;
  this.callback=callback;
  this.gameId=gameId;
  this.isPermanent=this.gameCard instanceof PermanentView;
  if (isPermanent) {
    this.hasSickness=((PermanentView)this.gameCard).hasSummoningSickness();
  }
  this.setCardBounds(0,0,dimension.width,dimension.height);
  buttonPanel=new JPanel();
  buttonPanel.setLayout(null);
  buttonPanel.setOpaque(false);
  buttonPanel.setVisible(true);
  add(buttonPanel);
  if (this.gameCard.canTransform()) {
    dayNightButton=new JButton("");
    dayNightButton.setSize(32,32);
    dayNightButton.setToolTipText("This permanent is a double faced card. To see the back face card, push this button or turn mouse wheel down while hovering with the mouse pointer over the permanent.");
    BufferedImage day=ImageManagerImpl.getInstance().getDayImage();
    dayNightButton.setIcon(new ImageIcon(day));
    dayNightButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        if (animationInProgress || isTapped() || isPermanent) {
          return;
        }
        Animation.transformCard(CardPanel.this,CardPanel.this,true);
      }
    }
);
    buttonPanel.add(dayNightButton);
  }
  if (this.gameCard instanceof PermanentView) {
    showCopySourceButton=new JButton("");
    showCopySourceButton.setSize(32,32);
    showCopySourceButton.setToolTipText("This permanent is copying a target. To see original card, push this button or turn mouse wheel down while hovering with the mouse pointer over the permanent.");
    showCopySourceButton.setVisible(((PermanentView)this.gameCard).isCopy());
    showCopySourceButton.setIcon(new ImageIcon(ImageManagerImpl.getInstance().getCopyInformIconImage()));
    showCopySourceButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        ActionCallback callback=Plugins.getInstance().getActionCallback();
        ((MageActionCallback)callback).enlargeCard(EnlargeMode.COPY);
      }
    }
);
    buttonPanel.add(showCopySourceButton);
  }
  setBackground(Color.black);
  setOpaque(false);
  addMouseListener(this);
  addMouseMotionListener(this);
  addMouseWheelListener(this);
  addComponentListener(this);
  String cardType=getType(newGameCard);
  tooltipText=new TextPopup();
  tooltipText.setText(getText(cardType,newGameCard));
  tappedAngle=isTapped() ? CardPanel.TAPPED_ANGLE : 0;
  flippedAngle=isFlipped() ? CardPanel.FLIPPED_ANGLE : 0;
}
