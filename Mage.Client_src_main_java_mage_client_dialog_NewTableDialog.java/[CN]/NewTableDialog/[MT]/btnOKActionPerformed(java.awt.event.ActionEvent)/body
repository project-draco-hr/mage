{
  GameTypeView gameType=(GameTypeView)cbGameType.getSelectedItem();
  MatchOptions options=new MatchOptions(this.txtName.getText(),gameType.getName());
  options.getPlayerTypes().add("Human");
  for (  TablePlayerPanel player : players) {
    options.getPlayerTypes().add(player.getPlayerType());
  }
  options.setDeckType((String)this.cbDeckType.getSelectedItem());
  options.setLimited(false);
  options.setMatchTimeLimit((MatchTimeLimit)this.cbTimeLimit.getSelectedItem());
  options.setAttackOption((MultiplayerAttackOption)this.cbAttackOption.getSelectedItem());
  options.setRange((RangeOfInfluence)this.cbRange.getSelectedItem());
  options.setWinsNeeded((Integer)this.spnNumWins.getValue());
  options.setFreeMulligans((Integer)this.spnFreeMulligans.getValue());
  options.setPassword(this.txtPassword.getText());
  saveGameSettingsToPrefs(options,this.player1Panel.getDeckFile());
  table=session.createTable(roomId,options);
  if (table == null) {
    JOptionPane.showMessageDialog(MageFrame.getDesktop(),"Error creating table.","Error",JOptionPane.ERROR_MESSAGE);
    return;
  }
  try {
    if (session.joinTable(roomId,table.getTableId(),this.player1Panel.getPlayerName(),"Human",1,DeckImporterUtil.importDeck(this.player1Panel.getDeckFile()),this.txtPassword.getText())) {
      for (      TablePlayerPanel player : players) {
        if (!player.getPlayerType().equals("Human")) {
          if (!player.joinTable(roomId,table.getTableId())) {
            session.removeTable(roomId,table.getTableId());
            table=null;
            return;
          }
        }
      }
      this.hideDialog();
      return;
    }
  }
 catch (  FileNotFoundException ex) {
    handleError(ex);
  }
catch (  IOException ex) {
    handleError(ex);
  }
catch (  ClassNotFoundException ex) {
    handleError(ex);
  }
  session.removeTable(roomId,table.getTableId());
  table=null;
}
