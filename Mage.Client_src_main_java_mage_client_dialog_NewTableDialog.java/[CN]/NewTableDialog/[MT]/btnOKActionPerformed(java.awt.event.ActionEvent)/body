{
  GameTypeView gameType=(GameTypeView)cbGameType.getSelectedItem();
  List<String> playerTypes=new ArrayList<String>();
  playerTypes.add("Human");
  for (  TablePlayerPanel player : players) {
    playerTypes.add(player.getPlayerType());
  }
  table=session.createTable(roomId,gameType.getName(),(String)this.cbDeckType.getSelectedItem(),playerTypes,(MultiplayerAttackOption)this.cbAttackOption.getSelectedItem(),(RangeOfInfluence)this.cbRange.getSelectedItem());
  try {
    if (session.joinTable(roomId,table.getTableId(),this.player1Panel.getPlayerName(),Sets.loadDeck(this.player1Panel.getDeckFile()))) {
      for (      TablePlayerPanel player : players) {
        if (!player.getPlayerType().equals("Human")) {
          if (!player.joinTable(roomId,table.getTableId())) {
            JOptionPane.showMessageDialog(MageFrame.getDesktop(),"Error joining table.","Error",JOptionPane.ERROR_MESSAGE);
            session.removeTable(roomId,table.getTableId());
            table=null;
            return;
          }
        }
      }
      this.setVisible(false);
      return;
    }
  }
 catch (  FileNotFoundException ex) {
    handleError(ex);
  }
catch (  IOException ex) {
    handleError(ex);
  }
catch (  ClassNotFoundException ex) {
    handleError(ex);
  }
  JOptionPane.showMessageDialog(MageFrame.getDesktop(),"Error joining table.","Error",JOptionPane.ERROR_MESSAGE);
  session.removeTable(roomId,table.getTableId());
  table=null;
}
