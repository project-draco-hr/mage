{
  List<Card> spellCardPool=new ArrayList<Card>();
  CardCriteria spellCriteria=new CardCriteria();
  spellCriteria.setCodes(setsToUse.toArray(new String[0]));
  spellCriteria.notTypes(CardType.LAND);
  List<CardInfo> cardPool=CardRepository.instance.findCards(spellCriteria);
  int cardPoolCount=cardPool.size();
  Random random=new Random();
  if (cardPoolCount > 0) {
    int tries=0;
    int count=0;
    while (count < cardsCount) {
      Card card=cardPool.get(random.nextInt(cardPoolCount)).getCard();
      if (cardFitsChosenColors(card,allowedColors)) {
        spellCardPool.add(card);
        count++;
      }
      tries++;
      if (tries > MAX_TRIES) {
        throw new IllegalStateException("Not enough cards for chosen colors to generate deck: " + selectedColors);
      }
    }
  }
 else {
    throw new IllegalStateException("Not enough cards to generate deck.");
  }
  return spellCardPool;
}
