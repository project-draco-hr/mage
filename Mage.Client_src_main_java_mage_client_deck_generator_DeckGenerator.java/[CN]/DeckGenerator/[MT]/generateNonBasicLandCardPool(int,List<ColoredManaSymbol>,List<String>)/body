{
  List<Card> nonBasicLandCardPool=new ArrayList<Card>();
  CardCriteria landCriteria=new CardCriteria();
  landCriteria.setCodes(setsToUse.toArray(new String[0]));
  landCriteria.types(CardType.LAND);
  landCriteria.notSupertypes("Basic");
  List<CardInfo> landCards=CardRepository.instance.findCards(landCriteria);
  int allCount=landCards.size();
  Random random=new Random();
  if (allCount > 0) {
    int tries=0;
    int count=0;
    while (count < landsCount) {
      Card card=landCards.get(random.nextInt(allCount)).getCard();
      if (cardCardProduceChosenColors(card,allowedColors)) {
        nonBasicLandCardPool.add(card);
        count++;
      }
      tries++;
      if (tries > MAX_TRIES) {
        return nonBasicLandCardPool;
      }
    }
  }
  return nonBasicLandCardPool;
}
