{
  String cardName="";
switch (color) {
case G:
    cardName="Forest";
  break;
case W:
cardName="Plains";
break;
case R:
cardName="Mountain";
break;
case B:
cardName="Swamp";
break;
case U:
cardName="Island";
break;
}
List<String> landSets=new LinkedList<String>();
for (String setCode : setsToUse) {
ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
if (expansionInfo.hasBasicLands()) {
landSets.add(expansionInfo.getCode());
}
}
if (landSets.isEmpty()) {
for (String setCode : setsToUse) {
ExpansionInfo expansionInfo=ExpansionRepository.instance.getSetByCode(setCode);
ExpansionInfo[] blockSets=ExpansionRepository.instance.getSetsFromBlock(expansionInfo.getBlockName());
for (ExpansionInfo blockSet : blockSets) {
if (blockSet.hasBasicLands()) {
landSets.add(blockSet.getCode());
}
}
}
}
if (landSets.isEmpty()) {
Random generator=new Random();
ExpansionInfo[] randomLandSets=ExpansionRepository.instance.getSetsWithBasicLandsByReleaseDate();
if (randomLandSets.length > 0) {
landSets.add(randomLandSets[generator.nextInt(randomLandSets.length) - 1].getCode());
}
}
if (landSets.isEmpty()) {
throw new IllegalArgumentException("No set with basic land was found");
}
CardCriteria criteria=new CardCriteria();
if (!landSets.isEmpty()) {
criteria.setCodes(landSets.toArray(new String[landSets.size()]));
}
criteria.rarities(Rarity.LAND).name(cardName);
List<CardInfo> cards=CardRepository.instance.findCards(criteria);
if (cards.isEmpty() && !setsToUse.isEmpty()) {
cards=CardRepository.instance.findCards(cardName);
}
int randomInt=new Random().nextInt(cards.size());
return cards.get(randomInt).getMockCard();
}
