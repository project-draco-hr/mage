{
  List<ColoredManaSymbol> allowedColors=new ArrayList<ColoredManaSymbol>();
  selectedColors=selectedColors.toUpperCase();
  for (int i=0; i < selectedColors.length(); i++) {
    char c=selectedColors.charAt(i);
    allowedColors.add(ColoredManaSymbol.lookup(c));
  }
  int cardPoolSize=SPELL_CARD_POOL_SIZE;
  if (selectedColors.length() > 2) {
    cardPoolSize+=ADDITIONAL_CARDS_FOR_3_COLOR_DECKS;
  }
  List<Card> spellCardPool=generateSpellCardPool(cardPoolSize,allowedColors);
  List<Card> landCardPool=generateNonBasicLandCardPool(MAX_NON_BASIC_SOURCE,allowedColors);
  System.out.println("deck generator card pool: spells=" + spellCardPool.size() + ", lands="+ landCardPool.size());
  deck=DeckBuilder.buildDeck(spellCardPool,allowedColors,landCardPool,new RateCallback(){
    @Override public int rateCard(    Card card){
      return CardsStorage.rateCard(card);
    }
    @Override public Card getBestBasicLand(    ColoredManaSymbol color){
      return DeckGenerator.getBestBasicLand(color);
    }
  }
);
}
