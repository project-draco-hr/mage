{
  deck=new Deck();
  List<ColoredManaSymbol> allowedColors=new ArrayList<ColoredManaSymbol>();
  selectedColors=selectedColors.toUpperCase();
  for (int i=0; i < selectedColors.length(); i++) {
    char c=selectedColors.charAt(i);
    allowedColors.add(ColoredManaSymbol.lookup(c));
  }
  List<Card> spellCardPool=new ArrayList<Card>();
  List<Card> landCardPool=new ArrayList<Card>();
  int nonBasicLandCount=0;
  for (  ExpansionSet set : Sets.getInstance().values()) {
    try {
      List<Card> booster=set.createBooster();
      for (      Card card : booster) {
        if (!card.getCardType().contains(CardType.LAND)) {
          spellCardPool.add(card);
        }
 else {
          if (!CardUtil.isBasicLand(card)) {
            if (nonBasicLandCount < MAX_NON_BASIC_SOURCE) {
              nonBasicLandCount++;
              landCardPool.add(card);
            }
          }
 else {
            landCardPool.add(card);
          }
        }
      }
    }
 catch (    Exception e) {
    }
  }
  System.out.println("deck generator card pool: spells=" + spellCardPool.size() + ", lands="+ landCardPool.size());
  final Collection<MageScoredCard> remainingCards=new ArrayList<MageScoredCard>();
  for (  final Card card : spellCardPool) {
    remainingCards.add(new MageScoredCard(card,allowedColors));
  }
  int min=0;
  for (int index=0; index < DECK_COUNT.length; index++) {
    final int max=DECK_COST[index];
    addCardsToDeck(remainingCards,min,max,DECK_COUNT[index]);
    min=max + 1;
  }
  addCardsToDeck(remainingCards,0,4,DECK_SPELLS - deck.getCards().size());
  addCardsToDeck(remainingCards,5,10,DECK_SPELLS - deck.getCards().size());
  addLandsToDeck(allowedColors,landCardPool);
}
