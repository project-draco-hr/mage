{
  List<ColoredManaSymbol> allowedColors=new ArrayList<ColoredManaSymbol>();
  selectedColors=selectedColors != null ? selectedColors.toUpperCase() : getRandomColors("X");
  String format=(String)formats.getSelectedItem();
  List<String> setsToUse=ConstructedFormats.getSetsByFormat(format);
  if (setsToUse.isEmpty()) {
    setsToUse=CardRepository.instance.getSetCodes();
  }
  if (selectedColors.contains("X")) {
    selectedColors=getRandomColors(selectedColors);
  }
  for (int i=0; i < selectedColors.length(); i++) {
    char c=selectedColors.charAt(i);
    allowedColors.add(ColoredManaSymbol.lookup(c));
  }
  int cardPoolSize=SPELL_CARD_POOL_SIZE;
  if (selectedColors.length() > 2) {
    cardPoolSize+=ADDITIONAL_CARDS_FOR_3_COLOR_DECKS;
  }
  List<Card> spellCardPool=generateSpellCardPool(cardPoolSize,allowedColors,setsToUse);
  List<Card> landCardPool=generateNonBasicLandCardPool(MAX_NON_BASIC_SOURCE,allowedColors,setsToUse);
  System.out.println("deck generator card pool: spells=" + spellCardPool.size() + ", lands="+ landCardPool.size());
  final List<String> setsToUseFinal=setsToUse;
  deck=DeckBuilder.buildDeck(spellCardPool,allowedColors,landCardPool,new RateCallback(){
    @Override public int rateCard(    Card card){
      return 6;
    }
    @Override public Card getBestBasicLand(    ColoredManaSymbol color){
      int tries=100;
      Card land;
      do {
        land=DeckGenerator.getBestBasicLand(color);
        tries--;
      }
 while (!setsToUseFinal.contains(land.getExpansionSetCode()) && tries >= 0);
      return land;
    }
  }
);
}
