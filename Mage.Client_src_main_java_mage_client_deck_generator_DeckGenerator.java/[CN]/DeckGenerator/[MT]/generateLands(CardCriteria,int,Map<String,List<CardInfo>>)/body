{
  int tries=0;
  int countNonBasic=0;
  List<Card> deckLands=new ArrayList<>();
  Map<String,Double> percentage=genPool.calculateSpellColourPercentages();
  if (!genPool.isMonoColoredDeck() && genDialog.useNonBasicLand()) {
    List<Card> landCards=genPool.filterLands(CardRepository.instance.findCards(criteria));
    int allCount=landCards.size();
    Random random=new Random();
    if (allCount > 0) {
      while (countNonBasic < landsCount / 2) {
        Card card=landCards.get(random.nextInt(allCount));
        if (genPool.isValidLandCard(card)) {
          Card addedCard=card.copy();
          deckLands.add(addedCard);
          genPool.addCard(addedCard);
          countNonBasic++;
        }
        tries++;
        if (tries > MAX_TRIES) {
          break;
        }
      }
    }
  }
  Map<String,Integer> count=genPool.countManaProduced(deckLands);
  addBasicLands(landsCount - countNonBasic,percentage,count,basicLands);
}
