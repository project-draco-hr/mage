{
  List<CardInfo> cardPool=CardRepository.instance.findCards(criteria);
  int retrievedCount=cardPool.size();
  List<DeckGeneratorCMC> deckCMCs=genPool.getCMCsForSpellCount(spellCount);
  Random random=new Random();
  int count=0;
  int reservesAdded=0;
  if (retrievedCount > 0 && retrievedCount >= spellCount) {
    int tries=0;
    while (count < spellCount) {
      Card card=cardPool.get(random.nextInt(retrievedCount)).getMockCard();
      if (genPool.isValidSpellCard(card)) {
        int cardCMC=card.getManaCost().convertedManaCost();
        for (        DeckGeneratorCMC deckCMC : deckCMCs) {
          if (cardCMC >= deckCMC.min && cardCMC <= deckCMC.max) {
            int currentAmount=deckCMC.getAmount();
            if (currentAmount > 0) {
              deckCMC.setAmount(currentAmount - 1);
              genPool.addCard(card.copy());
              count++;
            }
          }
 else {
            if (reservesAdded < genPool.getDeckSize() / 2) {
              genPool.tryAddReserve(card,cardCMC);
              reservesAdded++;
            }
          }
        }
      }
      tries++;
      if (tries > MAX_TRIES) {
        break;
      }
    }
  }
 else {
    throw new IllegalStateException("Not enough cards to generate deck.");
  }
}
