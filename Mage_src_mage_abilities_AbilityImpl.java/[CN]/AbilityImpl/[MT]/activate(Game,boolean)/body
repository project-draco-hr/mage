{
  if (!modes.choose(game,this)) {
    return false;
  }
  if (this.abilityType.equals(AbilityType.SPELL)) {
    game.getContinuousEffects().applySpliceEffects(this,game);
  }
  Card card=game.getCard(sourceId);
  if (card != null) {
    card.adjustChoices(this,game);
  }
  for (  UUID modeId : this.getModes().getSelectedModes()) {
    this.getModes().setMode(this.getModes().get(modeId));
    if (getChoices().size() > 0 && getChoices().choose(game,this) == false) {
      logger.debug("activate failed - choice");
      return false;
    }
  }
  if (card != null) {
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof AlternativeSourceCosts) {
        AlternativeSourceCosts alternativeSpellCosts=(AlternativeSourceCosts)ability;
        if (alternativeSpellCosts.isAvailable(this,game)) {
          if (alternativeSpellCosts.askToActivateAlternativeCosts(this,game)) {
            break;
          }
        }
      }
      if (ability instanceof OptionalAdditionalSourceCosts) {
        ((OptionalAdditionalSourceCosts)ability).addOptionalAdditionalCosts(this,game);
      }
    }
  }
  VariableManaCost variableManaCost=handleXCosts(game,noMana);
  for (  UUID modeId : this.getModes().getSelectedModes()) {
    this.getModes().setMode(this.getModes().get(modeId));
    if (card != null) {
      card.adjustTargets(this,game);
    }
    if (getTargets().size() > 0 && getTargets().chooseTargets(getEffects().get(0).getOutcome(),this.controllerId,this,game) == false) {
      if (variableManaCost != null) {
        game.informPlayers(new StringBuilder(card != null ? card.getName() : "").append(": no valid targets with this value of X").toString());
      }
 else {
        logger.debug("activate failed - target");
      }
      return false;
    }
  }
  for (  Cost cost : optionalCosts) {
    if (cost instanceof ManaCost) {
      cost.clearPaid();
      if (game.getPlayer(this.controllerId).chooseUse(Outcome.Benefit,"Pay optional cost " + cost.getText() + "?",game)) {
        manaCostsToPay.add((ManaCost)cost);
      }
    }
  }
  if (card != null) {
    card.adjustCosts(this,game);
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof AdjustingSourceCosts) {
        ((AdjustingSourceCosts)ability).adjustCosts(this,game);
      }
    }
  }
  if (this instanceof ManaAbility && !costs.pay(this,game,sourceId,controllerId,noMana)) {
    logger.debug("activate mana ability failed - non mana costs");
    return false;
  }
  game.getContinuousEffects().costModification(this,game);
  UUID activatorId=controllerId;
  if ((this instanceof ActivatedAbilityImpl) && ((ActivatedAbilityImpl)this).getActivatorId() != null) {
    activatorId=((ActivatedAbilityImpl)this).getActivatorId();
  }
  if (!useAlternativeCost(game)) {
    if (!manaCostsToPay.pay(this,game,sourceId,activatorId,noMana)) {
      logger.debug("activate failed - mana");
      return false;
    }
  }
  if (!costs.pay(this,game,sourceId,activatorId,noMana)) {
    logger.debug("activate failed - non mana costs");
    return false;
  }
  if (variableManaCost != null) {
    int xValue=getManaCostsToPay().getX();
    game.informPlayers(new StringBuilder(game.getPlayer(this.controllerId).getName()).append(" announced a value of ").append(xValue).append(" for ").append(variableManaCost.getText()).toString());
  }
  return true;
}
