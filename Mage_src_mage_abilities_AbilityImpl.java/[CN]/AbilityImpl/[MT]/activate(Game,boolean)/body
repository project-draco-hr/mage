{
  Player controller=game.getPlayer(this.getControllerId());
  if (controller == null) {
    return false;
  }
  if (!modes.choose(game,this)) {
    return false;
  }
  if (this.abilityType.equals(AbilityType.SPELL)) {
    game.getContinuousEffects().applySpliceEffects(this,game);
  }
  MageObject sourceObject=game.getObject(sourceId);
  if (sourceObject != null) {
    sourceObject.adjustChoices(this,game);
  }
  for (  UUID modeId : this.getModes().getSelectedModes()) {
    this.getModes().setMode(this.getModes().get(modeId));
    if (getChoices().size() > 0 && getChoices().choose(game,this) == false) {
      logger.debug("activate failed - choice");
      return false;
    }
  }
  if (noMana) {
    if (this.getManaCostsToPay().getVariableCosts().size() > 0) {
      int xValue=this.getManaCostsToPay().getX();
      this.getManaCostsToPay().clear();
      VariableManaCost xCosts=new VariableManaCost();
      xCosts.setAmount(xValue);
      this.getManaCostsToPay().add(xCosts);
    }
 else {
      this.getManaCostsToPay().clear();
    }
  }
  if (sourceObject != null && !(this instanceof FlashbackAbility)) {
    boolean alternativeCostisUsed=false;
    for (    Ability ability : sourceObject.getAbilities()) {
      if (!noMana && ability instanceof AlternativeSourceCosts) {
        AlternativeSourceCosts alternativeSpellCosts=(AlternativeSourceCosts)ability;
        if (alternativeSpellCosts.isAvailable(this,game)) {
          if (alternativeSpellCosts.askToActivateAlternativeCosts(this,game)) {
            alternativeCostisUsed=true;
            break;
          }
        }
      }
      if (ability instanceof OptionalAdditionalSourceCosts) {
        ((OptionalAdditionalSourceCosts)ability).addOptionalAdditionalCosts(this,game);
      }
    }
    if (!noMana && !alternativeCostisUsed) {
      if (this.getAbilityType().equals(AbilityType.SPELL)) {
        for (        AlternativeSourceCosts alternativeSourceCosts : controller.getAlternativeSourceCosts()) {
          if (alternativeSourceCosts.isAvailable(this,game)) {
            if (alternativeSourceCosts.askToActivateAlternativeCosts(this,game)) {
              break;
            }
          }
        }
      }
    }
  }
  VariableManaCost variableManaCost=handleManaXCosts(game,noMana,controller);
  String announceString=handleOtherXCosts(game,controller);
  for (  UUID modeId : this.getModes().getSelectedModes()) {
    this.getModes().setMode(this.getModes().get(modeId));
    if (sourceObject != null) {
      sourceObject.adjustTargets(this,game);
    }
    if (getTargets().size() > 0 && getTargets().chooseTargets(getEffects().get(0).getOutcome(),this.controllerId,this,game) == false) {
      if (variableManaCost != null || announceString != null) {
        game.informPlayer(controller,new StringBuilder(sourceObject != null ? sourceObject.getLogName() : "").append(": no valid targets with this value of X").toString());
      }
 else {
        logger.debug("activate failed - target");
      }
      return false;
    }
  }
  for (  Cost cost : optionalCosts) {
    if (cost instanceof ManaCost) {
      cost.clearPaid();
      if (controller.chooseUse(Outcome.Benefit,"Pay optional cost " + cost.getText() + "?",game)) {
        manaCostsToPay.add((ManaCost)cost);
      }
    }
  }
  if (sourceObject != null) {
    sourceObject.adjustCosts(this,game);
    for (    Ability ability : sourceObject.getAbilities()) {
      if (ability instanceof AdjustingSourceCosts) {
        ((AdjustingSourceCosts)ability).adjustCosts(this,game);
      }
    }
  }
  if (this instanceof ManaAbility && !costs.pay(this,game,sourceId,controllerId,noMana)) {
    logger.debug("activate mana ability failed - non mana costs");
    return false;
  }
  if (costModificationActive) {
    game.getContinuousEffects().costModification(this,game);
  }
 else {
    costModificationActive=true;
  }
  UUID activatorId=controllerId;
  if ((this instanceof ActivatedAbilityImpl) && ((ActivatedAbilityImpl)this).getActivatorId() != null) {
    activatorId=((ActivatedAbilityImpl)this).getActivatorId();
  }
  if (!useAlternativeCost(game)) {
    if (!manaCostsToPay.pay(this,game,sourceId,activatorId,false)) {
      logger.debug("activate failed - mana");
      return false;
    }
  }
  if (!costs.pay(this,game,sourceId,activatorId,noMana)) {
    logger.debug("activate failed - non mana costs");
    return false;
  }
  if (announceString != null) {
    game.informPlayers(announceString);
  }
  if (variableManaCost != null) {
    int xValue=getManaCostsToPay().getX();
    game.informPlayers(new StringBuilder(controller.getName()).append(" announces a value of ").append(xValue).append(" for ").append(variableManaCost.getText()).toString());
  }
  activated=true;
  return true;
}
