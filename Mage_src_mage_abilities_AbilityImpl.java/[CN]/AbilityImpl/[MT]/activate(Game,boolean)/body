{
  if (!modes.choose(game,this)) {
    return false;
  }
  Card card=game.getCard(sourceId);
  if (card != null) {
    card.adjustChoices(this,game);
  }
  if (getChoices().size() > 0 && getChoices().choose(game,this) == false) {
    logger.debug("activate failed - choice");
    return false;
  }
  if (card != null) {
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof OptionalAdditionalSourceCosts) {
        ((OptionalAdditionalSourceCosts)ability).addOptionalAdditionalCosts(this,game);
      }
    }
  }
  if (game.getPlayer(this.controllerId).isHuman()) {
    VariableManaCost variableManaCost=null;
    for (    ManaCost cost : manaCostsToPay) {
      if (cost instanceof VariableManaCost && !cost.isPaid()) {
        variableManaCost=(VariableManaCost)cost;
        break;
      }
    }
    if (variableManaCost != null) {
      int amount=game.getPlayer(this.controllerId).getAmount(variableManaCost.getMinX(),Integer.MAX_VALUE,"Announce the value for " + variableManaCost.getText(),game);
      game.informPlayers(new StringBuilder(game.getPlayer(this.controllerId).getName()).append(" announced a value of ").append(amount).append(" for ").append(variableManaCost.getText()).toString());
      amount*=variableManaCost.getMultiplier();
      manaCostsToPay.add(new ManaCostsImpl(new StringBuilder("{").append(amount).append("}").toString()));
      manaCostsToPay.setX(amount);
      variableManaCost.setPaid();
    }
  }
  if (card != null) {
    card.adjustTargets(this,game);
  }
  if (getTargets().size() > 0 && getTargets().chooseTargets(getEffects().get(0).getOutcome(),this.controllerId,this,game) == false) {
    logger.debug("activate failed - target");
    return false;
  }
  for (  Cost cost : optionalCosts) {
    if (cost instanceof ManaCost) {
      cost.clearPaid();
      if (game.getPlayer(this.controllerId).chooseUse(Outcome.Benefit,"Pay optional cost " + cost.getText() + "?",game)) {
        manaCostsToPay.add((ManaCost)cost);
      }
    }
  }
  if (card != null) {
    card.adjustCosts(this,game);
    for (    Ability ability : card.getAbilities()) {
      if (ability instanceof AdjustingSourceCosts) {
        ((AdjustingSourceCosts)ability).adjustCosts(this,game);
      }
    }
  }
  if (this instanceof ManaAbility && !costs.pay(this,game,sourceId,controllerId,noMana)) {
    logger.debug("activate mana ability failed - non mana costs");
    return false;
  }
  if (!useAlternativeCost(game)) {
    game.getContinuousEffects().costModification(this,game);
    if (!manaCostsToPay.pay(this,game,sourceId,controllerId,noMana)) {
      logger.debug("activate failed - mana");
      return false;
    }
  }
  if (!costs.pay(this,game,sourceId,controllerId,noMana)) {
    logger.debug("activate failed - non mana costs");
    return false;
  }
  return true;
}
