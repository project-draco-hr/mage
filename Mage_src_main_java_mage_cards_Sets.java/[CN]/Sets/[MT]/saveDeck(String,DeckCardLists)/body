{
  PrintWriter out=new PrintWriter(file);
  Map<String,DeckCardInfo> deckCards=new HashMap<>();
  Map<String,DeckCardInfo> sideboard=new HashMap<>();
  try {
    if (deck.getName() != null && deck.getName().length() > 0) {
      out.println("NAME:" + deck.getName());
    }
    if (deck.getAuthor() != null && deck.getAuthor().length() > 0) {
      out.println("AUTHOR:" + deck.getAuthor());
    }
    for (    DeckCardInfo deckCardInfo : deck.getCards()) {
      if (deckCards.containsKey(deckCardInfo.getCardKey())) {
        deckCards.put(deckCardInfo.getCardKey(),deckCards.get(deckCardInfo.getCardKey()).increaseQuantity());
      }
 else {
        deckCards.put(deckCardInfo.getCardKey(),deckCardInfo);
      }
    }
    for (    DeckCardInfo deckCardInfo : deck.getSideboard()) {
      if (sideboard.containsKey(deckCardInfo.getCardKey())) {
        sideboard.put(deckCardInfo.getCardKey(),sideboard.get(deckCardInfo.getCardKey()).increaseQuantity());
      }
 else {
        sideboard.put(deckCardInfo.getCardKey(),deckCardInfo);
      }
    }
    for (    Map.Entry<String,DeckCardInfo> entry : deckCards.entrySet()) {
      out.printf("%d [%s:%s] %s%n",entry.getValue().getQuantity(),entry.getValue().getSetCode(),entry.getValue().getCardNum(),entry.getValue().getCardName());
    }
    for (    Map.Entry<String,DeckCardInfo> entry : sideboard.entrySet()) {
      out.printf("SB: %d [%s:%s] %s%n",entry.getValue().getQuantity(),entry.getValue().getSetCode(),entry.getValue().getCardNum(),entry.getValue().getCardName());
    }
    out.print("LAYOUT MAIN:");
    writeCardLayout(out,deck.getCardLayout());
    out.print("\n");
    out.print("LAYOUT SIDEBOARD:");
    writeCardLayout(out,deck.getSideboardLayout());
    out.print("\n");
  }
  finally {
    out.close();
  }
}
