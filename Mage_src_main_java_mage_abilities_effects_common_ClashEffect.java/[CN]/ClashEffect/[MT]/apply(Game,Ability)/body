{
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=source.getSourceObject(game);
  if (controller != null && sourceObject != null && !game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.CLASH,controller.getId(),controller.getId()))) {
    Target target=new TargetOpponent(true);
    target.setTargetName("an opponent to clash with");
    if (controller.choose(Outcome.Benefit,target,source.getSourceId(),game)) {
      Player opponent=game.getPlayer(target.getFirstTarget());
      if (opponent != null) {
        int cmcController=Integer.MIN_VALUE;
        Card cardController=null;
        boolean topController=true;
        int cmcOpponent=Integer.MIN_VALUE;
        Card cardOpponent=null;
        boolean topOpponent=true;
        StringBuilder message=new StringBuilder("Clash: ");
        message.append(controller.getLogName());
        if (controller.getLibrary().size() > 0) {
          Cards cards=new CardsImpl();
          cardController=controller.getLibrary().getFromTop(game);
          cards.add(cardController);
          controller.revealCards(sourceObject.getIdName() + ": Clash card of " + controller.getName(),cards,game);
          cmcController=cardController.getManaCost().convertedManaCost();
          message.append(" (").append(cmcController).append(")");
        }
 else {
          message.append(" no card");
        }
        message.append(" vs. ").append(opponent.getLogName());
        if (opponent.getLibrary().size() > 0) {
          Cards cards=new CardsImpl();
          cardOpponent=opponent.getLibrary().getFromTop(game);
          cards.add(cardOpponent);
          opponent.revealCards(sourceObject.getIdName() + ": Clash card of " + opponent.getName(),cards,game);
          cmcOpponent=cardOpponent.getManaCost().convertedManaCost();
          message.append(" (").append(cmcOpponent).append(")");
        }
 else {
          message.append(" no card");
        }
        message.append(" - ");
        if (!game.isSimulation()) {
          if (cmcController > cmcOpponent) {
            message.append(controller.getLogName()).append(" won the clash");
            game.informPlayer(controller,"You won the clash!");
          }
 else           if (cmcController < cmcOpponent) {
            message.append(opponent.getLogName()).append(" won the clash");
            game.informPlayer(controller,opponent.getLogName() + " won the clash!");
          }
 else {
            message.append(" no winner ");
          }
          game.informPlayers(message.toString());
        }
        PlayerList playerList=game.getPlayerList().copy();
        playerList.setCurrent(game.getActivePlayerId());
        do {
          Player current=playerList.getCurrent(game);
          if (cardController != null && current.getId().equals(controller.getId())) {
            topController=current.chooseUse(Outcome.Detriment,"Put " + cardController.getLogName() + " back on top of your library? (otherwise it goes to bottom)",source,game);
          }
          if (cardOpponent != null && current.getId().equals(opponent.getId())) {
            topOpponent=current.chooseUse(Outcome.Detriment,"Put " + cardOpponent.getLogName() + " back on top of your library? (otherwise it goes to bottom)",source,game);
          }
        }
 while (!playerList.getNext(game).getId().equals(game.getActivePlayerId()));
        if (cardController != null) {
          controller.moveCardToLibraryWithInfo(cardController,source.getSourceId(),game,Zone.LIBRARY,topController,true);
        }
        if (cardOpponent != null) {
          opponent.moveCardToLibraryWithInfo(cardOpponent,source.getSourceId(),game,Zone.LIBRARY,topOpponent,true);
        }
        game.fireEvent(new GameEvent(EventType.CLASHED,opponent.getId(),source.getSourceId(),controller.getId(),0,cmcController > cmcOpponent));
        for (        Effect effect : source.getEffects()) {
          if (effect instanceof DoIfClashWonEffect) {
            effect.setValue("clashOpponent",opponent);
          }
        }
        return cmcController > cmcOpponent;
      }
    }
  }
  return false;
}
