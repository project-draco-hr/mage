{
  playableInstant.clear();
  playableNonInstant.clear();
  unplayable.clear();
  playableAbilities.clear();
  List<Card> nonLands=hand.getCards(new FilterNonlandCard());
  ManaOptions available=getManaAvailable(game);
  available.addMana(manaPool.getMana());
  for (  Card card : nonLands) {
    ManaOptions options=card.getManaCost().getOptions();
    if (card.getManaCost().getVariableCosts().size() > 0) {
      for (      Mana option : options) {
        option.add(Mana.ColorlessMana(3));
      }
    }
    for (    Mana mana : options) {
      for (      Mana avail : available) {
        if (mana.enough(avail)) {
          if (card.getCardType().contains(CardType.INSTANT))           playableInstant.add(card);
 else           playableNonInstant.add(card);
        }
 else {
          if (!playableInstant.contains(card) && !playableNonInstant.contains(card))           unplayable.put(mana.needed(avail),card);
        }
      }
    }
  }
  for (  Permanent permanent : game.getBattlefield().getActivePermanents(playerId)) {
    for (    ActivatedAbility ability : permanent.getAbilities().getActivatedAbilities(Zone.BATTLEFIELD)) {
      if (!(ability instanceof ManaAbility) && ability.canActivate(playerId,game)) {
        ManaOptions abilityOptions=ability.getManaCosts().getOptions();
        if (ability.getManaCosts().getVariableCosts().size() > 0) {
          for (          Mana option : abilityOptions) {
            option.add(Mana.ColorlessMana(3));
          }
        }
        if (abilityOptions.size() == 0) {
          playableAbilities.add(ability);
        }
 else {
          for (          Mana mana : abilityOptions) {
            for (            Mana avail : available) {
              if (mana.enough(avail)) {
                playableAbilities.add(ability);
              }
            }
          }
        }
      }
    }
  }
  logger.fine("findPlayables: " + playableInstant.toString() + "---"+ playableNonInstant.toString()+ "---"+ playableAbilities.toString());
}
