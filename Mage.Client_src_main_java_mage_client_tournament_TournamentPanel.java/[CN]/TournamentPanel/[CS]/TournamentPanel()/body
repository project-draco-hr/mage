{
  playersModel=new TournamentPlayersTableModel();
  matchesModel=new TournamentMatchesTableModel();
  initComponents();
  this.restoreDividerLocations();
  btnQuitTournament.setVisible(false);
  df=DateFormat.getDateTimeInstance();
  tablePlayers.createDefaultColumnsFromModel();
  TableUtil.setColumnWidthAndOrder(tablePlayers,DEFAULT_COLUMNS_WIDTH_PLAYERS,KEY_TOURNAMENT_PLAYER_COLUMNS_WIDTH,KEY_TOURNAMENT_PLAYER_COLUMNS_ORDER);
  tablePlayers.setDefaultRenderer(Icon.class,new CountryCellRenderer());
  tableMatches.createDefaultColumnsFromModel();
  TableUtil.setColumnWidthAndOrder(tableMatches,DEFAULT_COLUMNS_WIDTH_MATCHES,KEY_TOURNAMENT_MATCH_COLUMNS_WIDTH,KEY_TOURNAMENT_MATCH_COLUMNS_ORDER);
  setGUISize();
  chatPanel1.useExtendedView(ChatPanelBasic.VIEW_MODE.NONE);
  chatPanel1.setChatType(ChatPanelBasic.ChatType.TOURNAMENT);
  Action action=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      int modelRow=Integer.valueOf(e.getActionCommand());
      String state=(String)tableMatches.getValueAt(modelRow,tableMatches.convertColumnIndexToView(2));
      String actionText=(String)tableMatches.getValueAt(modelRow,tableMatches.convertColumnIndexToView(TournamentMatchesTableModel.ACTION_COLUMN));
      UUID tableId=UUID.fromString((String)matchesModel.getValueAt(modelRow,TournamentMatchesTableModel.ACTION_COLUMN + 1));
      UUID gameId=UUID.fromString((String)matchesModel.getValueAt(modelRow,TournamentMatchesTableModel.ACTION_COLUMN + 3));
      if (state.startsWith("Dueling") && actionText.equals("Watch")) {
        LOGGER.info("Watching game " + gameId);
        session.watchTournamentTable(tableId);
      }
    }
  }
;
  ButtonColumn buttonColumn=new ButtonColumn(tableMatches,action,tableMatches.convertColumnIndexToView(TournamentMatchesTableModel.ACTION_COLUMN));
}
