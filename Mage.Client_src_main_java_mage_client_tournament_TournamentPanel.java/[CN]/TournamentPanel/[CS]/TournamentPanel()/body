{
  playersModel=new TournamentPlayersTableModel();
  matchesModel=new TournamentMatchesTableModel();
  initComponents();
  this.restoreDividerLocations();
  btnQuitTournament.setVisible(false);
  df=DateFormat.getDateTimeInstance();
  tablePlayers.createDefaultColumnsFromModel();
  tableMatches.createDefaultColumnsFromModel();
  chatPanel1.useExtendedView(ChatPanel.VIEW_MODE.NONE);
  chatPanel1.setChatType(ChatPanel.ChatType.TOURNAMENT);
  Action action=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      int modelRow=Integer.valueOf(e.getActionCommand());
      String state=(String)tableMatches.getValueAt(modelRow,2);
      String actionText=(String)tableMatches.getValueAt(modelRow,TournamentMatchesTableModel.ACTION_COLUMN);
      UUID tableId=UUID.fromString((String)matchesModel.getValueAt(modelRow,TournamentMatchesTableModel.ACTION_COLUMN + 1));
      UUID gameId=UUID.fromString((String)matchesModel.getValueAt(modelRow,TournamentMatchesTableModel.ACTION_COLUMN + 3));
      if (state.startsWith("Dueling") && actionText.equals("Watch")) {
        logger.info("Watching game " + gameId);
        session.watchTournamentTable(tableId);
      }
    }
  }
;
  ButtonColumn buttonColumn=new ButtonColumn(tableMatches,action,TournamentMatchesTableModel.ACTION_COLUMN);
}
