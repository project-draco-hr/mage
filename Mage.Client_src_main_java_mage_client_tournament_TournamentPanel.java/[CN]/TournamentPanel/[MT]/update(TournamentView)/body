{
  if (!firstInitDone) {
    Component c=this.getParent();
    while (c != null && !(c instanceof TournamentPane)) {
      c=c.getParent();
    }
    if (c != null) {
      ((TournamentPane)c).setTitle("Tournament [" + tournament.getTournamentName() + "]");
    }
    txtName.setText(tournament.getTournamentName());
    txtType.setText(tournament.getTournamentType());
    txtStartTime.setText(df.format(tournament.getStartTime()));
    txtEndTime.setText("running...");
    firstInitDone=true;
  }
switch (tournament.getTournamentState()) {
case "Constructing":
    String constructionTime=Format.getDuration(tournament.getConstructionTime() - (tournament.getServerTime().getTime() - tournament.getStepStartTime().getTime()) / 1000);
  txtTournamentState.setText(new StringBuilder(tournament.getTournamentState()).append(" (").append(constructionTime).append(")").toString());
break;
case "Dueling":
String duelingTime=Format.getDuration((tournament.getServerTime().getTime() - tournament.getStepStartTime().getTime()) / 1000);
txtTournamentState.setText(new StringBuilder(tournament.getTournamentState()).append(" (").append(duelingTime).append(")").toString());
break;
default :
txtTournamentState.setText(tournament.getTournamentState());
break;
}
if (txtEndTime == null) {
return;
}
if (txtEndTime.getText().equals("running...") && tournament.getEndTime() != null) {
txtEndTime.setText(df.format(tournament.getEndTime()));
}
playersModel.loadData(tournament);
matchesModel.loadData(tournament);
this.tablePlayers.repaint();
this.tableMatches.repaint();
btnQuitTournament.setVisible(false);
if (tournament.getEndTime() == null) {
for (TournamentPlayerView player : tournament.getPlayers()) {
if (player.getName().equals(session.getUserName())) {
if (!player.hasQuit()) {
btnQuitTournament.setVisible(true);
}
break;
}
}
}
}
