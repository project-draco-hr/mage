{
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    List<CardType> typesChosen=new ArrayList<>();
    Map<Player,Card> cardsChosen=new HashMap<>();
    if (!controller.getHand().isEmpty()) {
      TargetCard controllerTarget=new TargetCard(Zone.HAND,new FilterCard());
      if (controller.choose(Outcome.Discard,controller.getHand(),controllerTarget,game)) {
        Card card=controller.getHand().get(controllerTarget.getFirstTarget(),game);
        if (card != null) {
          typesChosen=card.getCardType();
          cardsChosen.put(controller,card);
        }
      }
    }
    ArrayList<Player> opponentsAffected=new ArrayList<>();
    for (    UUID playerId : game.getOpponents(source.getControllerId())) {
      Player opponent=game.getPlayer(playerId);
      if (!opponent.getHand().isEmpty()) {
        TargetCard target=new TargetCard(Zone.HAND,new FilterCard());
        if (opponent.choose(Outcome.Discard,opponent.getHand(),target,game)) {
          Card card=opponent.getHand().get(target.getFirstTarget(),game);
          if (card != null) {
            if (!typesChosen.isEmpty()) {
              for (              CardType cType : typesChosen) {
                for (                CardType oType : card.getCardType()) {
                  if (cType == oType) {
                    opponentsAffected.add(opponent);
                    break;
                  }
                }
              }
            }
            cardsChosen.put(opponent,card);
          }
        }
      }
    }
    if (!opponentsAffected.isEmpty()) {
      for (      Player opponent : opponentsAffected) {
        opponent.loseLife(3,game);
      }
    }
    if (!cardsChosen.isEmpty()) {
      for (      Map.Entry<Player,Card> entry : cardsChosen.entrySet()) {
        Player player=entry.getKey();
        Card cardChosen=entry.getValue();
        if (player != null && cardChosen != null) {
          player.discard(cardChosen,source,game);
        }
      }
    }
    return true;
  }
  return false;
}
