{
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null && !game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.CLASH,controller.getId(),controller.getId()))) {
    Target target=new TargetOpponent(true);
    if (controller.choose(Outcome.Benefit,target,source.getSourceId(),game)) {
      Player opponent=game.getPlayer(target.getFirstTarget());
      if (opponent != null) {
        game.informPlayers(controller.getName() + " clashes with " + opponent.getName());
        int cmcController=Integer.MIN_VALUE;
        Card cardController=null;
        boolean topController=true;
        int cmcOpponent=Integer.MIN_VALUE;
        Card cardOpponent=null;
        boolean topOpponent=true;
        StringBuilder message=new StringBuilder();
        message.append(controller.getName()).append(" reveals ");
        if (controller.getLibrary().size() > 0) {
          Cards cards=new CardsImpl();
          cardController=controller.getLibrary().getFromTop(game);
          cards.add(cardController);
          controller.revealCards("for clash by " + controller.getName(),cards,game);
          cmcController=cardController.getManaCost().convertedManaCost();
          message.append(cardController.getLogName()).append("(").append(cmcController).append(")");
        }
 else {
          message.append(" no card");
        }
        message.append(" - ");
        if (opponent.getLibrary().size() > 0) {
          Cards cards=new CardsImpl();
          cardOpponent=opponent.getLibrary().getFromTop(game);
          cards.add(cardOpponent);
          opponent.revealCards("for clash by " + opponent.getName(),cards,game);
          cmcOpponent=cardOpponent.getManaCost().convertedManaCost();
          message.append(cardOpponent.getLogName()).append("(").append(cmcOpponent).append(")");
        }
 else {
          message.append(" no card");
        }
        message.append(" - ");
        if (cmcController > cmcOpponent) {
          message.append(controller.getName()).append(" wins the clash");
        }
 else         if (cmcController < cmcOpponent) {
          message.append(opponent.getName()).append(" wins the clash");
        }
 else {
          message.append(" no winner ");
        }
        game.informPlayers(message.toString());
        PlayerList playerList=game.getPlayerList().copy();
        playerList.setCurrent(game.getActivePlayerId());
        do {
          Player current=playerList.getCurrent(game);
          if (cardController != null && current.getId().equals(controller.getId())) {
            topController=current.chooseUse(Outcome.Detriment,"Put " + cardController.getLogName() + " on top of your library?",game);
            game.informPlayers("Clash: " + controller.getName() + " decides to puts its card "+ (topController ? "back on top" : "on the buttom")+ "of his or her library.");
          }
          if (cardOpponent != null && current.getId().equals(opponent.getId())) {
            topOpponent=current.chooseUse(Outcome.Detriment,"Put " + cardOpponent.getLogName() + " on top of your library?",game);
            game.informPlayers("Clash: " + opponent.getName() + " decides to puts its card "+ (topOpponent ? "back on top" : "on the buttom")+ "of his or her library.");
          }
        }
 while (!playerList.getNext(game).getId().equals(game.getActivePlayerId()));
        if (cardController != null) {
          controller.moveCardToLibraryWithInfo(cardController,source.getSourceId(),game,Zone.LIBRARY,topController,true);
        }
        if (cardOpponent != null) {
          opponent.moveCardToLibraryWithInfo(cardController,source.getSourceId(),game,Zone.LIBRARY,topOpponent,true);
        }
        game.fireEvent(new GameEvent(EventType.CLASHED,opponent.getId(),source.getSourceId(),controller.getId(),0,cmcController > cmcOpponent));
        for (        Effect effect : source.getEffects()) {
          if (effect instanceof DoIfClashWonEffect) {
            effect.setValue("clashOpponent",opponent);
          }
        }
        return cmcController > cmcOpponent;
      }
    }
  }
  return false;
}
