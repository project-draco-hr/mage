{
  for (  UUID playerId : game.getState().getPlayersInRange(source.getControllerId(),game)) {
    Player player=game.getPlayer(playerId);
    if (player != null) {
      int creaturesNumber=game.getBattlefield().getAllActivePermanents(FILTER_CREATURE,playerId,game).size();
      if (creaturesNumber > 0) {
        String message="For how many creatures will you pay (up to " + creaturesNumber + ")?";
        int payAmount=0;
        boolean paid=false;
        while (!paid) {
          payAmount=player.getAmount(0,creaturesNumber,message,game);
          ManaCostsImpl cost=new ManaCostsImpl();
          cost.add(new GenericManaCost(payAmount));
          cost.clearPaid();
          if (cost.payOrRollback(source,game,source.getSourceId(),playerId)) {
            paid=true;
          }
        }
        int sacrificeNumber=creaturesNumber - payAmount;
        game.informPlayers(player.getLogName() + " pays {" + payAmount+ "} and sacrifices "+ sacrificeNumber+ " permanent"+ (sacrificeNumber == 1 ? "" : "s"));
        if (sacrificeNumber > 0) {
          int permanentsNumber=game.getBattlefield().getAllActivePermanents(playerId).size();
          int targetsNumber=Math.min(sacrificeNumber,permanentsNumber);
          TargetControlledPermanent target=new TargetControlledPermanent(targetsNumber);
          player.chooseTarget(Outcome.Sacrifice,target,source,game);
          for (          UUID permanentId : target.getTargets()) {
            Permanent permanent=game.getPermanent(permanentId);
            if (permanent != null) {
              permanent.sacrifice(source.getSourceId(),game);
            }
          }
        }
      }
 else {
        game.informPlayers(player.getLogName() + " has no creatures");
      }
    }
  }
  return true;
}
