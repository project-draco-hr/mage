{
  Map<String,String> setLinks=new HashMap<>();
  try {
    String setNames=setsAliases.get(cardSet.toLowerCase());
    if (setNames == null) {
      setNames=cardSet.toLowerCase();
    }
    Preferences prefs=MageFrame.getPreferences();
    Connection.ProxyType proxyType=Connection.ProxyType.valueByText(prefs.get("proxyType","None"));
    for (    String setName : setNames.split("\\^")) {
      String URLSetName=URLEncoder.encode(setName,"UTF-8");
      String baseUrl="http://mythicspoiler.com/" + URLSetName + "/";
      String urlDocument;
      Document doc;
      if (proxyType.equals(ProxyType.NONE)) {
        urlDocument=baseUrl;
        doc=Jsoup.connect(urlDocument).get();
      }
 else {
        String proxyServer=prefs.get("proxyAddress","");
        int proxyPort=Integer.parseInt(prefs.get("proxyPort","0"));
        URL url=new URL(baseUrl);
        Proxy proxy=new Proxy(Proxy.Type.HTTP,new InetSocketAddress(proxyServer,proxyPort));
        HttpURLConnection uc=(HttpURLConnection)url.openConnection(proxy);
        uc.connect();
        String line;
        StringBuffer tmp=new StringBuffer();
        BufferedReader in=new BufferedReader(new InputStreamReader(uc.getInputStream()));
        while ((line=in.readLine()) != null) {
          tmp.append(line);
        }
        doc=Jsoup.parse(String.valueOf(tmp));
      }
      Elements cardsImages=doc.select("img[src^=cards/]");
      if (cardsImages.isEmpty()) {
        break;
      }
      for (      Element cardsImage : cardsImages) {
        String cardLink=cardsImage.attr("src");
        if (cardLink.startsWith("cards/") && cardLink.endsWith(".jpg")) {
          String cardName=cardLink.substring(6,cardLink.length() - 4);
          if (cardName != null && !cardName.isEmpty()) {
            if (cardNameAliases.containsKey(cardSet + "-" + cardName)) {
              cardName=cardNameAliases.get(cardSet + "-" + cardName);
            }
            if (cardName.endsWith("1") || cardName.endsWith("2") || cardName.endsWith("3")|| cardName.endsWith("4")|| cardName.endsWith("5")) {
              if (!cardName.startsWith("forest") && !cardName.startsWith("swamp") && !cardName.startsWith("mountain")&& !cardName.startsWith("island")&& !cardName.startsWith("plains")) {
                cardName=cardName.substring(0,cardName.length() - 1);
              }
            }
            setLinks.put(cardName,baseUrl + cardLink);
          }
        }
      }
    }
  }
 catch (  IOException ex) {
    System.out.println("Exception when parsing the mythicspoiler page: " + ex.getMessage());
  }
  return setLinks;
}
