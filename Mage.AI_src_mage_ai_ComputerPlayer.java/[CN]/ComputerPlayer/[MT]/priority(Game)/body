{
  logger.fine("priority");
  if (game.getActivePlayerId().equals(playerId)) {
    if (game.isMainPhase() && game.getStack().isEmpty()) {
      playLand(game);
    }
switch (game.getStep()) {
case UPKEEP:
      findPlayables(game);
    break;
case DRAW:
  logState(game);
case DECLARE_BLOCKERS:
playRemoval(game.getCombat().getAttackers(),game);
case PRECOMBAT_MAIN:
findPlayables(game);
if (playableAbilities.size() > 0) {
for (ActivatedAbility ability : playableAbilities) {
if (ability.canActivate(playerId,game)) {
  if (ability.getEffects().hasOutcome(Outcome.PutLandInPlay)) {
    if (this.activateAbility(ability,game))     return;
  }
}
}
}
break;
case POSTCOMBAT_MAIN:
findPlayables(game);
if (game.getStack().isEmpty()) {
if (playableNonInstant.size() > 0) {
for (Card card : playableNonInstant) {
if (card.getSpellAbility().canActivate(playerId,game)) {
if (this.activateAbility(card.getSpellAbility(),game)) return;
}
}
}
if (playableAbilities.size() > 0) {
for (ActivatedAbility ability : playableAbilities) {
if (ability.canActivate(playerId,game)) {
if (this.activateAbility(ability,game)) return;
}
}
}
}
break;
}
}
 else {
}
this.passed=true;
}
