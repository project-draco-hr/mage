{
  int manaCostExiled=0;
  for (  Cost cost : source.getCosts()) {
    if (cost.isPaid() && cost instanceof ExileTargetCost) {
      for (      Card card : ((ExileTargetCost)cost).getPermanents()) {
        manaCostExiled+=card.getManaCost().convertedManaCost();
      }
    }
  }
  ChoiceColor choice=(ChoiceColor)source.getChoices().get(0);
  Mana mana=null;
  if (choice.getColor().isBlack()) {
    mana=new FoodChainManaBuilder().setMana(Mana.BlackMana(manaCostExiled + 1),source,game).build();
  }
 else   if (choice.getColor().isBlue()) {
    mana=new FoodChainManaBuilder().setMana(Mana.BlueMana(manaCostExiled + 1),source,game).build();
  }
 else   if (choice.getColor().isRed()) {
    mana=new FoodChainManaBuilder().setMana(Mana.RedMana(manaCostExiled + 1),source,game).build();
  }
 else   if (choice.getColor().isGreen()) {
    mana=new FoodChainManaBuilder().setMana(Mana.GreenMana(manaCostExiled + 1),source,game).build();
  }
 else   if (choice.getColor().isWhite()) {
    mana=new FoodChainManaBuilder().setMana(Mana.WhiteMana(manaCostExiled + 1),source,game).build();
  }
  Player player=game.getPlayer(source.getControllerId());
  if (player != null && mana != null) {
    player.getManaPool().addMana(mana,game,source);
    return true;
  }
  return false;
}
