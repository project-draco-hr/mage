{
  Player controller=game.getPlayer(source.getControllerId());
  if (controller == null) {
    return false;
  }
  HashSet<String> choices=new HashSet<String>();
  choices.add("Artifacts");
  choices.add("Creatures");
  choices.add("Lands");
  LinkedList<CardType> order=new LinkedList<CardType>();
  ChoiceImpl choice=new ChoiceImpl(true);
  choice.setChoices(choices);
  while (controller.choose(Outcome.Sacrifice,choice,game) && choices.size() > 1) {
    order.add(getCardType(choice.getChoice()));
    choices.remove(choice.getChoice());
    choice.clearChoice();
  }
  order.add(getCardType(choices.iterator().next()));
  LinkedList<UUID> sacrifices=new LinkedList<UUID>();
  int count=1;
  for (  CardType cardType : order) {
    FilterControlledPermanent filter=new FilterControlledPermanent(cardType + " permanent you control");
    filter.getCardType().add(cardType);
    for (    UUID playerId : controller.getInRange()) {
      int amount=Math.min(count,game.getBattlefield().countAll(filter,playerId,game));
      TargetControlledPermanent target=new TargetControlledPermanent(amount,amount,filter,false);
      target.setRequired(true);
      Player player=game.getPlayer(playerId);
      if (player != null && player.choose(Outcome.Sacrifice,target,source.getSourceId(),game)) {
        sacrifices.addAll(target.getTargets());
      }
    }
    for (    UUID targetId : sacrifices) {
      Permanent permanent=game.getPermanent(targetId);
      if (permanent != null) {
        permanent.sacrifice(source.getSourceId(),game);
      }
    }
    sacrifices.clear();
    count++;
  }
  return true;
}
