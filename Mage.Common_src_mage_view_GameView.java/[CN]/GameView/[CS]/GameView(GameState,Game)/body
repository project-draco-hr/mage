{
  for (  Player player : state.getPlayers().values()) {
    players.add(new PlayerView(player,state,game));
  }
  for (  StackObject stackObject : state.getStack()) {
    if (stackObject instanceof StackAbility) {
      MageObject object=game.getObject(stackObject.getSourceId());
      Card card=game.getCard(stackObject.getSourceId());
      if (object != null)       stack.put(stackObject.getId(),new StackAbilityView((StackAbility)stackObject,object.getName(),new CardView(card)));
 else       stack.put(stackObject.getId(),new StackAbilityView((StackAbility)stackObject,"",new CardView(card)));
    }
 else {
      stack.put(stackObject.getId(),new CardView((Spell)stackObject));
    }
  }
  for (  ExileZone exileZone : state.getExile().getExileZones()) {
    exiles.add(new ExileView(exileZone,game));
  }
  for (  String name : state.getRevealed().keySet()) {
    revealed.add(new RevealedView(name,state.getRevealed().get(name),game));
  }
  this.phase=state.getTurn().getPhaseType();
  this.step=state.getTurn().getStepType();
  this.turn=state.getTurnNum();
  if (state.getActivePlayerId() != null)   this.activePlayerName=state.getPlayer(state.getActivePlayerId()).getName();
 else   this.activePlayerName="";
  if (state.getPriorityPlayerId() != null)   this.priorityPlayerName=state.getPlayer(state.getPriorityPlayerId()).getName();
 else   this.priorityPlayerName="";
  for (  CombatGroup combatGroup : state.getCombat().getGroups()) {
    combat.add(new CombatGroupView(combatGroup,game));
  }
  this.special=state.getSpecialActions().getControlledBy(state.getPriorityPlayerId()).size() > 0;
}
