{
  Card chosenCard=game.getCard(source.getFirstTarget());
  Player controller=game.getPlayer(source.getControllerId());
  if (chosenCard != null && controller != null) {
    Player owner=game.getPlayer(chosenCard.getOwnerId());
    if (owner != null) {
      FilterCard filterNamedCard=new FilterCard("card named " + chosenCard.getName());
      filterNamedCard.add(new NamePredicate(chosenCard.getName()));
      Cards cardsInLibrary=new CardsImpl(Zone.LIBRARY);
      cardsInLibrary.addAll(owner.getLibrary().getCards(game));
      int cardsCount=owner.getGraveyard().count(filterNamedCard,game);
      if (cardsCount > 0) {
        filterNamedCard.setMessage("card named " + chosenCard.getName() + " in the graveyard of "+ owner.getName());
        TargetCardInGraveyard target=new TargetCardInGraveyard(0,cardsCount,filterNamedCard);
        if (controller.choose(Outcome.Exile,owner.getGraveyard(),target,game)) {
          List<UUID> targets=target.getTargets();
          for (          UUID targetId : targets) {
            Card targetCard=owner.getGraveyard().get(targetId,game);
            if (targetCard != null) {
              controller.moveCardToExileWithInfo(targetCard,null,"",source.getSourceId(),game,Zone.GRAVEYARD);
            }
          }
        }
      }
      filterNamedCard.setMessage("card named " + chosenCard.getName() + " in the hand of "+ owner.getName());
      TargetCardInHand targetCardInHand=new TargetCardInHand(0,Integer.MAX_VALUE,filterNamedCard);
      if (controller.choose(Outcome.Exile,owner.getHand(),targetCardInHand,game)) {
        List<UUID> targets=targetCardInHand.getTargets();
        for (        UUID targetId : targets) {
          Card targetCard=owner.getHand().get(targetId,game);
          if (targetCard != null) {
            controller.moveCardToExileWithInfo(targetCard,null,"",source.getSourceId(),game,Zone.HAND);
          }
        }
      }
      filterNamedCard.setMessage("card named " + chosenCard.getName() + " in the library of "+ owner.getName());
      TargetCardInLibrary targetCardInLibrary=new TargetCardInLibrary(0,Integer.MAX_VALUE,filterNamedCard);
      if (controller.searchLibrary(targetCardInLibrary,game,owner.getId())) {
        List<UUID> targets=targetCardInLibrary.getTargets();
        for (        UUID targetId : targets) {
          Card targetCard=owner.getLibrary().getCard(targetId,game);
          if (targetCard != null) {
            controller.moveCardToExileWithInfo(targetCard,null,"",source.getSourceId(),game,Zone.LIBRARY);
          }
        }
      }
      owner.shuffleLibrary(game);
      return true;
    }
  }
  return false;
}
