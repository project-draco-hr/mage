{
  holdingPriority=false;
  txtHoldPriority.setVisible(false);
  setMenuStates(PreferencesDialog.getCachedValue(KEY_GAME_MANA_AUTOPAYMENT,"true").equals("true"),PreferencesDialog.getCachedValue(KEY_GAME_MANA_AUTOPAYMENT_ONLY_ONE,"true").equals("true"),PreferencesDialog.getCachedValue(KEY_USE_FIRST_MANA_ABILITY,"false").equals("true"),false);
  updateGame(gameView,options);
  boolean controllingPlayer=false;
  for (  PlayerView playerView : gameView.getPlayers()) {
    if (playerView.getPlayerId().equals(playerId)) {
      controllingPlayer=!gameView.getPriorityPlayerName().equals(playerView.getName());
      if (playerView.getStatesSavedSize() > 0 && gameView.getStack().isEmpty()) {
        feedbackPanel.allowUndo(playerView.getStatesSavedSize());
      }
      break;
    }
  }
  Map<String,Serializable> panelOptions=new HashMap<>();
  if (options != null) {
    panelOptions.putAll(options);
  }
  panelOptions.put("your_turn",true);
  String activePlayerText;
  if (gameView.getActivePlayerId().equals(playerId)) {
    activePlayerText="Your turn";
  }
 else {
    activePlayerText=gameView.getActivePlayerName() + "'s turn";
  }
  String priorityPlayerText="";
  if (controllingPlayer) {
    priorityPlayerText=" / priority " + gameView.getPriorityPlayerName();
  }
  String messageToDisplay=message + FeedbackPanel.getSmallText(activePlayerText + " / " + gameView.getStep().toString()+ priorityPlayerText);
  this.feedbackPanel.getFeedback(FeedbackMode.SELECT,messageToDisplay,gameView.getSpecial(),panelOptions,messageId);
}
