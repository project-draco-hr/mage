{
  updateGame(gameView,options);
  String messageToDisplay=message;
  Map<String,Serializable> panelOptions=null;
  for (  PlayerView playerView : gameView.getPlayers()) {
    if (playerView.getPlayerId().equals(playerId)) {
      if (playerView.isActive()) {
        panelOptions=new HashMap<>();
        panelOptions.put("your_turn",true);
        messageToDisplay=message + " <div style='font-size:11pt'>Your turn</div>";
      }
      if (playerView.getStatesSavedSize() > 0 && gameView.getStack().size() == 0) {
        feedbackPanel.allowUndo(playerView.getStatesSavedSize());
      }
      break;
    }
  }
  this.feedbackPanel.getFeedback(FeedbackMode.SELECT,messageToDisplay,gameView.getSpecial(),panelOptions,messageId);
  if (PhaseManager.getInstance().isSkip(gameView,message)) {
    this.feedbackPanel.doClick();
    logger.debug(new StringBuilder("Phase skipped: ").append(message).append(" id: ").append(messageId));
  }
 else {
    logger.debug(new StringBuilder("Phase not skipped: ").append(message).append(" id: ").append(messageId));
  }
}
