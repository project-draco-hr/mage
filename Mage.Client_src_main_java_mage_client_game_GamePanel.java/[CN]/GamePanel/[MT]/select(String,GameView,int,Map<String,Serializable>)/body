{
  updateGame(gameView,options);
  boolean controllingPlayer=false;
  for (  PlayerView playerView : gameView.getPlayers()) {
    if (playerView.getPlayerId().equals(playerId)) {
      controllingPlayer=!gameView.getPriorityPlayerName().equals(playerView.getName());
      if (playerView.getStatesSavedSize() > 0 && gameView.getStack().size() == 0) {
        feedbackPanel.allowUndo(playerView.getStatesSavedSize());
      }
      break;
    }
  }
  Map<String,Serializable> panelOptions=new HashMap<>();
  panelOptions.put("your_turn",true);
  String activePlayerText;
  if (gameView.getActivePlayerId().equals(playerId)) {
    activePlayerText="Your turn";
  }
 else {
    activePlayerText=gameView.getActivePlayerName() + "'s turn";
  }
  String priorityPlayerText="";
  if (controllingPlayer) {
    priorityPlayerText=" / priority " + gameView.getPriorityPlayerName();
  }
  String messageToDisplay=message + "<div style='font-size:11pt'>" + activePlayerText+ " / "+ gameView.getStep().toString()+ priorityPlayerText+ "</div>";
  this.feedbackPanel.getFeedback(FeedbackMode.SELECT,messageToDisplay,gameView.getSpecial(),panelOptions,messageId);
}
