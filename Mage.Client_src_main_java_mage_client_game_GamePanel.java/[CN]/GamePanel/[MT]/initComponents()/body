{
  abilityPicker=new mage.client.components.ability.AbilityPicker();
  jSplitPane1=new javax.swing.JSplitPane();
  jSplitPane0=new javax.swing.JSplitPane();
  jPanel2=new javax.swing.JPanel();
  jPanel3=new javax.swing.JPanel();
  pnlGameInfo=new javax.swing.JPanel();
  lblPhase=new javax.swing.JLabel();
  txtPhase=new javax.swing.JLabel();
  lblStep=new javax.swing.JLabel();
  txtStep=new javax.swing.JLabel();
  lblTurn=new javax.swing.JLabel();
  txtTurn=new javax.swing.JLabel();
  txtActivePlayer=new javax.swing.JLabel();
  lblActivePlayer=new javax.swing.JLabel();
  txtPriority=new javax.swing.JLabel();
  lblPriority=new javax.swing.JLabel();
  feedbackPanel=new mage.client.game.FeedbackPanel();
  btnConcede=new javax.swing.JButton();
  btnEndTurn=new javax.swing.JButton();
  btnSwitchHands=new javax.swing.JButton();
  btnStopWatching=new javax.swing.JButton();
  bigCard=new mage.client.cards.BigCard();
  stack=new mage.client.cards.Cards();
  pnlReplay=new javax.swing.JPanel();
  btnStopReplay=new javax.swing.JButton();
  btnNextPlay=new javax.swing.JButton();
  btnPlay=new javax.swing.JButton();
  btnSkipForward=new javax.swing.JButton();
  btnPreviousPlay=new javax.swing.JButton();
  pnlBattlefield=new javax.swing.JPanel();
  gameChatPanel=new mage.client.chat.ChatPanel();
  gameChatPanel.useExtendedView(ChatPanel.VIEW_MODE.GAME);
  userChatPanel=new mage.client.chat.ChatPanel();
  userChatPanel.setParentChat(gameChatPanel);
  userChatPanel.useExtendedView(ChatPanel.VIEW_MODE.CHAT);
  gameChatPanel.setConnectedChat(userChatPanel);
  gameChatPanel.disableInput();
  gameChatPanel.setMinimumSize(new java.awt.Dimension(100,48));
  jSplitPane2=new javax.swing.JSplitPane();
  handContainer=new HandPanel();
  handCards=new HashMap<String,SimpleCardsView>();
  jSplitPane1.setBorder(null);
  jSplitPane1.setDividerSize(7);
  jSplitPane1.setResizeWeight(1.0);
  jSplitPane1.setOneTouchExpandable(true);
  jSplitPane1.setMinimumSize(new java.awt.Dimension(26,48));
  jSplitPane0.setBorder(null);
  jSplitPane0.setDividerSize(7);
  jSplitPane0.setResizeWeight(1.0);
  jSplitPane0.setOneTouchExpandable(true);
  pnlGameInfo.setOpaque(false);
  lblPhase.setLabelFor(txtPhase);
  lblPhase.setText("Phase:");
  txtPhase.setText("Phase");
  txtPhase.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtPhase.setMinimumSize(new java.awt.Dimension(0,16));
  lblStep.setLabelFor(txtStep);
  lblStep.setText("Step:");
  txtStep.setText("Step");
  txtStep.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtStep.setMinimumSize(new java.awt.Dimension(0,16));
  lblTurn.setLabelFor(txtTurn);
  lblTurn.setText("Turn:");
  txtTurn.setText("Turn");
  txtTurn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtTurn.setMinimumSize(new java.awt.Dimension(0,16));
  txtActivePlayer.setText("Active Player");
  txtActivePlayer.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtActivePlayer.setMinimumSize(new java.awt.Dimension(0,16));
  lblActivePlayer.setLabelFor(txtActivePlayer);
  lblActivePlayer.setText("Active Player:");
  txtPriority.setText("Priority Player");
  txtPriority.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtPriority.setMinimumSize(new java.awt.Dimension(0,16));
  lblPriority.setLabelFor(txtPriority);
  lblPriority.setText("Priority Player:");
  feedbackPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0,0,0)));
  feedbackPanel.setMaximumSize(new java.awt.Dimension(208,121));
  feedbackPanel.setMinimumSize(new java.awt.Dimension(208,121));
  bigCard.setBorder(new LineBorder(Color.black,1,true));
  btnConcede.setText("Concede");
  btnConcede.setToolTipText("Concede the current game");
  btnConcede.setFocusable(false);
  btnConcede.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      btnConcedeActionPerformed(null);
    }
  }
);
  btnEndTurn.setText("End Turn (F4)");
  btnEndTurn.setToolTipText("End This Turn");
  btnEndTurn.setFocusable(false);
  btnEndTurn.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      btnEndTurnActionPerformed(null);
    }
  }
);
  int c=JComponent.WHEN_IN_FOCUSED_WINDOW;
  KeyStroke ks=KeyStroke.getKeyStroke(KeyEvent.VK_F4,0);
  this.getInputMap(c).put(ks,"F4_PRESS");
  this.getActionMap().put("F4_PRESS",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      btnEndTurnActionPerformed(null);
    }
  }
);
  KeyStroke ks8=KeyStroke.getKeyStroke(KeyEvent.VK_F9,0);
  this.getInputMap(c).put(ks8,"F9_PRESS");
  this.getActionMap().put("F9_PRESS",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      if (feedbackPanel != null && FeedbackMode.SELECT.equals(feedbackPanel.getMode())) {
        session.sendPlayerInteger(gameId,-9999);
      }
    }
  }
);
  KeyStroke ksAltE=KeyStroke.getKeyStroke(KeyEvent.VK_E,InputEvent.ALT_MASK);
  this.getInputMap(c).put(ksAltE,"ENLARGE");
  this.getActionMap().put("ENLARGE",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      ActionCallback callback=Plugins.getInstance().getActionCallback();
      ((MageActionCallback)callback).enlargeCard();
    }
  }
);
  KeyStroke ksAltD=KeyStroke.getKeyStroke(KeyEvent.VK_D,InputEvent.ALT_MASK);
  this.getInputMap(c).put(ksAltD,"BIG_IMAGE");
  this.getActionMap().put("BIG_IMAGE",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      imagePanelState=!imagePanelState;
      if (!imagePanelState) {
        jSplitPane0.resetToPreferredSizes();
        jSplitPane0.setDividerLocation(jSplitPane0.getSize().width - jSplitPane0.getInsets().right - jSplitPane0.getDividerSize()- 260);
      }
 else {
        jSplitPane0.setDividerLocation(1.0);
      }
    }
  }
);
  final BasicSplitPaneUI ui=(BasicSplitPaneUI)jSplitPane0.getUI();
  final BasicSplitPaneDivider divider=ui.getDivider();
  final JButton upArrowButton=(JButton)divider.getComponent(0);
  upArrowButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      PreferencesDialog.saveValue(PreferencesDialog.KEY_BIG_CARD_TOGGLED,"up");
    }
  }
);
  final JButton downArrowButton=(JButton)divider.getComponent(1);
  downArrowButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      PreferencesDialog.saveValue(PreferencesDialog.KEY_BIG_CARD_TOGGLED,"down");
    }
  }
);
  KeyStroke ksAltShiftReleased=KeyStroke.getKeyStroke(KeyEvent.VK_E,InputEvent.ALT_MASK,true);
  this.getInputMap(c).put(ksAltShiftReleased,"ENLARGE_RELEASE");
  this.getActionMap().put("ENLARGE_RELEASE",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      ActionCallback callback=Plugins.getInstance().getActionCallback();
      ((MageActionCallback)callback).hideCard();
    }
  }
);
  btnSwitchHands.setText("Switch Hands");
  btnSwitchHands.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      btnSwitchHandActionPerformed(null);
    }
  }
);
  btnStopWatching.setText("Stop Watching");
  btnStopWatching.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnStopWatchingActionPerformed(evt);
    }
  }
);
  stack.setPreferredSize(new java.awt.Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight + 25));
  stack.setBackgroundColor(new Color(0,0,0,0));
  btnStopReplay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/control_stop.png")));
  btnStopReplay.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnStopReplayActionPerformed(evt);
    }
  }
);
  btnNextPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/control_stop_right.png")));
  btnNextPlay.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnNextPlayActionPerformed(evt);
    }
  }
);
  btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/control_right.png")));
  btnPlay.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnPlayActionPerformed(evt);
    }
  }
);
  btnSkipForward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/control_double_stop_right.png")));
  btnSkipForward.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnSkipForwardActionPerformed(evt);
    }
  }
);
  btnPreviousPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/control_stop_left.png")));
  btnPreviousPlay.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnPreviousPlayActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout gl_pnlReplay=new javax.swing.GroupLayout(pnlReplay);
  pnlReplay.setLayout(gl_pnlReplay);
  gl_pnlReplay.setHorizontalGroup(gl_pnlReplay.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlReplay.createSequentialGroup().addComponent(btnPreviousPlay,javax.swing.GroupLayout.PREFERRED_SIZE,41,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnPlay,javax.swing.GroupLayout.PREFERRED_SIZE,35,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(btnStopReplay,javax.swing.GroupLayout.PREFERRED_SIZE,38,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnNextPlay,javax.swing.GroupLayout.PREFERRED_SIZE,36,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnSkipForward,javax.swing.GroupLayout.PREFERRED_SIZE,39,javax.swing.GroupLayout.PREFERRED_SIZE)));
  gl_pnlReplay.setVerticalGroup(gl_pnlReplay.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(btnSkipForward,0,0,Short.MAX_VALUE).addComponent(btnNextPlay,0,0,Short.MAX_VALUE).addComponent(btnStopReplay,0,0,Short.MAX_VALUE).addComponent(btnPlay,0,0,Short.MAX_VALUE).addComponent(btnPreviousPlay,javax.swing.GroupLayout.PREFERRED_SIZE,31,Short.MAX_VALUE));
  javax.swing.GroupLayout gl_pnlGameInfo=new javax.swing.GroupLayout(pnlGameInfo);
  pnlGameInfo.setLayout(gl_pnlGameInfo);
  gl_pnlGameInfo.setHorizontalGroup(gl_pnlGameInfo.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlGameInfo.createSequentialGroup().addGap(10,10,10).addComponent(btnConcede).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnEndTurn).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnSwitchHands).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnStopWatching).addContainerGap(62,Short.MAX_VALUE)).addComponent(stack,javax.swing.GroupLayout.DEFAULT_SIZE,256,Short.MAX_VALUE).addGroup(gl_pnlGameInfo.createSequentialGroup().addContainerGap().addComponent(pnlReplay,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(51,Short.MAX_VALUE)));
  gl_pnlGameInfo.setVerticalGroup(gl_pnlGameInfo.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlGameInfo.createSequentialGroup().addComponent(stack,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,164,Short.MAX_VALUE).addComponent(pnlReplay,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(gl_pnlGameInfo.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(btnConcede).addComponent(btnEndTurn).addComponent(btnSwitchHands).addComponent(btnStopWatching))));
  pnlBattlefield.setLayout(new java.awt.GridBagLayout());
  jPhases=new JPanel();
  jPhases.setBackground(new Color(0,0,0,100));
  jPhases.setLayout(new GridBagLayout());
  untap=new JButton("Un");
  untap.setToolTipText("Untap");
  upkeep=new JButton("Up");
  upkeep.setToolTipText("Upkeep");
  draw=new JButton("D");
  draw.setToolTipText("Draw");
  main1=new JButton("M1");
  main1.setToolTipText("Main#1");
  attack=new JButton("A");
  attack.setToolTipText("Attack");
  block=new JButton("B");
  block.setToolTipText("Block");
  combatButton=new JButton("C");
  combatButton.setToolTipText("Combat damage");
  main2=new JButton("M2");
  main2.setToolTipText("Main#2");
  endOfTurn=new JButton("End");
  endOfTurn.setToolTipText("End The Turn");
  endOfTurn.addMouseListener(new MouseAdapter(){
    @Override public void mousePressed(    MouseEvent e){
      if (feedbackPanel != null && FeedbackMode.SELECT.equals(feedbackPanel.getMode())) {
        logger.info("user pressed End Of Turn");
        endButtonTip.setVisible(false);
        session.sendPlayerInteger(gameId,0);
      }
    }
  }
);
  jPhases.add(untap);
  jPhases.add(upkeep);
  jPhases.add(draw);
  jPhases.add(main1);
  jPhases.add(attack);
  jPhases.add(block);
  jPhases.add(combatButton);
  jPhases.add(main2);
  jPhases.add(endOfTurn);
  pnlReplay.setOpaque(false);
  helper=new HelperPanel();
  helper.setPreferredSize(new Dimension(100,90));
  feedbackPanel.setHelperPanel(helper);
  jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
  jSplitPane2.setResizeWeight(0.5);
  jSplitPane2.setLeftComponent(userChatPanel);
  jSplitPane2.setBottomComponent(gameChatPanel);
  javax.swing.GroupLayout gl_jPanel3=new javax.swing.GroupLayout(jPanel3);
  gl_jPanel3.setHorizontalGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addGroup(gl_jPanel3.createSequentialGroup().addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addGroup(gl_jPanel3.createSequentialGroup().addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addComponent(helper,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(handContainer,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addComponent(stack,400,400,400)).addGap(0).addGroup(gl_jPanel3.createSequentialGroup().addComponent(pnlBattlefield,GroupLayout.DEFAULT_SIZE,200,Short.MAX_VALUE)))));
  gl_jPanel3.setVerticalGroup(gl_jPanel3.createParallelGroup(Alignment.TRAILING).addGroup(gl_jPanel3.createSequentialGroup().addComponent(pnlBattlefield,GroupLayout.DEFAULT_SIZE,200,Short.MAX_VALUE).addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addGroup(gl_jPanel3.createSequentialGroup().addGap(85).addComponent(stack,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addGroup(gl_jPanel3.createSequentialGroup().addComponent(helper,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addComponent(handContainer,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)))));
  jPanel3.setLayout(gl_jPanel3);
  jSplitPane1.setLeftComponent(jPanel3);
  jSplitPane1.setRightComponent(jSplitPane2);
  jPanel2.add(bigCard);
  jPanel2.setOpaque(false);
  jSplitPane0.setLeftComponent(jSplitPane1);
  jSplitPane0.setRightComponent(jPanel2);
  javax.swing.GroupLayout layout=new javax.swing.GroupLayout(this);
  this.setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane0,javax.swing.GroupLayout.DEFAULT_SIZE,1078,Short.MAX_VALUE));
  layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane0,javax.swing.GroupLayout.DEFAULT_SIZE,798,Short.MAX_VALUE));
}
