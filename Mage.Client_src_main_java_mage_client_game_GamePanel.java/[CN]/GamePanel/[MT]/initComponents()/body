{
  abilityPicker=new mage.client.components.ability.AbilityPicker();
  jSplitPane1=new javax.swing.JSplitPane();
  jSplitPane0=new javax.swing.JSplitPane();
  jPanel2=new javax.swing.JPanel();
  jPanel3=new javax.swing.JPanel();
  pnlShortCuts=new javax.swing.JPanel();
  lblPhase=new javax.swing.JLabel();
  txtPhase=new javax.swing.JLabel();
  lblStep=new javax.swing.JLabel();
  txtStep=new javax.swing.JLabel();
  lblTurn=new javax.swing.JLabel();
  txtTurn=new javax.swing.JLabel();
  txtActivePlayer=new javax.swing.JLabel();
  lblActivePlayer=new javax.swing.JLabel();
  txtPriority=new javax.swing.JLabel();
  lblPriority=new javax.swing.JLabel();
  feedbackPanel=new mage.client.game.FeedbackPanel();
  txtPhasesBottomInfo=new javax.swing.JLabel();
  txtPhasesBottomInfo.setToolTipText("spells cast during the current turn");
  btnCancelSkip=new javax.swing.JButton();
  btnSkipToNextTurn=new javax.swing.JButton();
  btnSkipToEndTurn=new javax.swing.JButton();
  btnSkipToNextMain=new javax.swing.JButton();
  btnSkipStack=new javax.swing.JButton();
  btnSkipToYourTurn=new javax.swing.JButton();
  btnConcede=new javax.swing.JButton();
  btnSwitchHands=new javax.swing.JButton();
  btnStopWatching=new javax.swing.JButton();
  bigCard=new mage.client.cards.BigCard();
  stack=new mage.client.cards.Cards();
  pnlReplay=new javax.swing.JPanel();
  btnStopReplay=new javax.swing.JButton();
  btnNextPlay=new javax.swing.JButton();
  btnPlay=new javax.swing.JButton();
  btnSkipForward=new javax.swing.JButton();
  btnPreviousPlay=new javax.swing.JButton();
  pnlBattlefield=new javax.swing.JPanel();
  gameChatPanel=new mage.client.chat.ChatPanel();
  gameChatPanel.useExtendedView(ChatPanel.VIEW_MODE.GAME);
  userChatPanel=new mage.client.chat.ChatPanel();
  userChatPanel.setParentChat(gameChatPanel);
  userChatPanel.useExtendedView(ChatPanel.VIEW_MODE.CHAT);
  userChatPanel.setChatType(ChatPanel.ChatType.GAME);
  gameChatPanel.setConnectedChat(userChatPanel);
  gameChatPanel.disableInput();
  gameChatPanel.setMinimumSize(new java.awt.Dimension(100,48));
  jSplitPane2=new javax.swing.JSplitPane();
  handContainer=new HandPanel();
  handCards=new HashMap<>();
  jSplitPane1.setBorder(null);
  jSplitPane1.setDividerSize(7);
  jSplitPane1.setResizeWeight(1.0);
  jSplitPane1.setOneTouchExpandable(true);
  jSplitPane1.setMinimumSize(new java.awt.Dimension(26,48));
  jSplitPane0.setBorder(null);
  jSplitPane0.setDividerSize(7);
  jSplitPane0.setResizeWeight(1.0);
  jSplitPane0.setOneTouchExpandable(true);
  restoreDividerLocations();
  pnlShortCuts.setOpaque(false);
  pnlShortCuts.setPreferredSize(new Dimension(400,72));
  lblPhase.setLabelFor(txtPhase);
  lblPhase.setText("Phase:");
  txtPhase.setText("Phase");
  txtPhase.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtPhase.setMinimumSize(new java.awt.Dimension(0,16));
  lblStep.setLabelFor(txtStep);
  lblStep.setText("Step:");
  txtStep.setText("Step");
  txtStep.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtStep.setMinimumSize(new java.awt.Dimension(0,16));
  lblTurn.setLabelFor(txtTurn);
  lblTurn.setText("Turn:");
  txtTurn.setText("Turn");
  txtTurn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtTurn.setMinimumSize(new java.awt.Dimension(0,16));
  txtActivePlayer.setText("Active Player");
  txtActivePlayer.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtActivePlayer.setMinimumSize(new java.awt.Dimension(0,16));
  lblActivePlayer.setLabelFor(txtActivePlayer);
  lblActivePlayer.setText("Active Player:");
  txtPriority.setText("Priority Player");
  txtPriority.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153,153,153),1,true));
  txtPriority.setMinimumSize(new java.awt.Dimension(0,16));
  lblPriority.setLabelFor(txtPriority);
  lblPriority.setText("Priority Player:");
  feedbackPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(150,50,50),2));
  feedbackPanel.setMaximumSize(new java.awt.Dimension(208,121));
  feedbackPanel.setMinimumSize(new java.awt.Dimension(208,121));
  bigCard.setBorder(new LineBorder(Color.black,1,true));
  int c=JComponent.WHEN_IN_FOCUSED_WINDOW;
  KeyStroke ks3=KeyStroke.getKeyStroke(KeyEvent.VK_F3,0);
  this.getInputMap(c).put(ks3,"F3_PRESS");
  this.getActionMap().put("F3_PRESS",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      restorePriorityActionPerformed(actionEvent);
    }
  }
);
  btnCancelSkip.setContentAreaFilled(false);
  btnCancelSkip.setBorder(new EmptyBorder(BORDER_SIZE,BORDER_SIZE,BORDER_SIZE,BORDER_SIZE));
  btnCancelSkip.setIcon(new ImageIcon(ImageManagerImpl.getInstance().getCancelSkipButtonImage()));
  btnCancelSkip.setToolTipText("Cancel all skip actions (F3).");
  btnCancelSkip.setFocusable(false);
  btnCancelSkip.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      if (evt.getButton() == MouseEvent.BUTTON1) {
        restorePriorityActionPerformed(null);
      }
    }
  }
);
  btnSkipToNextTurn.setContentAreaFilled(false);
  btnSkipToNextTurn.setBorder(new EmptyBorder(BORDER_SIZE,BORDER_SIZE,BORDER_SIZE,BORDER_SIZE));
  btnSkipToNextTurn.setIcon(new ImageIcon(ImageManagerImpl.getInstance().getSkipNextTurnButtonImage()));
  btnSkipToNextTurn.setToolTipText("Skip to next turn (F4).");
  btnSkipToNextTurn.setFocusable(false);
  btnSkipToNextTurn.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      if (evt.getButton() == MouseEvent.BUTTON1) {
        btnEndTurnActionPerformed(null);
      }
    }
  }
);
  KeyStroke ks=KeyStroke.getKeyStroke(KeyEvent.VK_F4,0);
  this.getInputMap(c).put(ks,"F4_PRESS");
  this.getActionMap().put("F4_PRESS",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      btnEndTurnActionPerformed(actionEvent);
    }
  }
);
  btnSkipToEndTurn.setContentAreaFilled(false);
  btnSkipToEndTurn.setBorder(new EmptyBorder(BORDER_SIZE,BORDER_SIZE,BORDER_SIZE,BORDER_SIZE));
  btnSkipToEndTurn.setIcon(new ImageIcon(ImageManagerImpl.getInstance().getSkipEndTurnButtonImage()));
  btnSkipToEndTurn.setToolTipText("Skip to (opponents/next) end of turn step (F5) - adjust using preferences.");
  btnSkipToEndTurn.setFocusable(false);
  btnSkipToEndTurn.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      if (evt.getButton() == MouseEvent.BUTTON1) {
        btnUntilEndOfTurnActionPerformed(null);
      }
    }
  }
);
  ks=KeyStroke.getKeyStroke(KeyEvent.VK_F5,0);
  this.getInputMap(c).put(ks,"F5_PRESS");
  this.getActionMap().put("F5_PRESS",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      btnUntilEndOfTurnActionPerformed(actionEvent);
    }
  }
);
  btnSkipToNextMain.setContentAreaFilled(false);
  btnSkipToNextMain.setBorder(new EmptyBorder(BORDER_SIZE,BORDER_SIZE,BORDER_SIZE,BORDER_SIZE));
  btnSkipToNextMain.setIcon(new ImageIcon(ImageManagerImpl.getInstance().getSkipMainButtonImage()));
  btnSkipToNextMain.setToolTipText("Skip to (your) next main phase (F7) - adjust using preferences.");
  btnSkipToNextMain.setFocusable(false);
  btnSkipToNextMain.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      if (evt.getButton() == MouseEvent.BUTTON1) {
        btnUntilNextMainPhaseActionPerformed(null);
      }
    }
  }
);
  ks=KeyStroke.getKeyStroke(KeyEvent.VK_F7,0);
  this.getInputMap(c).put(ks,"F7_PRESS");
  this.getActionMap().put("F7_PRESS",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      btnUntilNextMainPhaseActionPerformed(actionEvent);
    }
  }
);
  btnSkipToYourTurn.setContentAreaFilled(false);
  btnSkipToYourTurn.setBorder(new EmptyBorder(BORDER_SIZE,BORDER_SIZE,BORDER_SIZE,BORDER_SIZE));
  btnSkipToYourTurn.setIcon(new ImageIcon(ImageManagerImpl.getInstance().getSkipYourNextTurnButtonImage()));
  btnSkipToYourTurn.setToolTipText("Skip to your next turn (F9).");
  btnSkipToYourTurn.setFocusable(false);
  btnSkipToYourTurn.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      if (evt.getButton() == MouseEvent.BUTTON1) {
        btnPassPriorityUntilNextYourTurnActionPerformed(null);
      }
    }
  }
);
  KeyStroke ks9=KeyStroke.getKeyStroke(KeyEvent.VK_F9,0);
  this.getInputMap(c).put(ks9,"F9_PRESS");
  this.getActionMap().put("F9_PRESS",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      btnPassPriorityUntilNextYourTurnActionPerformed(actionEvent);
    }
  }
);
  btnSkipStack.setContentAreaFilled(false);
  btnSkipStack.setBorder(new EmptyBorder(BORDER_SIZE,BORDER_SIZE,BORDER_SIZE,BORDER_SIZE));
  btnSkipStack.setIcon(new ImageIcon(ImageManagerImpl.getInstance().getSkipStackButtonImage()));
  btnSkipStack.setToolTipText("Skip until stack is resolved (F10).");
  btnSkipStack.setFocusable(false);
  btnSkipStack.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      if (evt.getButton() == MouseEvent.BUTTON1) {
        btnPassPriorityUntilStackResolvedActionPerformed(null);
      }
    }
  }
);
  ks=KeyStroke.getKeyStroke(KeyEvent.VK_F10,0);
  this.getInputMap(c).put(ks,"F10_PRESS");
  this.getActionMap().put("F10_PRESS",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      btnPassPriorityUntilStackResolvedActionPerformed(actionEvent);
    }
  }
);
  btnConcede.setContentAreaFilled(false);
  btnConcede.setBorder(new EmptyBorder(BORDER_SIZE,BORDER_SIZE,BORDER_SIZE,BORDER_SIZE));
  btnConcede.setIcon(new ImageIcon(ImageManagerImpl.getInstance().getConcedeButtonImage()));
  btnConcede.setToolTipText("Concede the current game.");
  btnConcede.setFocusable(false);
  btnConcede.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      if (evt.getButton() == MouseEvent.BUTTON1) {
        btnConcedeActionPerformed(null);
      }
    }
  }
);
  KeyStroke ks2=KeyStroke.getKeyStroke(KeyEvent.VK_F2,0);
  this.getInputMap(c).put(ks2,"F2_PRESS");
  this.getActionMap().put("F2_PRESS",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      if (feedbackPanel != null) {
        feedbackPanel.pressOKYesOrDone();
      }
    }
  }
);
  KeyStroke ksAltE=KeyStroke.getKeyStroke(KeyEvent.VK_E,InputEvent.ALT_MASK);
  this.getInputMap(c).put(ksAltE,"ENLARGE");
  this.getActionMap().put("ENLARGE",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      ActionCallback callback=Plugins.getInstance().getActionCallback();
      ((MageActionCallback)callback).enlargeCard(EnlargeMode.NORMAL);
    }
  }
);
  KeyStroke ksAltS=KeyStroke.getKeyStroke(KeyEvent.VK_S,InputEvent.ALT_MASK);
  this.getInputMap(c).put(ksAltS,"ENLARGE_SOURCE");
  this.getActionMap().put("ENLARGE_SOURCE",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      ActionCallback callback=Plugins.getInstance().getActionCallback();
      ((MageActionCallback)callback).enlargeCard(EnlargeMode.ALTERNATE);
    }
  }
);
  KeyStroke ksAltD=KeyStroke.getKeyStroke(KeyEvent.VK_D,InputEvent.ALT_MASK);
  this.getInputMap(c).put(ksAltD,"BIG_IMAGE");
  this.getActionMap().put("BIG_IMAGE",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      imagePanelState=!imagePanelState;
      if (!imagePanelState) {
        jSplitPane0.resetToPreferredSizes();
        jSplitPane0.setDividerLocation(jSplitPane0.getSize().width - jSplitPane0.getInsets().right - jSplitPane0.getDividerSize()- 260);
      }
 else {
        jSplitPane0.setDividerLocation(1.0);
      }
    }
  }
);
  final BasicSplitPaneUI myUi=(BasicSplitPaneUI)jSplitPane0.getUI();
  final BasicSplitPaneDivider divider=myUi.getDivider();
  final JButton upArrowButton=(JButton)divider.getComponent(0);
  upArrowButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      PreferencesDialog.saveValue(PreferencesDialog.KEY_BIG_CARD_TOGGLED,"up");
    }
  }
);
  final JButton downArrowButton=(JButton)divider.getComponent(1);
  downArrowButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      PreferencesDialog.saveValue(PreferencesDialog.KEY_BIG_CARD_TOGGLED,"down");
    }
  }
);
  KeyStroke ksAltEReleased=KeyStroke.getKeyStroke(KeyEvent.VK_E,InputEvent.ALT_MASK,true);
  this.getInputMap(c).put(ksAltEReleased,"ENLARGE_RELEASE");
  KeyStroke ksAltSReleased=KeyStroke.getKeyStroke(KeyEvent.VK_S,InputEvent.ALT_MASK,true);
  this.getInputMap(c).put(ksAltSReleased,"ENLARGE_RELEASE");
  this.getActionMap().put("ENLARGE_RELEASE",new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent actionEvent){
      ActionCallback callback=Plugins.getInstance().getActionCallback();
      ((MageActionCallback)callback).hideEnlargedCard();
    }
  }
);
  btnSwitchHands.setContentAreaFilled(false);
  btnSwitchHands.setBorder(new EmptyBorder(0,0,0,0));
  btnSwitchHands.setIcon(new ImageIcon(ImageManagerImpl.getInstance().getSwitchHandsButtonImage()));
  btnSwitchHands.setFocusable(false);
  btnSwitchHands.setToolTipText("Switch between your hand cards and hand cards of controlled players.");
  btnSwitchHands.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      if (evt.getButton() == MouseEvent.BUTTON1) {
        btnSwitchHandActionPerformed(null);
      }
    }
  }
);
  btnStopWatching.setContentAreaFilled(false);
  btnStopWatching.setBorder(new EmptyBorder(0,0,0,0));
  btnStopWatching.setIcon(new ImageIcon(ImageManagerImpl.getInstance().getStopWatchButtonImage()));
  btnStopWatching.setFocusable(false);
  btnStopWatching.setToolTipText("Stop watching this game.");
  btnStopWatching.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      if (evt.getButton() == MouseEvent.BUTTON1) {
        btnStopWatchingActionPerformed(null);
      }
    }
  }
);
  stack.setPreferredSize(new java.awt.Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight + 25));
  stack.setBackgroundColor(new Color(0,0,0,0));
  btnStopReplay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/control_stop.png")));
  btnStopReplay.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnStopReplayActionPerformed(evt);
    }
  }
);
  btnNextPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/control_stop_right.png")));
  btnNextPlay.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnNextPlayActionPerformed(evt);
    }
  }
);
  btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/control_right.png")));
  btnPlay.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnPlayActionPerformed(evt);
    }
  }
);
  btnSkipForward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/control_double_stop_right.png")));
  btnSkipForward.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnSkipForwardActionPerformed(evt);
    }
  }
);
  btnPreviousPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/buttons/control_stop_left.png")));
  btnPreviousPlay.addActionListener(new java.awt.event.ActionListener(){
    @Override public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnPreviousPlayActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout gl_pnlReplay=new javax.swing.GroupLayout(pnlReplay);
  pnlReplay.setLayout(gl_pnlReplay);
  gl_pnlReplay.setHorizontalGroup(gl_pnlReplay.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlReplay.createSequentialGroup().addComponent(btnPreviousPlay,javax.swing.GroupLayout.PREFERRED_SIZE,41,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnPlay,javax.swing.GroupLayout.PREFERRED_SIZE,35,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(btnStopReplay,javax.swing.GroupLayout.PREFERRED_SIZE,38,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnNextPlay,javax.swing.GroupLayout.PREFERRED_SIZE,36,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnSkipForward,javax.swing.GroupLayout.PREFERRED_SIZE,39,javax.swing.GroupLayout.PREFERRED_SIZE)));
  gl_pnlReplay.setVerticalGroup(gl_pnlReplay.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(btnSkipForward,0,0,Short.MAX_VALUE).addComponent(btnNextPlay,0,0,Short.MAX_VALUE).addComponent(btnStopReplay,0,0,Short.MAX_VALUE).addComponent(btnPlay,0,0,Short.MAX_VALUE).addComponent(btnPreviousPlay,javax.swing.GroupLayout.PREFERRED_SIZE,31,Short.MAX_VALUE));
  javax.swing.GroupLayout gl_pnlShortCuts=new javax.swing.GroupLayout(pnlShortCuts);
  pnlShortCuts.setLayout(gl_pnlShortCuts);
  gl_pnlShortCuts.setHorizontalGroup(gl_pnlShortCuts.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(gl_pnlShortCuts.createSequentialGroup().addComponent(btnSkipToNextTurn).addComponent(btnSkipToEndTurn).addComponent(btnSkipToNextMain).addComponent(btnSkipToYourTurn).addComponent(btnSkipStack)).addGroup(gl_pnlShortCuts.createSequentialGroup().addComponent(btnSwitchHands).addComponent(btnCancelSkip).addComponent(btnConcede).addComponent(btnStopWatching)).addGroup(gl_pnlShortCuts.createSequentialGroup().addContainerGap().addComponent(pnlReplay,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(51,Short.MAX_VALUE)));
  gl_pnlShortCuts.setVerticalGroup(gl_pnlShortCuts.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(gl_pnlShortCuts.createSequentialGroup().addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,164,Short.MAX_VALUE).addComponent(pnlReplay,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(gl_pnlShortCuts.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(btnSkipToNextTurn).addComponent(btnSkipToEndTurn).addComponent(btnSkipToNextMain).addComponent(btnSkipToYourTurn).addComponent(btnSkipStack)).addGroup(gl_pnlShortCuts.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(btnSwitchHands).addComponent(btnCancelSkip).addComponent(btnConcede).addComponent(btnStopWatching))));
  pnlBattlefield.setLayout(new java.awt.GridBagLayout());
  jPhases=new JPanel();
  jPhases.setBackground(new Color(0,0,0,0));
  jPhases.setLayout(null);
  jPhases.setPreferredSize(new Dimension(X_PHASE_WIDTH,435));
  MouseAdapter phasesMouseAdapter=new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent evt){
      mouseClickPhaseBar(evt);
    }
  }
;
  String[] phases={"Untap","Upkeep","Draw","Main1","Combat_Start","Combat_Attack","Combat_Block","Combat_Damage","Combat_End","Main2","Cleanup","Next_Turn"};
  for (  String name : phases) {
    createPhaseButton(name,phasesMouseAdapter);
  }
  int i=0;
  for (  String name : hoverButtons.keySet()) {
    HoverButton hoverButton=hoverButtons.get(name);
    hoverButton.setAlignmentX(LEFT_ALIGNMENT);
    hoverButton.setBounds(X_PHASE_WIDTH - 36,i * 36,36,36);
    jPhases.add(hoverButton);
    i++;
  }
  jPhases.addMouseListener(phasesMouseAdapter);
  pnlReplay.setOpaque(false);
  HelperPanel helper=new HelperPanel();
  helper.setPreferredSize(new Dimension(100,90));
  feedbackPanel.setHelperPanel(helper);
  jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
  jSplitPane2.setResizeWeight(0.5);
  jSplitPane2.setLeftComponent(userChatPanel);
  jSplitPane2.setBottomComponent(gameChatPanel);
  phasesContainer=new JPanel();
  phasesContainer.setLayout(new RelativeLayout(RelativeLayout.Y_AXIS));
  phasesContainer.setBackground(new Color(0,0,0,0));
  Float ratio=(float)1;
  JPanel empty1=new JPanel();
  empty1.setBackground(new Color(0,0,0,0));
  phasesContainer.add(empty1,ratio);
  phasesContainer.add(jPhases);
  phasesBottomPanel=new JPanel();
  phasesBottomPanel.setBackground(Color.LIGHT_GRAY);
  phasesBottomPanel.setBorder(new LineBorder(Color.DARK_GRAY,2));
  phasesBottomPanel.add(txtPhasesBottomInfo);
  phasesContainer.add(phasesBottomPanel);
  javax.swing.GroupLayout gl_jPanel3=new javax.swing.GroupLayout(jPanel3);
  gl_jPanel3.setHorizontalGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addGroup(gl_jPanel3.createSequentialGroup().addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addGroup(gl_jPanel3.createSequentialGroup().addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addComponent(helper,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(handContainer,GroupLayout.DEFAULT_SIZE,GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addComponent(pnlShortCuts,400,400,400).addComponent(stack,400,400,400))).addGap(0).addGroup(gl_jPanel3.createSequentialGroup().addComponent(pnlBattlefield,GroupLayout.DEFAULT_SIZE,200,Short.MAX_VALUE).addComponent(phasesContainer,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)))));
  gl_jPanel3.setVerticalGroup(gl_jPanel3.createParallelGroup(Alignment.TRAILING).addGroup(gl_jPanel3.createSequentialGroup().addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addComponent(pnlBattlefield,GroupLayout.DEFAULT_SIZE,200,Short.MAX_VALUE).addComponent(phasesContainer,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addGroup(gl_jPanel3.createParallelGroup(Alignment.LEADING).addGroup(gl_jPanel3.createSequentialGroup().addGap(2).addComponent(pnlShortCuts,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addComponent(stack,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)).addGroup(gl_jPanel3.createSequentialGroup().addComponent(helper,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE).addComponent(handContainer,GroupLayout.PREFERRED_SIZE,GroupLayout.DEFAULT_SIZE,GroupLayout.PREFERRED_SIZE)))));
  jPanel3.setLayout(gl_jPanel3);
  jSplitPane1.setLeftComponent(jPanel3);
  jSplitPane1.setRightComponent(jSplitPane2);
  GridBagLayout gbl=new GridBagLayout();
  jPanel2.setLayout(gbl);
  GridBagConstraints gbc=new GridBagConstraints();
  gbc.fill=GridBagConstraints.BOTH;
  gbc.gridx=0;
  gbc.gridy=0;
  gbc.gridwidth=1;
  gbc.gridheight=4;
  gbc.weightx=1.0;
  gbc.weighty=1.0;
  gbl.setConstraints(bigCard,gbc);
  jPanel2.add(bigCard);
  jPanel2.setOpaque(false);
  jSplitPane0.setLeftComponent(jSplitPane1);
  jSplitPane0.setRightComponent(jPanel2);
  javax.swing.GroupLayout layout=new javax.swing.GroupLayout(this);
  this.setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane0,javax.swing.GroupLayout.DEFAULT_SIZE,1078,Short.MAX_VALUE));
  layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jSplitPane0,javax.swing.GroupLayout.DEFAULT_SIZE,798,Short.MAX_VALUE));
}
