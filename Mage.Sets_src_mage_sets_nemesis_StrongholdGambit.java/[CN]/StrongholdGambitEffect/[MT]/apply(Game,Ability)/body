{
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller != null && sourceObject != null) {
    Map<UUID,UUID> choosenCard=new LinkedHashMap<>();
    for (    UUID playerId : game.getState().getPlayerList(controller.getId())) {
      Player player=game.getPlayer(playerId);
      if (player != null && player.getHand().size() > 0) {
        TargetCardInHand target=new TargetCardInHand();
        if (player.choose(Outcome.Benefit,target,source.getSourceId(),game)) {
          choosenCard.put(playerId,target.getFirstTarget());
        }
      }
    }
    int lowestCMC=Integer.MAX_VALUE;
    for (    UUID playerId : game.getState().getPlayerList(controller.getId())) {
      Player player=game.getPlayer(playerId);
      if (player != null && choosenCard.containsKey(playerId)) {
        Card card=game.getCard(choosenCard.get(playerId));
        if (card != null) {
          Cards cardsToReveal=new CardsImpl(card);
          player.revealCards(sourceObject.getIdName() + " (" + player.getName()+ ")",cardsToReveal,game);
          if (card.getCardType().contains(CardType.CREATURE) && lowestCMC > card.getConvertedManaCost()) {
            lowestCMC=card.getConvertedManaCost();
          }
        }
      }
    }
    if (lowestCMC < Integer.MAX_VALUE) {
      Cards creaturesToBattlefield=new CardsImpl();
      for (      UUID playerId : game.getState().getPlayerList(controller.getId())) {
        Player player=game.getPlayer(playerId);
        if (player != null && choosenCard.containsKey(playerId)) {
          Card card=game.getCard(choosenCard.get(playerId));
          if (card != null) {
            if (card.getCardType().contains(CardType.CREATURE) && lowestCMC == card.getConvertedManaCost()) {
              creaturesToBattlefield.add(card);
            }
          }
        }
      }
      controller.moveCards(creaturesToBattlefield.getCards(game),Zone.BATTLEFIELD,source,game,false,false,true,null);
    }
    return true;
  }
  return false;
}
