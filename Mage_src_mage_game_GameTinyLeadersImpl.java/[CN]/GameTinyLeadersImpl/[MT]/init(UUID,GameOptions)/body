{
  Ability ability=new SimpleStaticAbility(Zone.COMMAND,new InfoEffect("Commander effects"));
  for (  UUID playerId : state.getPlayerList(startingPlayerId)) {
    Player player=getPlayer(playerId);
    if (player != null) {
      if (player.getSideboard().size() > 0) {
        CardInfo cardInfo=CardRepository.instance.findCard(player.getMatchPlayer().getDeck().getName());
        if (cardInfo != null) {
          Card commander=cardInfo.getCard();
          Set<Card> cards=new HashSet<>();
          cards.add(commander);
          this.loadCards(cards,playerId);
          if (commander != null) {
            player.setCommanderId(commander.getId());
            commander.moveToZone(Zone.COMMAND,null,this,true);
            ability.addEffect(new CommanderReplacementEffect(commander.getId(),alsoLibrary));
            ability.addEffect(new CommanderCostModification(commander.getId()));
            ability.addEffect(new CommanderManaReplacementEffect(player.getId(),CardUtil.getColorIdentity(commander)));
            getState().setValue(commander.getId() + "_castCount",0);
          }
        }
      }
    }
  }
  this.getState().addAbility(ability,null);
  super.init(choosingPlayerId,gameOptions);
  if (startingPlayerSkipsDraw) {
    state.getTurnMods().add(new TurnMod(startingPlayerId,PhaseStep.DRAW));
  }
}
