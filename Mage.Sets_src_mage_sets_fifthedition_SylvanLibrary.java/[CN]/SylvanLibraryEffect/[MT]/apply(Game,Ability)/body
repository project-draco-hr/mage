{
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    controller.drawCards(2,game);
    CardsDrawnThisTurnWatcher watcher=(CardsDrawnThisTurnWatcher)game.getState().getWatchers().get("CardsDrawnThisTurnWatcher",source.getControllerId());
    if (watcher != null) {
      Cards cards=new CardsImpl();
      for (      UUID cardId : controller.getHand()) {
        if (watcher.getCardsDrawnThisTurn().contains(cardId)) {
          Card card=game.getCard(cardId);
          if (card != null) {
            cards.add(card);
          }
        }
      }
      int numberOfTargets=Math.min(2,cards.size());
      if (numberOfTargets > 0) {
        TargetCardInHand target=new TargetCardInHand(numberOfTargets,new FilterCard(numberOfTargets + " cards of cards drawn this turn"));
        controller.chooseTarget(outcome,cards,target,source,game);
        Cards cardsPutBack=new CardsImpl();
        for (        UUID cardId : target.getTargets()) {
          Card card=cards.get(cardId,game);
          if (card != null) {
            if (controller.canPayLifeCost() && controller.getLife() >= 4 && controller.chooseUse(outcome,"Pay 4 life for " + card.getLogName() + "? (Otherwise it's put on top of your library)",source,game)) {
              controller.loseLife(4,game);
              game.informPlayers(controller.getLogName() + " pays 4 life to keep a card on hand");
            }
 else {
              cardsPutBack.add(card);
            }
          }
        }
        int numberOfCardsToPutBack=cardsPutBack.size();
        if (numberOfCardsToPutBack > 1) {
          TargetCard target2=new TargetCard(Zone.PICK,new FilterCard("card to put on the top of your library (last chosen will be on top)"));
          while (controller.canRespond() && cardsPutBack.size() > 1) {
            controller.choose(Outcome.Benefit,cardsPutBack,target2,game);
            Card card=cardsPutBack.get(target2.getFirstTarget(),game);
            if (card != null) {
              cardsPutBack.remove(card);
              card.moveToZone(Zone.LIBRARY,source.getSourceId(),game,true);
            }
            target2.clearChosen();
          }
        }
        if (cardsPutBack.size() == 1) {
          Card card=cardsPutBack.get(cardsPutBack.iterator().next(),game);
          card.moveToZone(Zone.LIBRARY,source.getSourceId(),game,true);
        }
        if (numberOfCardsToPutBack > 0) {
          game.informPlayers(controller.getLogName() + " puts " + numberOfCardsToPutBack+ " card(s) back to library");
        }
      }
    }
    return true;
  }
  return false;
}
