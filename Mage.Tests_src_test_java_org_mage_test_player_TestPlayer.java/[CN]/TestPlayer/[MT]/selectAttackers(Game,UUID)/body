{
  UUID defenderId=null;
  for (  PlayerAction action : actions) {
    if (action.getTurnNum() == game.getTurnNum() && action.getAction().startsWith("attack:")) {
      for (      UUID uuid : game.getCombat().getDefenders()) {
        Player defender=game.getPlayer(uuid);
        if (defender != null) {
          defenderId=uuid;
        }
      }
      String command=action.getAction();
      command=command.substring(command.indexOf("attack:") + 7);
      String[] groups=command.split(";");
      for (int i=1; i < groups.length; i++) {
        String group=groups[i];
        if (group.startsWith("planeswalker=")) {
          String planeswalkerName=group.substring(group.indexOf("planeswalker=") + 13);
          for (          Permanent permanent : game.getBattlefield().getAllActivePermanents(new FilterPlaneswalkerPermanent(),game)) {
            if (permanent.getLogName().equals(planeswalkerName)) {
              defenderId=permanent.getId();
            }
          }
        }
      }
      FilterCreatureForCombat filter=new FilterCreatureForCombat();
      filter.add(new NamePredicate(groups[0]));
      filter.add(Predicates.not(new AttackingPredicate()));
      Permanent attacker=findPermanent(filter,playerId,game);
      if (attacker != null && attacker.canAttack(defenderId,game)) {
        this.declareAttacker(attacker.getId(),defenderId,game,false);
      }
    }
  }
}
