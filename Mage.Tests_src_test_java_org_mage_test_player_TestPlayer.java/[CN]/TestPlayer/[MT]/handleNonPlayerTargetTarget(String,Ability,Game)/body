{
  boolean result=true;
  if (target == null) {
    return true;
  }
  String[] targetList=target.split("\\^");
  int index=0;
  int targetsSet=0;
  for (  String targetName : targetList) {
    if (targetName.startsWith("mode=")) {
      int modeNr=Integer.parseInt(targetName.substring(5,6));
      if (modeNr == 0 || modeNr > ability.getModes().size()) {
        throw new UnsupportedOperationException("Given mode number (" + modeNr + ") not available for "+ ability.toString());
      }
      int modeCounter=1;
      for (      Mode mode : ability.getModes().values()) {
        if (modeCounter == modeNr) {
          ability.getModes().setMode(mode);
          index=0;
          break;
        }
        modeCounter++;
      }
      targetName=targetName.substring(6);
    }
    if (ability.getTargets().size() == 0) {
      throw new AssertionError("Ability has no targets. " + ability.toString());
    }
    if (index >= ability.getTargets().size()) {
      break;
    }
    Target currentTarget=ability.getTargets().get(index);
    if (targetName.startsWith("targetPlayer=")) {
      target=targetName.substring(targetName.indexOf("targetPlayer=") + 13);
      for (      Player player : game.getPlayers().values()) {
        if (player.getName().equals(target)) {
          currentTarget.addTarget(player.getId(),ability,game);
          index++;
          targetsSet++;
          break;
        }
      }
    }
 else {
      for (      UUID id : currentTarget.possibleTargets(ability.getSourceId(),ability.getControllerId(),game)) {
        MageObject object=game.getObject(id);
        if (object != null && ((!targetName.isEmpty() && object.getName().startsWith(targetName)) || (targetName.isEmpty() && object.getName().isEmpty()))) {
          if (currentTarget.getNumberOfTargets() == 1) {
            currentTarget.clearChosen();
          }
          if (currentTarget instanceof TargetCreaturePermanentAmount) {
            TargetCreaturePermanentAmount targetAmount=(TargetCreaturePermanentAmount)currentTarget;
            targetAmount.setAmount(ability,game);
            int amount=targetAmount.getAmountRemaining();
            targetAmount.addTarget(id,amount,ability,game);
            targetsSet++;
          }
 else {
            currentTarget.addTarget(id,ability,game);
            targetsSet++;
          }
          if (currentTarget.getTargets().size() == currentTarget.getMaxNumberOfTargets()) {
            index++;
          }
          break;
        }
      }
    }
  }
  if (targetsSet != targetList.length) {
    result=false;
  }
  return result;
}
