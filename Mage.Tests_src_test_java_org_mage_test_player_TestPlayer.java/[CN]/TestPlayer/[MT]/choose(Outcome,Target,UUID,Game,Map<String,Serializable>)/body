{
  if (!choices.isEmpty()) {
    Ability source=null;
    StackObject stackObject=game.getStack().getStackObject(sourceId);
    if (stackObject != null) {
      source=stackObject.getStackAbility();
    }
    if ((target instanceof TargetPermanent) || (target instanceof TargetPermanentOrPlayer)) {
      FilterPermanent filterPermanent;
      if (target instanceof TargetPermanentOrPlayer) {
        filterPermanent=((TargetPermanentOrPlayer)target).getFilterPermanent();
      }
 else {
        filterPermanent=((TargetPermanent)target).getFilter();
      }
      for (      String choose2 : choices) {
        String[] targetList=choose2.split("\\^");
        boolean targetFound=false;
        for (        String targetName : targetList) {
          boolean originOnly=false;
          boolean copyOnly=false;
          if (targetName.endsWith("]")) {
            if (targetName.endsWith("[no copy]")) {
              originOnly=true;
              targetName=targetName.substring(0,targetName.length() - 9);
            }
            if (targetName.endsWith("[only copy]")) {
              copyOnly=true;
              targetName=targetName.substring(0,targetName.length() - 11);
            }
          }
          for (          Permanent permanent : game.getBattlefield().getAllActivePermanents(filterPermanent,game)) {
            if (target.getTargets().contains(permanent.getId())) {
              continue;
            }
            if (permanent.getName().equals(targetName)) {
              if (target.isNotTarget() || ((TargetPermanent)target).canTarget(computerPlayer.getId(),permanent.getId(),source,game)) {
                if ((permanent.isCopy() && !originOnly) || (!permanent.isCopy() && !copyOnly)) {
                  target.add(permanent.getId(),game);
                  targetFound=true;
                  break;
                }
              }
            }
 else             if ((permanent.getName() + "-" + permanent.getExpansionSetCode()).equals(targetName)) {
              if (target.isNotTarget() || ((TargetPermanent)target).canTarget(computerPlayer.getId(),permanent.getId(),source,game)) {
                if ((permanent.isCopy() && !originOnly) || (!permanent.isCopy() && !copyOnly)) {
                  target.add(permanent.getId(),game);
                  targetFound=true;
                  break;
                }
              }
            }
          }
        }
        if (targetFound) {
          choices.remove(choose2);
          return true;
        }
      }
    }
    if (target instanceof TargetPlayer) {
      for (      Player player : game.getPlayers().values()) {
        for (        String choose2 : choices) {
          if (player.getName().equals(choose2)) {
            if (((TargetPlayer)target).canTarget(computerPlayer.getId(),player.getId(),null,game) && !target.getTargets().contains(player.getId())) {
              target.add(player.getId(),game);
              choices.remove(choose2);
              return true;
            }
          }
        }
      }
    }
    if (target instanceof TargetCard) {
      TargetCard targetCard=((TargetCard)target);
      Set<UUID> possibleTargets=targetCard.possibleTargets(sourceId,target.getTargetController() == null ? getId() : target.getTargetController(),game);
      for (      String choose2 : choices) {
        String[] targetList=choose2.split("\\^");
        boolean targetFound=false;
        Choice:         for (        String targetName : targetList) {
          for (          UUID targetId : possibleTargets) {
            MageObject targetObject=game.getObject(targetId);
            if (targetObject != null) {
              if (targetObject.getName().equals(targetName)) {
                if (targetCard.canTarget(targetObject.getId(),game)) {
                  if (targetCard.getTargets() != null && !targetCard.getTargets().contains(targetObject.getId())) {
                    targetCard.add(targetObject.getId(),game);
                    targetFound=true;
                    if (target.getTargets().size() >= target.getMaxNumberOfTargets()) {
                      break Choice;
                    }
                  }
                }
              }
            }
          }
        }
        if (targetFound && targetCard.isChosen()) {
          choices.remove(choose2);
          return true;
        }
      }
    }
    if (target instanceof TargetSource) {
      Set<UUID> possibleTargets;
      TargetSource t=((TargetSource)target);
      possibleTargets=t.possibleTargets(sourceId,computerPlayer.getId(),game);
      for (      String choose2 : choices) {
        String[] targetList=choose2.split("\\^");
        boolean targetFound=false;
        for (        String targetName : targetList) {
          for (          UUID targetId : possibleTargets) {
            MageObject targetObject=game.getObject(targetId);
            if (targetObject != null) {
              if (targetObject.getName().equals(targetName)) {
                List<UUID> alreadyTargetted=target.getTargets();
                if (t.canTarget(targetObject.getId(),game)) {
                  if (alreadyTargetted != null && !alreadyTargetted.contains(targetObject.getId())) {
                    target.add(targetObject.getId(),game);
                    choices.remove(choose2);
                    targetFound=true;
                  }
                }
              }
            }
            if (targetFound) {
              choices.remove(choose2);
              return true;
            }
          }
        }
      }
    }
  }
  return computerPlayer.choose(outcome,target,sourceId,game,options);
}
