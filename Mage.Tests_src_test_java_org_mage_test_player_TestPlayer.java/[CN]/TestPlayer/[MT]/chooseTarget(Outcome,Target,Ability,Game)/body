{
  if (!targets.isEmpty()) {
    UUID abilityControllerId=computerPlayer.getId();
    if (target.getTargetController() != null && target.getAbilityController() != null) {
      abilityControllerId=target.getAbilityController();
    }
    if ((target instanceof TargetPermanent) || (target instanceof TargetPermanentOrPlayer)) {
      for (      String targetDefinition : targets) {
        String[] targetList=targetDefinition.split("\\^");
        boolean targetFound=false;
        for (        String targetName : targetList) {
          boolean originOnly=false;
          boolean copyOnly=false;
          if (targetName.endsWith("]")) {
            if (targetName.endsWith("[no copy]")) {
              originOnly=true;
              targetName=targetName.substring(0,targetName.length() - 9);
            }
            if (targetName.endsWith("[only copy]")) {
              copyOnly=true;
              targetName=targetName.substring(0,targetName.length() - 11);
            }
          }
          for (          Permanent permanent : game.getBattlefield().getAllActivePermanents((FilterPermanent)target.getFilter(),game)) {
            if (permanent.getName().equals(targetName) || (permanent.getName() + "-" + permanent.getExpansionSetCode()).equals(targetName)) {
              if (((TargetPermanent)target).canTarget(abilityControllerId,permanent.getId(),source,game) && !target.getTargets().contains(permanent.getId())) {
                if ((permanent.isCopy() && !originOnly) || (!permanent.isCopy() && !copyOnly)) {
                  target.add(permanent.getId(),game);
                  targetFound=true;
                  break;
                }
              }
            }
          }
        }
        if (targetFound) {
          targets.remove(targetDefinition);
          return true;
        }
      }
    }
    if (target instanceof TargetPlayer) {
      for (      String targetDefinition : targets) {
        if (targetDefinition.startsWith("targetPlayer=")) {
          String playerName=targetDefinition.substring(targetDefinition.indexOf("targetPlayer=") + 13);
          for (          Player player : game.getPlayers().values()) {
            if (player.getName().equals(playerName) && ((TargetPlayer)target).canTarget(computerPlayer.getId(),player.getId(),source,game)) {
              target.add(player.getId(),game);
              return true;
            }
          }
        }
      }
    }
    if (target instanceof TargetCardInHand) {
      for (      String targetDefinition : targets) {
        String[] targetList=targetDefinition.split("\\^");
        boolean targetFound=false;
        for (        String targetName : targetList) {
          for (          Card card : computerPlayer.getHand().getCards(((TargetCardInHand)target).getFilter(),game)) {
            if (card.getName().equals(targetName) || (card.getName() + "-" + card.getExpansionSetCode()).equals(targetName)) {
              if (((TargetCardInHand)target).canTarget(abilityControllerId,card.getId(),source,game) && !target.getTargets().contains(card.getId())) {
                target.add(card.getId(),game);
                targetFound=true;
                break;
              }
            }
          }
        }
        if (targetFound) {
          targets.remove(targetDefinition);
          return true;
        }
      }
    }
    if (target instanceof TargetCardInYourGraveyard) {
      for (      String targetDefinition : targets) {
        String[] targetList=targetDefinition.split("\\^");
        boolean targetFound=false;
        for (        String targetName : targetList) {
          for (          Card card : computerPlayer.getGraveyard().getCards(((TargetCardInYourGraveyard)target).getFilter(),game)) {
            if (card.getName().equals(targetName) || (card.getName() + "-" + card.getExpansionSetCode()).equals(targetName)) {
              if (((TargetCardInYourGraveyard)target).canTarget(abilityControllerId,card.getId(),source,game) && !target.getTargets().contains(card.getId())) {
                target.add(card.getId(),game);
                targetFound=true;
                break;
              }
            }
          }
        }
        if (targetFound) {
          targets.remove(targetDefinition);
          return true;
        }
      }
    }
    if (target instanceof TargetCardInOpponentsGraveyard) {
      for (      String targetDefinition : targets) {
        String[] targetList=targetDefinition.split("\\^");
        boolean targetFound=false;
        for (        String targetName : targetList) {
          IterateOpponentsGraveyards:           for (          UUID opponentId : game.getState().getPlayersInRange(getId(),game)) {
            if (computerPlayer.hasOpponent(opponentId,game)) {
              Player opponent=game.getPlayer(opponentId);
              for (              Card card : opponent.getGraveyard().getCards(((TargetCardInOpponentsGraveyard)target).getFilter(),game)) {
                if (card.getName().equals(targetName) || (card.getName() + "-" + card.getExpansionSetCode()).equals(targetName)) {
                  if (((TargetCardInOpponentsGraveyard)target).canTarget(abilityControllerId,card.getId(),source,game) && !target.getTargets().contains(card.getId())) {
                    target.add(card.getId(),game);
                    targetFound=true;
                    break IterateOpponentsGraveyards;
                  }
                }
              }
            }
          }
        }
        if (targetFound) {
          targets.remove(targetDefinition);
          return true;
        }
      }
    }
    if (target instanceof TargetSpell) {
      for (      String targetDefinition : targets) {
        String[] targetList=targetDefinition.split("\\^");
        boolean targetFound=false;
        for (        String targetName : targetList) {
          for (          StackObject stackObject : game.getStack()) {
            if (stackObject.getName().equals(targetName)) {
              target.add(stackObject.getId(),game);
              targetFound=true;
              break;
            }
          }
        }
        if (targetFound) {
          targets.remove(targetDefinition);
          return true;
        }
      }
    }
  }
  return computerPlayer.chooseTarget(outcome,target,source,game);
}
