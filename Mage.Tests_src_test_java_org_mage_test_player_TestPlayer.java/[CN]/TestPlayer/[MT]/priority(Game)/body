{
  int numberOfActions=actions.size();
  List<PlayerAction> tempActions=new ArrayList<>();
  tempActions.addAll(actions);
  for (  PlayerAction action : tempActions) {
    if (action.getTurnNum() == game.getTurnNum() && action.getStep() == game.getStep().getType()) {
      if (action.getAction().startsWith("activate:")) {
        String command=action.getAction();
        command=command.substring(command.indexOf("activate:") + 9);
        groupsForTargetHandling=null;
        String[] groups=command.split("\\$");
        if (groups.length > 2 && !checkExecuteCondition(groups,game)) {
          break;
        }
        for (        Ability ability : computerPlayer.getPlayable(game,true)) {
          if (ability.toString().startsWith(groups[0])) {
            int bookmark=game.bookmarkState();
            Ability newAbility=ability.copy();
            if (groups.length > 1 && !groups[1].equals("target=NO_TARGET")) {
              groupsForTargetHandling=groups;
            }
            if (computerPlayer.activateAbility((ActivatedAbility)newAbility,game)) {
              actions.remove(action);
              groupsForTargetHandling=null;
              return true;
            }
 else {
              game.restoreState(bookmark,ability.getRule());
            }
          }
        }
      }
 else       if (action.getAction().startsWith("manaActivate:")) {
        String command=action.getAction();
        command=command.substring(command.indexOf("manaActivate:") + 13);
        String[] groups=command.split("\\$");
        List<MageObject> manaObjects=computerPlayer.getAvailableManaProducers(game);
        for (        MageObject mageObject : manaObjects) {
          if (mageObject instanceof Permanent) {
            for (            Ability manaAbility : ((Permanent)mageObject).getAbilities(game).getAvailableManaAbilities(Zone.BATTLEFIELD,game)) {
              if (manaAbility.toString().startsWith(groups[0])) {
                Ability newManaAbility=manaAbility.copy();
                computerPlayer.activateAbility((ActivatedAbility)newManaAbility,game);
                actions.remove(action);
                return true;
              }
            }
          }
 else           if (mageObject instanceof Card) {
            for (            Ability manaAbility : ((Card)mageObject).getAbilities(game).getAvailableManaAbilities(game.getState().getZone(mageObject.getId()),game)) {
              if (manaAbility.toString().startsWith(groups[0])) {
                Ability newManaAbility=manaAbility.copy();
                computerPlayer.activateAbility((ActivatedAbility)newManaAbility,game);
                actions.remove(action);
                return true;
              }
            }
          }
 else {
            for (            Ability manaAbility : mageObject.getAbilities().getAvailableManaAbilities(game.getState().getZone(mageObject.getId()),game)) {
              if (manaAbility.toString().startsWith(groups[0])) {
                Ability newManaAbility=manaAbility.copy();
                computerPlayer.activateAbility((ActivatedAbility)newManaAbility,game);
                actions.remove(action);
                return true;
              }
            }
          }
        }
        List<Permanent> manaPermsWithCost=computerPlayer.getAvailableManaProducersWithCost(game);
        for (        Permanent perm : manaPermsWithCost) {
          for (          ManaAbility manaAbility : perm.getAbilities().getAvailableManaAbilities(Zone.BATTLEFIELD,game)) {
            if (manaAbility.toString().startsWith(groups[0]) && manaAbility.canActivate(computerPlayer.getId(),game)) {
              Ability newManaAbility=manaAbility.copy();
              computerPlayer.activateAbility((ActivatedAbility)newManaAbility,game);
              actions.remove(action);
              return true;
            }
          }
        }
      }
 else       if (action.getAction().startsWith("addCounters:")) {
        String command=action.getAction();
        command=command.substring(command.indexOf("addCounters:") + 12);
        String[] groups=command.split("\\$");
        for (        Permanent permanent : game.getBattlefield().getAllActivePermanents()) {
          if (permanent.getName().equals(groups[0])) {
            Counter counter=new Counter(groups[1],Integer.parseInt(groups[2]));
            permanent.addCounters(counter,game);
            break;
          }
        }
      }
 else       if (action.getAction().startsWith("playerAction:")) {
        String command=action.getAction();
        command=command.substring(command.indexOf("playerAction:") + 13);
        groupsForTargetHandling=null;
        String[] groups=command.split("\\$");
        if (groups.length > 0) {
          if (groups[0].equals("Rollback")) {
            if (groups.length > 1 && groups[1].startsWith("turns=")) {
              int turns=Integer.parseInt(groups[1].substring(6));
              game.rollbackTurns(turns);
              actions.remove(action);
              return true;
            }
          }
        }
      }
    }
  }
  if (AIPlayer) {
    computerPlayer.priority(game);
  }
 else {
    computerPlayer.pass(game);
  }
  if (numberOfActions == actions.size()) {
    foundNoAction++;
    if (foundNoAction > maxCallsWithoutAction) {
      throw new AssertionError("More priority calls to " + getName() + " and doing no action than allowed ("+ maxCallsWithoutAction+ ")");
    }
  }
 else {
    foundNoAction=0;
  }
  return false;
}
