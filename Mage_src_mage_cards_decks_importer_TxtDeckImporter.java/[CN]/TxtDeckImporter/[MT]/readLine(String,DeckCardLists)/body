{
  if (line.toLowerCase().contains("sideboard")) {
    sideboard=true;
    return;
  }
  if (line.startsWith("//")) {
    return;
  }
  if (line.length() == 0) {
    emptyLinesInARow++;
    if (emptyLinesInARow > 1) {
      sideboard=true;
    }
    return;
  }
 else {
    emptyLinesInARow=0;
  }
  line=line.replace("\t"," ");
  int delim=line.indexOf(' ');
  if (delim < 0) {
    return;
  }
  String lineNum=line.substring(0,delim).trim();
  String lineName=line.substring(delim).replace("???","\'").trim();
  lineName=lineName.replace("&amp;","//").replace("?????","AE").replace("????","??").replace("??","u").replace("\"","'");
  if (lineName.contains("//") && !lineName.contains(" // ")) {
    lineName=lineName.replace("//"," // ");
  }
  if (lineName.contains(" / ")) {
    lineName=lineName.replace(" / "," // ");
  }
  if (IGNORE_NAMES.contains(lineName) || IGNORE_NAMES.contains(lineNum)) {
    return;
  }
  try {
    int num=Integer.parseInt(lineNum.replaceAll("\\D+",""));
    CardInfo cardInfo=CardRepository.instance.findPreferedCoreExpansionCard(lineName,true);
    if (cardInfo == null) {
      sbMessage.append("Could not find card: '").append(lineName).append("' at line ").append(lineCount).append("\n");
    }
 else {
      for (int i=0; i < num; i++) {
        if (!sideboard) {
          deckList.getCards().add(new DeckCardInfo(cardInfo.getName(),cardInfo.getCardNumber(),cardInfo.getSetCode()));
        }
 else {
          deckList.getSideboard().add(new DeckCardInfo(cardInfo.getName(),cardInfo.getCardNumber(),cardInfo.getSetCode()));
        }
      }
    }
  }
 catch (  NumberFormatException nfe) {
    sbMessage.append("Invalid number: ").append(lineNum).append(" at line ").append(lineCount).append("\n");
  }
}
