{
  Player controller=game.getPlayer(source.getControllerId());
  HashMap<UUID,Cards> cardsToDiscard=new HashMap<>();
  if (controller != null) {
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
switch (targetController) {
case NOT_YOU:
          if (playerId.equals(source.getControllerId())) {
            continue;
          }
        break;
case OPPONENT:
      if (!game.getOpponents(source.getControllerId()).contains(playerId)) {
        continue;
      }
    break;
}
int numberOfCardsToDiscard=Math.min(amount.calculate(game,source),player.getHand().size());
Cards cards=new CardsImpl();
if (randomDiscard) {
  while (player.isInGame() && cards.size() < numberOfCardsToDiscard) {
    Card card=player.getHand().getRandom(game);
    if (!cards.contains(card.getId())) {
      cards.add(card);
    }
  }
}
 else {
  Target target=new TargetDiscard(numberOfCardsToDiscard,numberOfCardsToDiscard,new FilterCard(),playerId);
  target.setRequired(true);
  player.chooseTarget(outcome,target,source,game);
  cards.addAll(target.getTargets());
}
cardsToDiscard.put(playerId,cards);
}
}
for (UUID playerId : controller.getInRange()) {
Player player=game.getPlayer(playerId);
if (player != null) {
Cards cardsPlayer=cardsToDiscard.get(playerId);
if (cardsPlayer != null) {
  for (  UUID cardId : cardsPlayer) {
    Card card=game.getCard(cardId);
    if (card != null) {
      player.discard(card,source,game);
    }
  }
}
}
}
}
return true;
}
