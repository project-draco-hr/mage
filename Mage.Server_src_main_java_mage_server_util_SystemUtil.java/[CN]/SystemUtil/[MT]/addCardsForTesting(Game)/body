{
  try {
    File f=new File(INIT_FILE_PATH);
    Pattern pattern=Pattern.compile("([a-zA-Z]+):([\\w]+):([a-zA-Z ,\\/\\-.!'\\d:]+?):(\\d+)");
    if (!f.exists()) {
      logger.warn("Couldn't find init file: " + INIT_FILE_PATH);
      return;
    }
    logger.info("Parsing init.txt... ");
    Scanner scanner=new Scanner(f);
    try {
      while (scanner.hasNextLine()) {
        String line=scanner.nextLine().trim();
        if (line.trim().isEmpty() || line.startsWith("#")) {
          continue;
        }
        Matcher m=pattern.matcher(line);
        if (!m.matches()) {
          logger.warn("Init string wasn't parsed: " + line);
          continue;
        }
        String zone=m.group(1);
        String nickname=m.group(2);
        Player player=findPlayer(game,nickname);
        if (player == null) {
          logger.warn("Was skipped: " + line);
          continue;
        }
        Zone gameZone;
        if ("hand".equalsIgnoreCase(zone)) {
          gameZone=Zone.HAND;
        }
 else         if ("battlefield".equalsIgnoreCase(zone)) {
          gameZone=Zone.BATTLEFIELD;
        }
 else         if ("graveyard".equalsIgnoreCase(zone)) {
          gameZone=Zone.GRAVEYARD;
        }
 else         if ("library".equalsIgnoreCase(zone)) {
          gameZone=Zone.LIBRARY;
        }
 else {
          continue;
        }
        String cardName=m.group(3);
        Integer amount=Integer.parseInt(m.group(4));
        List<CardInfo> cards=CardRepository.instance.findCards(cardName);
        if (cards.isEmpty()) {
          logger.warn("Couldn't find a card: " + cardName);
          continue;
        }
        Set<Card> cardsToLoad=new HashSet<>();
        for (int i=0; i < amount; i++) {
          CardInfo cardInfo=cards.get(RandomUtil.nextInt(cards.size()));
          Card card=cardInfo != null ? cardInfo.getCard() : null;
          if (card != null) {
            cardsToLoad.add(card);
          }
        }
        game.loadCards(cardsToLoad,player.getId());
        for (        Card card : cardsToLoad) {
          swapWithAnyCard(game,player,card,gameZone);
        }
      }
    }
  finally {
      scanner.close();
    }
  }
 catch (  Exception e) {
    logger.fatal("",e);
  }
}
