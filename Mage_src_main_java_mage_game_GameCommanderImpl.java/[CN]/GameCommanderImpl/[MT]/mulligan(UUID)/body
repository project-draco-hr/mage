{
  Player player=getPlayer(playerId);
  TargetCardInHand target=new TargetCardInHand(1,player.getHand().size(),new FilterCard("card to mulligan"));
  target.setNotTarget(true);
  target.setRequired(false);
  if (player.choose(Outcome.Exile,player.getHand(),target,this)) {
    int numCards=target.getTargets().size();
    for (    UUID uuid : target.getTargets()) {
      Card card=player.getHand().get(uuid,this);
      if (card != null) {
        if (!mulliganedCards.containsKey(playerId)) {
          mulliganedCards.put(playerId,new CardsImpl());
        }
        player.getHand().remove(card);
        getExile().add(card);
        getState().setZone(card.getId(),Zone.EXILED);
        card.setFaceDown(true,this);
        mulliganedCards.get(playerId).add(card);
      }
    }
    int deduction=1;
    if (freeMulligans > 0) {
      if (usedFreeMulligans != null && usedFreeMulligans.containsKey(player.getId())) {
        int used=usedFreeMulligans.get(player.getId());
        if (used < freeMulligans) {
          deduction=0;
          usedFreeMulligans.put(player.getId(),used + 1);
        }
      }
 else {
        deduction=0;
{
        }
        usedFreeMulligans.put(player.getId(),1);
      }
    }
    player.drawCards(numCards - deduction,this);
    fireInformEvent(new StringBuilder(player.getLogName()).append(" mulligans ").append(numCards).append(numCards == 1 ? " card" : " cards").append(deduction == 0 ? " for free and draws " : " down to ").append(Integer.toString(player.getHand().size())).append(player.getHand().size() <= 1 ? " card" : " cards").toString());
  }
}
