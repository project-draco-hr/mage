{
  Map<String,String> setLinks=new HashMap<>();
  try {
    String setNames=setsAliases.get(cardSet);
    String preferedLanguage=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_CARD_IMAGES_PREF_LANGUAGE,"en");
    for (    String setName : setNames.split("\\^")) {
      String URLSetName=URLEncoder.encode(setName,"UTF-8");
      int page=0;
      int firstMultiverseIdLastPage=0;
      Pages:       while (page < 999) {
        String searchUrl="http://gatherer.wizards.com/Pages/Search/Default.aspx?page=" + page + "&output=spoiler&method=visual&action=advanced&set=+[%22"+ URLSetName+ "%22]";
        Document doc=getDocument(searchUrl);
        Elements cardsImages=doc.select("img[src^=../../Handlers/]");
        if (cardsImages.isEmpty()) {
          break;
        }
        for (int i=0; i < cardsImages.size(); i++) {
          Integer multiverseId=Integer.parseInt(cardsImages.get(i).attr("src").replaceAll("[^\\d]",""));
          if (i == 0) {
            if (multiverseId == firstMultiverseIdLastPage) {
              break Pages;
            }
            firstMultiverseIdLastPage=multiverseId;
          }
          String cardName=normalizeName(cardsImages.get(i).attr("alt"));
          if (cardName != null && !cardName.isEmpty()) {
            if (cardName.equals("Forest") || cardName.equals("Swamp") || cardName.equals("Mountain")|| cardName.equals("Island")|| cardName.equals("Plains")) {
              setLinks.putAll(getLandVariations(multiverseId,cardName));
            }
 else {
              Integer preferedMultiverseId=getLocalizedMultiverseId(preferedLanguage,multiverseId);
              setLinks.put(cardName.toLowerCase(),generateLink(preferedMultiverseId));
            }
          }
        }
        page++;
      }
    }
  }
 catch (  IOException ex) {
    System.out.println("Exception when parsing the wizards page: " + ex.getMessage());
  }
  return setLinks;
}
