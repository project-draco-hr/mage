{
  int converted=card.getManaCost().convertedManaCost();
  final Map<String,Integer> singleCount=new HashMap<String,Integer>();
  int maxSingleCount=0;
  int multicolor=0;
  Set<String> colors=new HashSet<String>();
  for (  String symbol : card.getManaCost().getSymbols()) {
    int count=0;
    symbol=symbol.replace("{","").replace("}","");
    if (isColoredMana(symbol)) {
      for (      ColoredManaSymbol allowed : allowedColors) {
        if (symbol.contains(allowed.toString())) {
          count++;
        }
      }
      if (count == 0) {
        return -30;
      }
      if (!colors.contains(symbol)) {
        multicolor+=1;
        colors.add(symbol);
      }
      Integer typeCount=singleCount.get(symbol);
      if (typeCount == null) {
        typeCount=new Integer(0);
      }
      typeCount+=1;
      singleCount.put(symbol,typeCount);
      maxSingleCount=Math.max(maxSingleCount,typeCount);
    }
  }
  int multicolorBonus=multicolor > 1 ? 30 : 0;
  maxSingleCount=Math.min(maxSingleCount,SINGLE_PENALTY.length - 1);
  return 2 * converted + 3 * (10 - SINGLE_PENALTY[maxSingleCount]) + multicolorBonus;
}
