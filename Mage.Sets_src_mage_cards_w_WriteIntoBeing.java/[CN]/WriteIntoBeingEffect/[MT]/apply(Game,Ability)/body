{
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (sourceObject != null && controller != null) {
    Cards cards=new CardsImpl();
    cards.addAll(controller.getLibrary().getTopCards(game,2));
    controller.lookAtCards(sourceObject.getName(),cards,game);
    Card cardToManifest=null;
    if (cards.size() > 1) {
      TargetCard target=new TargetCard(Zone.LIBRARY,new FilterCard("card to manifest"));
      if (controller.chooseTarget(outcome,cards,target,source,game)) {
        cardToManifest=cards.get(target.getFirstTarget(),game);
      }
    }
 else {
      cardToManifest=cards.getRandom(game);
    }
    if (!controller.getLibrary().getFromTop(game).equals(cardToManifest)) {
      Card cardToPutBack=controller.getLibrary().removeFromTop(game);
      cardToManifest=controller.getLibrary().removeFromTop(game);
      controller.getLibrary().putOnTop(cardToPutBack,game);
      controller.getLibrary().putOnTop(cardToManifest,game);
    }
    new ManifestEffect(1).apply(game,source);
    if (controller.getLibrary().size() > 0) {
      Card cardToPutBack=controller.getLibrary().getFromTop(game);
      String position="on top";
      if (controller.chooseUse(Outcome.Detriment,"Put " + cardToPutBack.getName() + " on bottom of library?",source,game)) {
        cardToPutBack.moveToZone(Zone.LIBRARY,source.getSourceId(),game,false);
        position="on bottom";
      }
      game.informPlayers(sourceObject.getLogName() + ": " + controller.getLogName()+ " puts the other card "+ position+ " of his or her library");
    }
    return true;
  }
  return false;
}
