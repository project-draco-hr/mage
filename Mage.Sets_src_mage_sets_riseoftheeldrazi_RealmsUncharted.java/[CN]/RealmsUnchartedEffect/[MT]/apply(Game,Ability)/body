{
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (controller == null || sourceObject == null) {
    return false;
  }
  RealmsUnchartedTarget target=new RealmsUnchartedTarget();
  if (controller.searchLibrary(target,game)) {
    if (target.getTargets().size() > 0) {
      Cards cards=new CardsImpl();
      for (      UUID cardId : target.getTargets()) {
        Card card=controller.getLibrary().getCard(cardId,game);
        if (card != null) {
          cards.add(card);
        }
      }
      controller.revealCards(sourceObject.getName(),cards,game);
      CardsImpl cardsToKeep=new CardsImpl();
      if (cards.size() > 2) {
        cardsToKeep.addAll(cards);
        Player opponent;
        Set<UUID> opponents=game.getOpponents(controller.getId());
        if (opponents.size() == 1) {
          opponent=game.getPlayer(opponents.iterator().next());
        }
 else {
          Target targetOpponent=new TargetOpponent(true);
          controller.chooseTarget(Outcome.Detriment,targetOpponent,source,game);
          opponent=game.getPlayer(targetOpponent.getFirstTarget());
        }
        TargetCard targetDiscard=new TargetCard(2,Zone.LIBRARY,new FilterCard("cards to put in graveyard"));
        if (opponent != null && opponent.choose(Outcome.Discard,cards,targetDiscard,game)) {
          cardsToKeep.removeAll(targetDiscard.getTargets());
          cards.removeAll(cardsToKeep);
        }
      }
      controller.moveCards(cards,Zone.LIBRARY,Zone.GRAVEYARD,source,game);
      controller.moveCards(cardsToKeep,Zone.LIBRARY,Zone.HAND,source,game);
    }
    controller.shuffleLibrary(game);
    return true;
  }
  controller.shuffleLibrary(game);
  return false;
}
