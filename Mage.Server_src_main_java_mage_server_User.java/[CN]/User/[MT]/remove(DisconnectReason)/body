{
  LOGGER.trace("REMOVE " + getName() + " Draft sessions "+ draftSessions.size());
  for (  DraftSession draftSession : draftSessions.values()) {
    draftSession.setKilled();
  }
  draftSessions.clear();
  LOGGER.trace("REMOVE " + getName() + " Tournament sessions "+ userTournaments.size());
  for (  UUID tournamentId : userTournaments.values()) {
    TournamentManager.getInstance().quit(tournamentId,getId());
  }
  userTournaments.clear();
  LOGGER.trace("REMOVE " + getName() + " Tables "+ tables.size());
  for (  Entry<UUID,Table> entry : tables.entrySet()) {
    LOGGER.debug("-- leave tableId: " + entry.getValue().getId());
    TableManager.getInstance().leaveTable(userId,entry.getValue().getId());
  }
  tables.clear();
  LOGGER.trace("REMOVE " + getName() + " Game sessions: "+ gameSessions.size());
  for (  GameSessionPlayer gameSessionPlayer : gameSessions.values()) {
    LOGGER.debug("-- kill game session of gameId: " + gameSessionPlayer.getGameId());
    GameManager.getInstance().quitMatch(gameSessionPlayer.getGameId(),userId);
    gameSessionPlayer.quitGame();
  }
  gameSessions.clear();
  LOGGER.trace("REMOVE " + getName() + " watched Games "+ watchedGames.size());
  for (  UUID gameId : watchedGames) {
    GameManager.getInstance().stopWatching(gameId,userId);
  }
  watchedGames.clear();
  LOGGER.trace("REMOVE " + getName() + " Chats ");
  ChatManager.getInstance().removeUser(userId,reason);
}
