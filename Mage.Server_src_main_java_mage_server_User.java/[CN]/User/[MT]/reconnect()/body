{
  logger.trace(userName + " started reconnect");
  for (  Entry<UUID,Table> entry : tables.entrySet()) {
    ccJoinedTable(entry.getValue().getRoomId(),entry.getValue().getId(),entry.getValue().isTournament());
  }
  for (  Entry<UUID,UUID> entry : userTournaments.entrySet()) {
    TournamentController tournamentController=TournamentManager.getInstance().getTournamentController(entry.getValue());
    if (tournamentController != null) {
      ccTournamentStarted(entry.getValue(),entry.getKey());
      tournamentController.rejoin(entry.getKey());
    }
  }
  for (  Entry<UUID,GameSessionPlayer> entry : gameSessions.entrySet()) {
    ccGameStarted(entry.getValue().getGameId(),entry.getKey());
    entry.getValue().init();
    GameManager.getInstance().sendPlayerString(entry.getValue().getGameId(),userId,"");
  }
  for (  Entry<UUID,DraftSession> entry : draftSessions.entrySet()) {
    ccDraftStarted(entry.getValue().getDraftId(),entry.getKey());
    entry.getValue().init();
    entry.getValue().update();
  }
  for (  Entry<UUID,TournamentSession> entry : constructing.entrySet()) {
    entry.getValue().construct(0);
  }
  for (  Entry<UUID,Deck> entry : sideboarding.entrySet()) {
    TableController controller=TableManager.getInstance().getController(entry.getKey());
    ccSideboard(entry.getValue(),entry.getKey(),controller.getRemainingTime(),controller.getOptions().isLimited());
  }
  ServerMessagesUtil.getInstance().incReconnects();
  logger.trace(userName + " ended reconnect");
}
