{
  StringBuilder sb=new StringBuilder();
  String disconnectInfo="";
  if (!isConnected()) {
    disconnectInfo=new StringBuilder(" (discon. ").append(getDisconnectDuration()).append(")").toString();
  }
  int draft=0, match=0, sideboard=0, tournament=0, construct=0;
  for (  Map.Entry<UUID,Table> tableEntry : tables.entrySet()) {
    Table table=tableEntry.getValue();
    if (table.isTournament()) {
switch (table.getState()) {
case CONSTRUCTING:
        construct++;
      break;
case DRAFTING:
    draft++;
  break;
case DUELING:
tournament++;
break;
}
if (!isConnected()) {
table.getTournament().getPlayer(tableEntry.getKey()).setDisconnectInfo(disconnectInfo);
}
 else {
table.getTournament().getPlayer(tableEntry.getKey()).setDisconnectInfo("");
}
}
 else {
switch (table.getState()) {
case SIDEBOARDING:
sideboard++;
break;
case DUELING:
match++;
break;
}
}
}
if (match > 0) {
sb.append("MP: ").append(match).append(" ");
}
if (sideboard > 0) {
sb.append("MS: ").append(sideboard).append(" ");
}
if (draft > 0) {
sb.append("TD: ").append(draft).append(" ");
}
if (construct > 0) {
sb.append("TC: ").append(construct).append(" ");
}
if (tournament > 0) {
sb.append("TP: ").append(tournament).append(" ");
}
sb.append(disconnectInfo);
return sb.toString();
}
