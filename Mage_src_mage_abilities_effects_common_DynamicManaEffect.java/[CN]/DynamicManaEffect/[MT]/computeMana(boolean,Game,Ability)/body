{
  this.computedMana.clear();
  int count;
  if (netMana && netAmount != null) {
    count=netAmount.calculate(game,source,this);
  }
 else {
    count=amount.calculate(game,source,this);
  }
  if (mana.getBlack() > 0) {
    computedMana.setBlack(count);
  }
 else   if (mana.getBlue() > 0) {
    computedMana.setBlue(count);
  }
 else   if (mana.getGreen() > 0) {
    computedMana.setGreen(count);
  }
 else   if (mana.getRed() > 0) {
    computedMana.setRed(count);
  }
 else   if (mana.getWhite() > 0) {
    computedMana.setWhite(count);
  }
 else   if (mana.getAny() > 0) {
    if (netMana) {
      computedMana.setAny(count);
    }
 else {
      Player controller=game.getPlayer(source.getControllerId());
      if (controller != null) {
        ChoiceColor choiceColor=new ChoiceColor();
        for (int i=0; i < count; i++) {
          if (!choiceColor.isChosen()) {
            while (!controller.choose(Outcome.Benefit,choiceColor,game)) {
              if (!controller.isInGame()) {
                return computedMana;
              }
            }
          }
          if (choiceColor.getColor().isBlack()) {
            computedMana.addBlack();
          }
 else           if (choiceColor.getColor().isBlue()) {
            computedMana.addBlue();
          }
 else           if (choiceColor.getColor().isRed()) {
            computedMana.addRed();
          }
 else           if (choiceColor.getColor().isGreen()) {
            computedMana.addGreen();
          }
 else           if (choiceColor.getColor().isWhite()) {
            computedMana.addWhite();
          }
          if (!oneChoice) {
            choiceColor.clearChoice();
          }
        }
      }
    }
  }
 else {
    computedMana.setColorless(count);
  }
  return computedMana;
}
