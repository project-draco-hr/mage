{
  Permanent attacker=game.getPermanent(attackers.get(0));
  if (attacker == null) {
    return;
  }
  Player player=game.getPlayer(attacker.getControllerId());
  int damage=getDamageValueFromPermanent(attacker,game);
  if (canDamage(attacker,first)) {
    Map<UUID,Integer> blockerPower=new HashMap<UUID,Integer>();
    for (    UUID blockerId : blockerOrder) {
      Permanent blocker=game.getPermanent(blockerId);
      if (canDamage(blocker,first)) {
        if (blocker.getBlocking() == 1) {
          blockerPower.put(blockerId,getDamageValueFromPermanent(blocker,game));
        }
      }
    }
    Map<UUID,Integer> assigned=new HashMap<UUID,Integer>();
    if (blocked) {
      for (      UUID blockerId : blockerOrder) {
        Permanent blocker=game.getPermanent(blockerId);
        int lethalDamage;
        if (attacker.getAbilities().containsKey(DeathtouchAbility.getInstance().getId())) {
          lethalDamage=1;
        }
 else {
          lethalDamage=blocker.getToughness().getValue() - blocker.getDamage();
        }
        if (lethalDamage >= damage) {
          assigned.put(blockerId,damage);
          damage=0;
          break;
        }
        int damageAssigned=player.getAmount(lethalDamage,damage,"Assign damage to " + blocker.getName(),game);
        assigned.put(blockerId,damageAssigned);
        damage-=damageAssigned;
      }
      if (damage > 0 && hasTrample(attacker)) {
        defenderDamage(attacker,damage,game);
      }
    }
    for (    UUID blockerId : blockerOrder) {
      Integer power=blockerPower.get(blockerId);
      if (power != null) {
        attacker.markDamage(power.intValue(),blockerId,game,true,true);
      }
    }
    for (    Map.Entry<UUID,Integer> entry : assigned.entrySet()) {
      Permanent blocker=game.getPermanent(entry.getKey());
      blocker.markDamage(entry.getValue(),attacker.getId(),game,true,true);
    }
  }
 else {
    for (    UUID blockerId : blockerOrder) {
      Permanent blocker=game.getPermanent(blockerId);
      if (canDamage(blocker,first)) {
        attacker.markDamage(getDamageValueFromPermanent(blocker,game),blocker.getId(),game,true,true);
      }
    }
  }
}
