{
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  String cardName=(String)game.getState().getValue(source.getSourceId().toString() + NameACardEffect.INFO_KEY);
  if (sourceObject != null && controller != null && cardName != null && !cardName.isEmpty()) {
    Player targetPlayer=game.getPlayer(source.getFirstTarget());
    if (targetPlayer != null) {
      targetPlayer.revealCards("hand of " + targetPlayer.getName(),targetPlayer.getHand(),game);
      int cardsFound=0;
      for (      Card card : targetPlayer.getHand().getCards(game)) {
        if (card.getName().equals(cardName)) {
          cardsFound++;
        }
      }
      if (cardsFound > 0) {
        targetPlayer.damage(3 * cardsFound,source.getSourceId(),game,false,true);
      }
      FilterCard filterNamedCards=new FilterCard();
      filterNamedCards.add(new NamePredicate(cardName));
      Set<Card> toExile=new LinkedHashSet<>();
      for (      Card checkCard : targetPlayer.getGraveyard().getCards(game)) {
        if (checkCard.getName().equals(cardName)) {
          toExile.add(checkCard);
        }
      }
      TargetCardInHand targetCardInHand=new TargetCardInHand(0,Integer.MAX_VALUE,filterNamedCards);
      if (controller.chooseTarget(Outcome.Exile,targetPlayer.getHand(),targetCardInHand,source,game)) {
        List<UUID> targets=targetCardInHand.getTargets();
        for (        UUID targetId : targets) {
          Card targetCard=targetPlayer.getHand().get(targetId,game);
          if (targetCard != null) {
            toExile.add(targetCard);
          }
        }
      }
      TargetCardInLibrary targetCardsLibrary=new TargetCardInLibrary(0,Integer.MAX_VALUE,filterNamedCards);
      controller.searchLibrary(targetCardsLibrary,game,targetPlayer.getId());
      for (      UUID cardId : targetCardsLibrary.getTargets()) {
        Card card=game.getCard(cardId);
        if (card != null) {
          toExile.add(card);
        }
      }
      controller.moveCards(toExile,Zone.EXILED,source,game);
      targetPlayer.shuffleLibrary(source,game);
      return true;
    }
  }
  return false;
}
