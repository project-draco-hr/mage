{
  for (  Player player : state.getPlayers().values()) {
    player.beginTurn(this);
    if (priorityTime > 0) {
      initTimer(player.getId());
    }
  }
  if (startMessage == null || startMessage.isEmpty()) {
    startMessage="Game has started";
  }
  fireStatusEvent(startMessage,false);
  if (!gameOptions.skipInitShuffling) {
    for (    Player player : state.getPlayers().values()) {
      player.shuffleLibrary(this);
    }
  }
  TargetPlayer targetPlayer=new TargetPlayer();
  targetPlayer.setRequired(true);
  targetPlayer.setTargetName("starting player");
  Player choosingPlayer;
  if (choosingPlayerId == null) {
    choosingPlayer=getPlayer(pickChoosingPlayer());
  }
 else {
    choosingPlayer=this.getPlayer(choosingPlayerId);
  }
  if (choosingPlayer.choose(Outcome.Benefit,targetPlayer,null,this)) {
    startingPlayerId=((List<UUID>)targetPlayer.getTargets()).get(0);
    fireInformEvent(state.getPlayer(startingPlayerId).getName() + " will start");
  }
 else {
    return;
  }
  for (  UUID playerId : state.getPlayerList(startingPlayerId)) {
    Player player=getPlayer(playerId);
    if (!gameOptions.testMode || player.getLife() == 0) {
      player.setLife(this.getLife(),this);
    }
    if (!gameOptions.testMode) {
      player.drawCards(7,this);
    }
  }
  for (  UUID playerId : state.getPlayerList(startingPlayerId)) {
    Player player=getPlayer(playerId);
    GameEvent event=new GameEvent(GameEvent.EventType.CAN_TAKE_MULLIGAN,null,null,playerId);
    while (player.getHand().size() > 0) {
      if (replaceEvent(event)) {
        continue;
      }
      fireEvent(event);
      if (!player.chooseMulligan(this)) {
        break;
      }
      mulligan(player.getId());
    }
    fireInformEvent(player.getName() + " keeps hand");
  }
  for (  UUID playerId : state.getPlayerList(startingPlayerId)) {
    state.getWatchers().add(new PlayerDamagedBySourceWatcher(playerId));
  }
  state.getWatchers().add(new MorbidWatcher());
  state.getWatchers().add(new CastSpellLastTurnWatcher());
  state.getWatchers().add(new MiracleWatcher());
  state.getWatchers().add(new SoulbondWatcher());
  state.getWatchers().add(new PlayerLostLifeWatcher());
  for (  UUID playerId : state.getPlayerList(startingPlayerId)) {
    Player player=getPlayer(playerId);
    for (    Card card : player.getHand().getCards(this)) {
      if (card.getAbilities().containsKey(LeylineAbility.getInstance().getId())) {
        if (player.chooseUse(Outcome.PutCardInPlay,"Do you wish to put " + card.getName() + " on the battlefield?",this)) {
          card.putOntoBattlefield(this,Zone.HAND,null,player.getId());
        }
      }
      for (      Ability ability : card.getAbilities()) {
        if (ability instanceof ChancellorAbility) {
          if (player.chooseUse(Outcome.PutCardInPlay,"Do you wish to reveal " + card.getName() + "?",this)) {
            Cards cards=new CardsImpl();
            cards.add(card);
            player.revealCards("Revealed",cards,this);
            ability.resolve(this);
          }
        }
      }
    }
  }
}
