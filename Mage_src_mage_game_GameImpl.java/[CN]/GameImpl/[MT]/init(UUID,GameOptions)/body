{
  for (  Player player : state.getPlayers().values()) {
    player.beginTurn(this);
    if (priorityTime > 0 && player.getPriorityTimeLeft() == Integer.MAX_VALUE) {
      initTimer(player.getId());
    }
  }
  if (startMessage == null || startMessage.isEmpty()) {
    startMessage="Game has started";
  }
  fireStatusEvent(startMessage,false);
  saveState(false);
  if (!gameOptions.skipInitShuffling) {
    for (    Player player : state.getPlayers().values()) {
      player.shuffleLibrary(this);
    }
  }
  TargetPlayer targetPlayer=new TargetPlayer();
  targetPlayer.setTargetName("starting player");
  Player choosingPlayer=null;
  if (choosingPlayerId != null) {
    choosingPlayer=this.getPlayer(choosingPlayerId);
  }
  if (choosingPlayer == null) {
    choosingPlayer=getPlayer(pickChoosingPlayer());
  }
  if (choosingPlayer != null && choosingPlayer.choose(Outcome.Benefit,targetPlayer,null,this)) {
    startingPlayerId=((List<UUID>)targetPlayer.getTargets()).get(0);
    Player startingPlayer=state.getPlayer(startingPlayerId);
    StringBuilder message=new StringBuilder(choosingPlayer.getName()).append(" chooses that ");
    if (choosingPlayer.getId().equals(startingPlayerId)) {
      message.append("he or she");
    }
 else {
      message.append(startingPlayer.getName());
    }
    message.append(" takes the first turn");
    this.informPlayers(message.toString());
  }
 else {
    return;
  }
  for (  UUID playerId : state.getPlayerList(startingPlayerId)) {
    Player player=getPlayer(playerId);
    if (!gameOptions.testMode || player.getLife() == 0) {
      player.setLife(this.getLife(),this);
    }
    if (!gameOptions.testMode) {
      player.drawCards(7,this);
    }
  }
  List<UUID> keepPlayers=new ArrayList<>();
  List<UUID> mulliganPlayers=new ArrayList<>();
  do {
    mulliganPlayers.clear();
    for (    UUID playerId : state.getPlayerList(startingPlayerId)) {
      if (!keepPlayers.contains(playerId)) {
        Player player=getPlayer(playerId);
        boolean keep=true;
        while (true) {
          if (player.getHand().isEmpty()) {
            break;
          }
          GameEvent event=new GameEvent(GameEvent.EventType.CAN_TAKE_MULLIGAN,null,null,playerId);
          if (!replaceEvent(event)) {
            fireEvent(event);
            if (player.chooseMulligan(this)) {
              keep=false;
            }
            break;
          }
        }
        if (keep) {
          endMulligan(player.getId());
          keepPlayers.add(playerId);
          fireInformEvent(player.getName() + " keeps hand");
        }
 else {
          mulliganPlayers.add(playerId);
          fireInformEvent(player.getName() + " decides to take mulligan");
        }
      }
    }
    for (    UUID mulliganPlayerId : mulliganPlayers) {
      mulligan(mulliganPlayerId);
    }
    saveState(false);
  }
 while (!mulliganPlayers.isEmpty());
  for (  UUID playerId : state.getPlayerList(startingPlayerId)) {
    state.getWatchers().add(new PlayerDamagedBySourceWatcher(playerId));
  }
  state.getWatchers().add(new MorbidWatcher());
  state.getWatchers().add(new CastSpellLastTurnWatcher());
  state.getWatchers().add(new MiracleWatcher());
  state.getWatchers().add(new SoulbondWatcher());
  state.getWatchers().add(new PlayerLostLifeWatcher());
  for (  UUID playerId : state.getPlayerList(startingPlayerId)) {
    Player player=getPlayer(playerId);
    for (    Card card : player.getHand().getCards(this)) {
      if (player.getHand().contains(card.getId())) {
        if (card.getAbilities().containsKey(LeylineAbility.getInstance().getId())) {
          if (player.chooseUse(Outcome.PutCardInPlay,"Do you wish to put " + card.getName() + " on the battlefield?",this)) {
            card.putOntoBattlefield(this,Zone.HAND,null,player.getId());
          }
        }
        for (        Ability ability : card.getAbilities()) {
          if (ability instanceof ChancellorAbility) {
            if (player.chooseUse(Outcome.PutCardInPlay,"Do you wish to reveal " + card.getName() + "?",this)) {
              Cards cards=new CardsImpl();
              cards.add(card);
              player.revealCards("Revealed",cards,this);
              ability.resolve(this);
            }
          }
          if (ability instanceof GemstoneCavernsAbility) {
            if (!playerId.equals(startingPlayerId)) {
              if (player.chooseUse(Outcome.PutCardInPlay,"Do you wish to put " + card.getName() + " into play?",this)) {
                Cards cards=new CardsImpl();
                cards.add(card);
                player.revealCards("Revealed",cards,this);
                ability.resolve(this);
              }
            }
          }
        }
      }
    }
  }
}
