{
  Player player=getPlayer(playerId);
  if (player.hasLeft()) {
    return;
  }
  player.leave();
  if (gameOver(null)) {
    return;
  }
  for (Iterator<Permanent> it=getBattlefield().getAllPermanents().iterator(); it.hasNext(); ) {
    Permanent perm=it.next();
    if (perm.getOwnerId().equals(playerId)) {
      if (perm.getAttachedTo() != null) {
        Permanent attachedTo=getPermanent(perm.getAttachedTo());
        if (attachedTo != null) {
          attachedTo.removeAttachment(perm.getId(),this);
        }
      }
      if (perm.getCardType().contains(CardType.CREATURE) && this.getCombat() != null) {
        this.getCombat().removeFromCombat(perm.getId(),this);
      }
      it.remove();
    }
  }
  this.getState().getContinuousEffects().removeInactiveEffects(this);
  for (Iterator<StackObject> it=getStack().iterator(); it.hasNext(); ) {
    StackObject object=it.next();
    if (object.getControllerId().equals(playerId)) {
      it.remove();
    }
  }
  List<Permanent> permanents=this.getBattlefield().getAllActivePermanents(playerId);
  for (  Permanent permanent : permanents) {
    permanent.moveToExile(null,"",null,this);
  }
  for (  ExileZone exile : this.getExile().getExileZones()) {
    for (Iterator<UUID> it=exile.iterator(); it.hasNext(); ) {
      Card card=this.getCard(it.next());
      if (card != null && card.getOwnerId().equals(playerId)) {
        it.remove();
      }
    }
  }
  Iterator it=gameCards.entrySet().iterator();
  while (it.hasNext()) {
    Entry<UUID,Card> entry=(Entry<UUID,Card>)it.next();
    Card card=entry.getValue();
    if (card.getOwnerId().equals(playerId)) {
      it.remove();
    }
  }
  for (  Player leftPlayer : this.getPlayers().values()) {
    if (leftPlayer.isInGame()) {
      leftPlayer.otherPlayerLeftGame(this);
    }
  }
}
