{
  boolean somethingHappened=false;
  for (  Player player : state.getPlayers().values()) {
    if (!player.hasLost() && (player.getLife() <= 0 || player.isEmptyDraw() || player.getCounters().getCount("Poison") >= 10)) {
      player.lost(this);
    }
  }
  for (  Permanent perm : getBattlefield().getAllActivePermanents(CardType.CREATURE)) {
    if (perm.getToughness().getValue() == 0) {
      if (perm.moveToZone(Zone.GRAVEYARD,null,this,false))       somethingHappened=true;
    }
 else     if (perm.getToughness().getValue() <= perm.getDamage() || perm.isDeathtouched()) {
      if (perm.destroy(null,this,false))       somethingHappened=true;
    }
  }
  for (  Permanent perm : getBattlefield().getAllActivePermanents(CardType.PLANESWALKER)) {
    if (perm.getLoyalty().getValue() == 0) {
      if (perm.moveToZone(Zone.GRAVEYARD,null,this,false))       return true;
    }
  }
  if (getBattlefield().countAll(filterPlaneswalker) > 1) {
    for (    Permanent planeswalker : getBattlefield().getAllActivePermanents(CardType.PLANESWALKER)) {
      for (      String planeswalkertype : planeswalker.getSubtype()) {
        filterPlaneswalker.getSubtype().clear();
        filterPlaneswalker.getSubtype().add(planeswalkertype);
        filterPlaneswalker.setScopeSubtype(ComparisonScope.Any);
        if (getBattlefield().count(filterPlaneswalker,planeswalker.getControllerId(),this) > 1) {
          for (          Permanent perm : getBattlefield().getActivePermanents(filterPlaneswalker,planeswalker.getControllerId(),this)) {
            perm.moveToZone(Zone.GRAVEYARD,null,this,false);
          }
          return true;
        }
      }
    }
  }
  for (  Permanent perm : getBattlefield().getAllActivePermanents(filterAura)) {
    if (perm.getAttachedTo() == null) {
      if (perm.moveToZone(Zone.GRAVEYARD,null,this,false))       somethingHappened=true;
    }
 else {
      Permanent attachedTo=getPermanent(perm.getAttachedTo());
      if (attachedTo == null) {
        if (perm.moveToZone(Zone.GRAVEYARD,null,this,false))         somethingHappened=true;
      }
 else {
        Filter auraFilter=perm.getSpellAbility().getTargets().get(0).getFilter();
        if (!auraFilter.match(attachedTo) || attachedTo.hasProtectionFrom(perm)) {
          if (perm.moveToZone(Zone.GRAVEYARD,null,this,false))           somethingHappened=true;
        }
      }
    }
  }
  if (getBattlefield().countAll(filterLegendary) > 1) {
    for (    Permanent legend : getBattlefield().getAllActivePermanents(filterLegendary)) {
      filterLegendName.getName().clear();
      filterLegendName.getName().add(legend.getName());
      if (getBattlefield().count(filterLegendName,legend.getControllerId(),this) > 1) {
        for (        Permanent dupLegend : getBattlefield().getActivePermanents(filterLegendName,legend.getControllerId(),this)) {
          dupLegend.moveToZone(Zone.GRAVEYARD,null,this,false);
        }
        return true;
      }
    }
  }
  for (  Permanent perm : getBattlefield().getAllActivePermanents(filterEquipment)) {
    if (perm.getAttachedTo() != null) {
      Permanent creature=getPermanent(perm.getAttachedTo());
      if (creature == null) {
        perm.attachTo(null);
      }
 else       if (!creature.getCardType().contains(CardType.CREATURE) || creature.hasProtectionFrom(perm)) {
        if (creature.removeAttachment(perm.getId(),this))         somethingHappened=true;
      }
    }
  }
  for (  Permanent perm : getBattlefield().getAllActivePermanents(filterFortification)) {
    if (perm.getAttachedTo() != null) {
      Permanent land=getPermanent(perm.getAttachedTo());
      if (land == null) {
        perm.attachTo(null);
      }
 else       if (!land.getCardType().contains(CardType.LAND) || land.hasProtectionFrom(perm)) {
        if (land.removeAttachment(perm.getId(),this))         somethingHappened=true;
      }
    }
  }
  for (  Permanent perm : getBattlefield().getAllActivePermanents()) {
    if (perm.getAttachments().size() > 0) {
      for (      UUID attachmentId : perm.getAttachments()) {
        Permanent attachment=getPermanent(attachmentId);
        if (!(attachment.getSubtype().contains("Aura") || attachment.getSubtype().contains("Equipment") || attachment.getSubtype().contains("Fortification"))) {
          if (perm.removeAttachment(id,this))           return true;
        }
      }
    }
  }
  return somethingHappened;
}
