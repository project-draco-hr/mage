{
  int spaceUsed=0;
  int components=parent.getComponentCount();
  int[] relativeSpace=new int[components];
  for (int i=0; i < components; i++) {
    relativeSpace[i]=0;
    if (relativeTotal > 0 && spaceAvailable > 0) {
      Component component=parent.getComponent(i);
      Float constraint=constraints.get(component);
      if (constraint != null) {
        int space=(int)(spaceAvailable * constraint.floatValue() / relativeTotal);
        relativeSpace[i]=space;
        spaceUsed+=space;
      }
    }
  }
  int spaceRemaining=spaceAvailable - spaceUsed;
  if (relativeTotal > 0 && spaceRemaining > 0)   adjustForRounding(relativeSpace,spaceRemaining);
  return relativeSpace;
}
