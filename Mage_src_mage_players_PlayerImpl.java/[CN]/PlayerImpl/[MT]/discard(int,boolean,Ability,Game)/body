{
  Cards discardedCards=new CardsImpl();
  if (this.getHand().size() == 1) {
    discardedCards.addAll(this.getHand());
    while (this.getHand().size() > 0) {
      discard(this.getHand().get(this.getHand().iterator().next(),game),source,game);
    }
    return discardedCards;
  }
  if (random) {
    for (int i=0; i < amount; i++) {
      Card card=this.getHand().getRandom(game);
      if (card != null) {
        discardedCards.add(card);
        discard(card,source,game);
      }
    }
  }
 else {
    int possibleAmount=Math.min(getHand().size(),amount);
    TargetDiscard target=new TargetDiscard(possibleAmount,possibleAmount,new FilterCard(CardUtil.numberToText(possibleAmount,"a") + " card" + (possibleAmount > 1 ? "s" : "")),playerId);
    choose(Outcome.Discard,target,source == null ? null : source.getSourceId(),game);
    for (    UUID cardId : target.getTargets()) {
      Card card=this.getHand().get(cardId,game);
      if (card != null) {
        discardedCards.add(card);
        discard(card,source,game);
      }
    }
  }
  return discardedCards;
}
