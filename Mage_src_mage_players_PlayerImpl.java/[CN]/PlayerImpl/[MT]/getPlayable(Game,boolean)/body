{
  List<Ability> playable=new ArrayList<Ability>();
  ManaOptions available=getManaAvailable(game);
  available.addMana(manaPool.getMana());
  if (hidden) {
    for (    Card card : hand.getUniqueCards(game)) {
      for (      ActivatedAbility ability : card.getAbilities().getActivatedAbilities(Zone.HAND)) {
        if (canPlay(ability,available,game)) {
          playable.add(ability);
        }
      }
    }
  }
  for (  Card card : graveyard.getUniqueCards(game)) {
    for (    ActivatedAbility ability : card.getAbilities().getActivatedAbilities(Zone.GRAVEYARD)) {
      if (canPlay(ability,available,game)) {
        playable.add(ability);
      }
    }
    if (game.getContinuousEffects().asThough(card.getId(),AsThoughEffectType.CAST,game)) {
      for (      ActivatedAbility ability : card.getAbilities().getActivatedAbilities(Zone.HAND)) {
        if (ability instanceof SpellAbility || ability instanceof PlayLandAbility) {
          playable.add(ability);
        }
      }
    }
  }
  for (  ExileZone exile : game.getExile().getExileZones()) {
    for (    Card card : exile.getCards(game)) {
      if (game.getContinuousEffects().asThough(card.getId(),AsThoughEffectType.CAST,game)) {
        for (        Ability ability : card.getAbilities()) {
          ability.setControllerId(this.getId());
          if (ability.getZone().match(Zone.HAND) && (ability instanceof SpellAbility || ability instanceof PlayLandAbility)) {
            playable.add(ability);
          }
        }
      }
    }
  }
  for (  Cards cards : game.getState().getRevealed().values()) {
    for (    Card card : cards.getCards(game)) {
      if (game.getContinuousEffects().asThough(card.getId(),AsThoughEffectType.CAST,game)) {
        for (        ActivatedAbility ability : card.getAbilities().getActivatedAbilities(Zone.HAND)) {
          if (ability instanceof SpellAbility || ability instanceof PlayLandAbility) {
            playable.add(ability);
          }
        }
      }
    }
  }
  Map<String,Ability> playableActivated=new HashMap<String,Ability>();
  for (  Permanent permanent : game.getBattlefield().getAllActivePermanents(playerId)) {
    for (    ActivatedAbility ability : permanent.getAbilities().getActivatedAbilities(Zone.BATTLEFIELD)) {
      if (!playableActivated.containsKey(ability.toString())) {
        if (canPlay(ability,available,game)) {
          playableActivated.put(ability.toString(),ability);
        }
      }
    }
  }
  playable.addAll(playableActivated.values());
  return playable;
}
