{
  boolean opponentInGame=false;
  for (  UUID opponentId : game.getOpponents(playerId)) {
    Player opponent=game.getPlayer(opponentId);
    if (opponent != null && opponent.isInGame()) {
      opponentInGame=true;
      break;
    }
  }
  if (!opponentInGame || !game.replaceEvent(new GameEvent(GameEvent.EventType.WINS,null,null,playerId))) {
    logger.debug("player won -> start: " + this.getName());
    if (!this.loses) {
      for (      UUID opponentId : game.getOpponents(playerId)) {
        Player opponent=game.getPlayer(opponentId);
        if (opponent != null && !opponent.hasLost()) {
          logger.debug("player won -> calling opponent lost: " + this.getName() + "  opponent: "+ opponent.getName());
          opponent.lost(game);
        }
      }
      int opponentsAlive=0;
      for (      UUID opponentId : game.getOpponents(playerId)) {
        Player opponent=game.getPlayer(opponentId);
        if (opponent != null && !opponent.hasLost()) {
          opponentsAlive++;
        }
      }
      if (opponentsAlive == 0 && !hasWon()) {
        logger.debug("player won -> No more opponents alive game won: " + this.getName());
        game.informPlayers(this.getLogName() + " has won the game");
        this.wins=true;
        game.end();
      }
    }
 else {
      logger.debug("player won -> but already lost before: " + this.getName());
    }
  }
}
