{
  LinkedHashMap<UUID,ActivatedAbility> useable=new LinkedHashMap<UUID,ActivatedAbility>();
  if (!(object instanceof Permanent) || ((Permanent)object).canUseActivatedAbilities(game)) {
    for (    ActivatedAbility ability : object.getAbilities().getActivatedAbilities(zone)) {
      if (ability.canActivate(playerId,game)) {
        useable.put(ability.getId(),ability);
      }
    }
    if (zone != Zone.HAND) {
      if (zone != Zone.BATTLEFIELD && game.getContinuousEffects().asThough(object.getId(),AsThoughEffectType.CAST,game)) {
        for (        ActivatedAbility ability : object.getAbilities().getActivatedAbilities(Zone.HAND)) {
          useable.put(ability.getId(),ability);
        }
      }
    }
    Abilities<ActivatedAbility> otherAbilities=game.getState().getOtherAbilities(object.getId(),zone);
    if (otherAbilities != null) {
      for (      ActivatedAbility ability : otherAbilities) {
        Card card=game.getCard(ability.getSourceId());
        if (card.isSplitCard() && ability instanceof FlashbackAbility) {
          FlashbackAbility flashbackAbility;
          if (card.getCardType().contains(CardType.INSTANT)) {
            flashbackAbility=new FlashbackAbility(((SplitCard)card).getLeftHalfCard().getManaCost(),TimingRule.INSTANT);
          }
 else {
            flashbackAbility=new FlashbackAbility(((SplitCard)card).getLeftHalfCard().getManaCost(),TimingRule.SORCERY);
          }
          flashbackAbility.setSourceId(card.getId());
          flashbackAbility.setControllerId(card.getOwnerId());
          flashbackAbility.setSpellAbilityType(SpellAbilityType.SPLIT_LEFT);
          flashbackAbility.setAbilityName(((SplitCard)card).getLeftHalfCard().getName());
          useable.put(flashbackAbility.getId(),flashbackAbility);
          if (card.getCardType().contains(CardType.INSTANT)) {
            flashbackAbility=new FlashbackAbility(((SplitCard)card).getRightHalfCard().getManaCost(),TimingRule.INSTANT);
          }
 else {
            flashbackAbility=new FlashbackAbility(((SplitCard)card).getRightHalfCard().getManaCost(),TimingRule.SORCERY);
          }
          flashbackAbility.setSourceId(card.getId());
          flashbackAbility.setControllerId(card.getOwnerId());
          flashbackAbility.setSpellAbilityType(SpellAbilityType.SPLIT_RIGHT);
          flashbackAbility.setAbilityName(((SplitCard)card).getRightHalfCard().getName());
          useable.put(flashbackAbility.getId(),flashbackAbility);
        }
 else {
          useable.put(ability.getId(),ability);
        }
      }
    }
  }
  return useable;
}
