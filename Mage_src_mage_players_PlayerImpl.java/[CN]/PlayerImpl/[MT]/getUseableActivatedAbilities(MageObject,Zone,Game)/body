{
  LinkedHashMap<UUID,ActivatedAbility> useable=new LinkedHashMap<>();
  if (!(object instanceof Permanent) || ((Permanent)object).canUseActivatedAbilities(game)) {
    for (    Ability ability : object.getAbilities()) {
      if (ability.getZone().match(zone)) {
        if (ability instanceof ActivatedAbility) {
          if (((ActivatedAbility)ability).canActivate(playerId,game)) {
            useable.put(ability.getId(),(ActivatedAbility)ability);
          }
        }
 else         if (ability instanceof AlternativeSourceCosts) {
          if (object.getCardType().contains(CardType.LAND)) {
            for (            Ability ability2 : object.getAbilities().copy()) {
              if (ability2 instanceof PlayLandAbility) {
                useable.put(ability2.getId(),(ActivatedAbility)ability2);
              }
            }
          }
        }
      }
    }
    if (zone != Zone.HAND) {
      if (Zone.GRAVEYARD.equals(zone) && canPlayCardsFromGraveyard()) {
        for (        ActivatedAbility ability : object.getAbilities().getPlayableAbilities(Zone.HAND)) {
          if (ability.canActivate(playerId,game)) {
            useable.put(ability.getId(),ability);
          }
        }
      }
      if (zone != Zone.BATTLEFIELD && game.getContinuousEffects().asThough(object.getId(),AsThoughEffectType.PLAY_FROM_NON_HAND_ZONE,this.getId(),game)) {
        for (        Ability ability : object.getAbilities()) {
          ability.setControllerId(this.getId());
          if (ability instanceof ActivatedAbility && ability.getZone().match(Zone.HAND) && ((ActivatedAbility)ability).canActivate(playerId,game)) {
            useable.put(ability.getId(),(ActivatedAbility)ability);
          }
        }
      }
    }
    getOtherUseableActivatedAbilities(object,zone,game,useable);
  }
  return useable;
}
