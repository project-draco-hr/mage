{
  if (Thread.interrupted()) {
    Thread.currentThread().interrupt();
    logger.debug("interrupted");
    return GameStateEvaluator2.evaluate(playerId,game);
  }
  Integer val=null;
  SimulationNode2 bestNode=null;
  if (game.getCombat().isAttacked(defenderId,game)) {
    SimulatedPlayer2 defender=(SimulatedPlayer2)game.getPlayer(defenderId);
    if (logger.isDebugEnabled()) {
      logger.debug(defender.getName() + "'s possible blockers: " + defender.getAvailableBlockers(game));
    }
    List<Combat> combats=defender.addBlockers(game);
    for (    Combat engagement : combats) {
      if (alpha >= beta) {
        logger.debug("Sim blockers -- pruning blockers");
        break;
      }
      Game sim=game.copy();
      for (      CombatGroup group : engagement.getGroups()) {
        if (group.getAttackers().size() > 0) {
          UUID attackerId=group.getAttackers().get(0);
          for (          UUID blockerId : group.getBlockers()) {
            sim.getPlayer(defenderId).declareBlocker(defenderId,blockerId,attackerId,sim);
          }
        }
      }
      sim.fireEvent(GameEvent.getEvent(GameEvent.EventType.DECLARED_BLOCKERS,defenderId,defenderId));
      SimulationNode2 newNode=new SimulationNode2(node,sim,depth,defenderId);
      if (logger.isDebugEnabled()) {
        logger.debug("Sim block for player:" + game.getPlayer(defenderId).getName());
      }
      sim.checkStateAndTriggered();
      while (!sim.getStack().isEmpty()) {
        sim.getStack().resolve(sim);
        logger.debug("Sim blockers: resolving triggered abilities");
        sim.applyEffects();
      }
      sim.fireEvent(GameEvent.getEvent(GameEvent.EventType.DECLARE_BLOCKERS_STEP_POST,sim.getActivePlayerId(),sim.getActivePlayerId()));
      Combat simCombat=sim.getCombat().copy();
      finishCombat(sim);
      if (sim.isGameOver()) {
        val=GameStateEvaluator2.evaluate(playerId,sim);
      }
 else       if (!counter) {
        val=simulatePostCombatMain(sim,newNode,depth - 1,alpha,beta);
      }
 else {
        val=GameStateEvaluator2.evaluate(playerId,sim);
      }
      if (!defenderId.equals(playerId)) {
        if (val < beta) {
          beta=val;
          bestNode=newNode;
          bestNode.setScore(val);
          bestNode.setCombat(simCombat);
        }
      }
 else {
        if (val > alpha) {
          alpha=val;
          bestNode=newNode;
          bestNode.setScore(val);
          bestNode.setCombat(simCombat);
        }
      }
    }
  }
  if (val == null) {
    val=GameStateEvaluator2.evaluate(playerId,game);
  }
  if (bestNode != null) {
    node.children.clear();
    node.children.add(bestNode);
    node.setScore(bestNode.getScore());
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Sim blockers: returning score: " + val + " depth:"+ depth+ " for player:"+ game.getPlayer(node.getPlayerId()).getName());
  }
  return val;
}
