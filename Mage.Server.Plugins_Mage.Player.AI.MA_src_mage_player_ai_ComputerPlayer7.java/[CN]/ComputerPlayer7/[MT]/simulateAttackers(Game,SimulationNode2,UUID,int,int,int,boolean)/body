{
  if (Thread.interrupted()) {
    Thread.currentThread().interrupt();
    logger.debug("interrupted");
    return GameStateEvaluator2.evaluate(playerId,game);
  }
  Integer val=null;
  SimulationNode2 bestNode=null;
  SimulatedPlayer2 attacker=(SimulatedPlayer2)game.getPlayer(attackerId);
  if (logger.isDebugEnabled()) {
    logger.debug(attacker.getName() + "'s possible attackers: " + attacker.getAvailableAttackers(game));
  }
  for (  Combat engagement : attacker.addAttackers(game)) {
    if (logger.isDebugEnabled()) {
      logger.debug("Sim Attackers: " + engagement.getAttackers() + ", blockers: "+ engagement.getBlockers());
    }
    if (alpha >= beta) {
      logger.debug("Sim Attackers -- pruning attackers");
      break;
    }
    Game sim=game.copy();
    UUID defenderId=game.getOpponents(attackerId).iterator().next();
    for (    CombatGroup group : engagement.getGroups()) {
      for (      UUID attackId : group.getAttackers()) {
        sim.getPlayer(attackerId).declareAttacker(attackId,defenderId,sim,false);
      }
    }
    sim.fireEvent(GameEvent.getEvent(GameEvent.EventType.DECLARED_ATTACKERS,attackerId,attackerId));
    SimulationNode2 newNode=new SimulationNode2(node,sim,depth,attackerId);
    if (logger.isDebugEnabled()) {
      logger.debug("Sim attack for player:" + game.getPlayer(attackerId).getName());
    }
    sim.checkStateAndTriggered();
    while (!sim.getStack().isEmpty()) {
      sim.getStack().resolve(sim);
      logger.debug("Sim attack: resolving triggered abilities");
      sim.applyEffects();
    }
    sim.fireEvent(GameEvent.getEvent(GameEvent.EventType.DECLARE_ATTACKERS_STEP_POST,sim.getActivePlayerId(),sim.getActivePlayerId()));
    Combat simCombat=sim.getCombat().copy();
    sim.getPhase().setStep(new DeclareBlockersStep());
    val=simulateCombat(sim,newNode,depth - 1,alpha,beta,counter);
    if (!attackerId.equals(playerId)) {
      if (val < beta) {
        beta=val;
        bestNode=newNode;
        bestNode.setScore(val);
        if (newNode.getChildren().size() > 0) {
          bestNode.setCombat(newNode.getChildren().get(0).getCombat());
        }
      }
    }
 else {
      if (val > alpha) {
        alpha=val;
        bestNode=newNode;
        bestNode.setScore(val);
        if (newNode.getChildren().size() > 0) {
          bestNode.setCombat(newNode.getChildren().get(0).getCombat());
        }
      }
    }
  }
  if (val == null) {
    val=GameStateEvaluator2.evaluate(playerId,game);
  }
  if (bestNode != null) {
    node.children.clear();
    node.children.add(bestNode);
    node.setScore(bestNode.getScore());
  }
  if (logger.isDebugEnabled()) {
    logger.debug("Sim attackers: returning score: " + val + " depth:"+ depth+ " for player:"+ game.getPlayer(node.getPlayerId()).getName());
  }
  return val;
}
