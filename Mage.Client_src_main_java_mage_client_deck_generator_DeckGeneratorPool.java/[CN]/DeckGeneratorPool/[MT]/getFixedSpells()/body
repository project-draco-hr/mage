{
  Random random=new Random();
  int spellSize=deckCards.size();
  int nonLandSize=(deckSize - landCount);
  if (spellSize < nonLandSize) {
    int spellsNeeded=nonLandSize - spellSize;
    List<Card> spellsToAdd=new ArrayList<>(spellsNeeded);
    for (int i=0; i < spellsNeeded; i++)     spellsToAdd.add(reserveSpells.get(i));
    for (int i=spellsNeeded + 1; i < reserveSpells.size() - 1; i++) {
      int j=random.nextInt(i);
      Card randomCard=reserveSpells.get(j);
      if (isValidSpellCard(randomCard) && j < spellsToAdd.size()) {
        spellsToAdd.set(j,randomCard);
      }
    }
    deckCards.addAll(spellsToAdd);
  }
 else   if (spellSize > (deckSize - landCount)) {
    int spellsRemoved=(spellSize) - (deckSize - landCount);
    for (int i=0; i < spellsRemoved; ++i) {
      deckCards.remove(random.nextInt(deckCards.size()));
    }
  }
  if (deckCards.size() != nonLandSize)   throw new IllegalStateException("Not enough cards found to generate deck. Please try again");
  return deckCards;
}
