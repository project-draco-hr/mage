{
  paid=false;
  int countersRemoved=0;
  Player controller=game.getPlayer(controllerId);
  if (controller != null) {
    target.clearChosen();
    if (target.choose(Outcome.UnboostCreature,controllerId,sourceId,game)) {
      for (      UUID targetId : (List<UUID>)target.getTargets()) {
        Permanent permanent=game.getPermanent(targetId);
        if (permanent != null) {
          if (permanent.getCounters().size() > 0 && (counterTypeToRemove == null || permanent.getCounters().containsKey(counterTypeToRemove))) {
            String counterName=null;
            if (counterTypeToRemove != null) {
              counterName=counterTypeToRemove.getName();
            }
 else {
              if (permanent.getCounters().size() > 1 && counterTypeToRemove == null) {
                Choice choice=new ChoiceImpl(true);
                Set<String> choices=new HashSet<>();
                for (                Counter counter : permanent.getCounters().values()) {
                  if (permanent.getCounters().getCount(counter.getName()) > 0) {
                    choices.add(counter.getName());
                  }
                }
                choice.setChoices(choices);
                choice.setMessage("Choose a counter to remove from " + permanent.getLogName());
                controller.choose(Outcome.UnboostCreature,choice,game);
                counterName=choice.getChoice();
              }
 else {
                for (                Counter counter : permanent.getCounters().values()) {
                  if (counter.getCount() > 0) {
                    counterName=counter.getName();
                  }
                }
              }
            }
            if (counterName != null) {
              int countersLeft=countersToRemove - countersRemoved;
              int countersOnPermanent=permanent.getCounters().getCount(counterName);
              int numberOfCountersSelected=1;
              if (countersLeft > 1 && countersOnPermanent > 1) {
                numberOfCountersSelected=controller.getAmount(1,Math.min(countersLeft,countersOnPermanent),new StringBuilder("Remove how many counters from ").append(permanent.getLogName()).toString(),game);
              }
              permanent.removeCounters(counterName,numberOfCountersSelected,game);
              if (permanent.getCounters().getCount(counterName) == 0) {
                permanent.getCounters().removeCounter(counterName);
              }
              countersRemoved+=numberOfCountersSelected;
              if (!game.isSimulation())               game.informPlayers(new StringBuilder(controller.getName()).append(" removes ").append(numberOfCountersSelected == 1 ? "a" : numberOfCountersSelected).append(" ").append(counterName).append(numberOfCountersSelected == 1 ? " counter from " : " counters from ").append(permanent.getName()).toString());
              if (countersRemoved == countersToRemove) {
                this.paid=true;
                break;
              }
            }
          }
        }
      }
    }
  }
  return paid;
}
