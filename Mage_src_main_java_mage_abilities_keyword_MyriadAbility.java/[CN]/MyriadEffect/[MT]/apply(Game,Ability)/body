{
  Player controller=game.getPlayer(source.getControllerId());
  Permanent sourceObject=game.getPermanentOrLKIBattlefield(source.getSourceId());
  if (controller != null && sourceObject != null) {
    UUID defendingPlayerId=game.getCombat().getDefendingPlayerId(source.getSourceId(),game);
    if (defendingPlayerId == null) {
      Logger.getLogger(MyriadEffect.class).error("defending player == null source: " + sourceObject.getName() + " attacking: "+ (sourceObject.isAttacking() ? "Y" : "N"));
      return false;
    }
    List<Permanent> tokens=new ArrayList<>();
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      if (playerId != defendingPlayerId && controller.hasOpponent(playerId,game)) {
        Player opponent=game.getPlayer(playerId);
        if (opponent != null && controller.chooseUse(Outcome.PutCreatureInPlay,"Put a copy of " + sourceObject.getIdName() + " onto battlefield attacking "+ opponent.getName()+ "?",source,game)) {
          PutTokenOntoBattlefieldCopyTargetEffect effect=new PutTokenOntoBattlefieldCopyTargetEffect(controller.getId(),null,false,1,true,true,playerId);
          effect.setTargetPointer(new FixedTarget(sourceObject,game));
          effect.apply(game,source);
          tokens.addAll(effect.getAddedPermanent());
        }
      }
    }
    if (!tokens.isEmpty()) {
      ExileTargetEffect exileEffect=new ExileTargetEffect();
      exileEffect.setTargetPointer(new FixedTargets(tokens,game));
      game.addDelayedTriggeredAbility(new AtTheEndOfCombatDelayedTriggeredAbility(exileEffect),source);
    }
    return true;
  }
  return false;
}
