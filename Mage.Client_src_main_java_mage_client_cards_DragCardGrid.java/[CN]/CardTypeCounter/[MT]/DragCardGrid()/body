{
  cardGrid=new ArrayList<>();
  setLayout(new BorderLayout());
  setOpaque(false);
  sortButton=new JButton("Sort");
  filterButton=new JButton("Filter");
  visibilityButton=new JButton("Visibility");
  addFocusListener(new FocusAdapter(){
    @Override public void focusLost(    FocusEvent e){
      deselectAll();
    }
  }
);
  JButton loadButton=new JButton("Load");
  loadButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      loadDeck();
    }
  }
);
  deckNameAndCountLabel=new JLabel();
  landCountLabel=new JLabel("",new ImageIcon(getClass().getResource("/buttons/type_land.png")),SwingConstants.LEFT);
  landCountLabel.setToolTipText("Number of lands in deck");
  creatureCountLabel=new JLabel("",new ImageIcon(getClass().getResource("/buttons/type_creatures.png")),SwingConstants.LEFT);
  creatureCountLabel.setToolTipText("Number of creatures in deck");
  JPanel toolbar=new JPanel(new BorderLayout());
  JPanel toolbarInner=new JPanel();
  toolbar.setBackground(new Color(250,250,250,150));
  toolbar.setOpaque(true);
  toolbarInner.setOpaque(false);
  toolbarInner.add(deckNameAndCountLabel);
  toolbarInner.add(landCountLabel);
  toolbarInner.add(creatureCountLabel);
  toolbarInner.add(sortButton);
  toolbarInner.add(filterButton);
  toolbarInner.add(visibilityButton);
  toolbarInner.add(loadButton);
  toolbar.add(toolbarInner,BorderLayout.WEST);
  JPanel sliderPanel=new JPanel(new GridBagLayout());
  sliderPanel.setOpaque(false);
  final JSlider sizeSlider=new JSlider(SwingConstants.HORIZONTAL,0,100,50);
  sizeSlider.setOpaque(false);
  sizeSlider.setPreferredSize(new Dimension(100,(int)sizeSlider.getPreferredSize().getHeight()));
  sizeSlider.addChangeListener(new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      if (!sizeSlider.getValueIsAdjusting()) {
        float sliderFrac=((float)(sizeSlider.getValue() - 50)) / 50;
        cardSizeMod=(float)Math.pow(2,sliderFrac);
        layoutGrid();
        cardContent.repaint();
      }
    }
  }
);
  sliderPanel.add(new JLabel("Card Size:"));
  sliderPanel.add(sizeSlider);
  toolbar.add(sliderPanel,BorderLayout.EAST);
  this.add(toolbar,BorderLayout.NORTH);
  cardContent=new JLayeredPane();
  cardContent.setLayout(null);
  cardContent.setOpaque(false);
  cardContent.addMouseListener(new MouseAdapter(){
    private boolean isDragging=false;
    @Override public void mousePressed(    MouseEvent e){
      isDragging=true;
      beginSelectionDrag(e.getX(),e.getY());
      updateSelectionDrag(e.getX(),e.getY());
    }
    @Override public void mouseReleased(    MouseEvent e){
      if (isDragging) {
        isDragging=false;
        updateSelectionDrag(e.getX(),e.getY());
        endSelectionDrag(e.getX(),e.getY());
      }
    }
  }
);
  cardContent.addMouseMotionListener(new MouseAdapter(){
    @Override public void mouseDragged(    MouseEvent e){
      updateSelectionDrag(e.getX(),e.getY());
    }
  }
);
  cardScroll=new JScrollPane(cardContent,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  cardScroll.setOpaque(false);
  cardScroll.getViewport().setOpaque(false);
  cardScroll.setViewportBorder(BorderFactory.createEmptyBorder());
  cardScroll.setBorder(BorderFactory.createLineBorder(Color.gray,1));
  cardScroll.getVerticalScrollBar().setUnitIncrement(CardRenderer.getCardTopHeight(getCardWidth()));
  this.add(cardScroll,BorderLayout.CENTER);
  insertArrow=new JLabel();
  insertArrow.setSize(20,20);
  insertArrow.setVisible(false);
  cardContent.add(insertArrow,new Integer(1000));
  selectionPanel=new SelectionBox();
  selectionPanel.setVisible(false);
  cardContent.add(selectionPanel,new Integer(1001));
  separateCreatures=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_DECK_EDITOR_LAST_SEPARATE_CREATURES,"false").equals("true");
  cardSort=Sort.valueOf(PreferencesDialog.getCachedValue(PreferencesDialog.KEY_DECK_EDITOR_LAST_SORT,Sort.NONE.toString()));
{
    sortPopup=new JPopupMenu();
    sortPopup.setLayout(new GridBagLayout());
    JPanel sortMode=new JPanel();
    sortMode.setLayout(new GridLayout(Sort.values().length,1,0,2));
    sortMode.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),"Sort by..."));
    GridBagConstraints sortModeC=new GridBagConstraints();
    sortModeC.gridx=0;
    sortModeC.gridy=0;
    sortModeC.gridwidth=1;
    sortModeC.gridheight=1;
    sortModeC.fill=GridBagConstraints.HORIZONTAL;
    sortPopup.add(sortMode,sortModeC);
    ButtonGroup sortModeGroup=new ButtonGroup();
    for (    final Sort s : Sort.values()) {
      JToggleButton button=new JToggleButton(s.getText());
      if (s == cardSort) {
        button.setSelected(true);
      }
      sortMode.add(button);
      sortModeGroup.add(button);
      button.addActionListener(new ActionListener(){
        @Override public void actionPerformed(        ActionEvent e){
          cardSort=s;
          PreferencesDialog.saveValue(PreferencesDialog.KEY_DECK_EDITOR_LAST_SORT,s.toString());
          resort();
        }
      }
);
    }
    JPanel sortOptions=new JPanel();
    sortOptions.setLayout(new BoxLayout(sortOptions,BoxLayout.Y_AXIS));
    sortOptions.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),"Sort options"));
    GridBagConstraints sortOptionsC=new GridBagConstraints();
    sortOptionsC.gridx=0;
    sortOptionsC.gridy=1;
    sortOptionsC.gridwidth=1;
    sortOptionsC.gridheight=1;
    sortPopup.add(sortOptions,sortOptionsC);
    separateCreaturesCb=new JCheckBox();
    separateCreaturesCb.setText("Creatures in separate row");
    separateCreaturesCb.setSelected(separateCreatures);
    separateCreaturesCb.addItemListener(new ItemListener(){
      @Override public void itemStateChanged(      ItemEvent e){
        separateCreatures=separateCreaturesCb.isSelected();
        PreferencesDialog.saveValue(PreferencesDialog.KEY_DECK_EDITOR_LAST_SEPARATE_CREATURES,Boolean.toString(separateCreatures));
        resort();
      }
    }
);
    sortOptions.add(separateCreaturesCb);
    sortPopup.pack();
    makeButtonPopup(sortButton,sortPopup);
  }
{
    final JPopupMenu visPopup=new JPopupMenu();
    JMenuItem hideSelected=new JMenuItem("Hide selected");
    hideSelected.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        hideSelection();
      }
    }
);
    visPopup.add(hideSelected);
    JMenuItem showAll=new JMenuItem("Show all");
    showAll.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        showAll();
      }
    }
);
    visPopup.add(showAll);
    visibilityButton.addMouseListener(new MouseAdapter(){
      @Override public void mouseClicked(      MouseEvent e){
        visPopup.show(e.getComponent(),0,e.getComponent().getHeight());
      }
    }
);
  }
  filterPopup=new JPopupMenu();
  filterPopup.setPreferredSize(new Dimension(300,300));
  makeButtonPopup(filterButton,filterPopup);
  filterButton.setVisible(false);
  loadButton.setVisible(false);
  initCardAreaPopup();
  updateCounts();
}
