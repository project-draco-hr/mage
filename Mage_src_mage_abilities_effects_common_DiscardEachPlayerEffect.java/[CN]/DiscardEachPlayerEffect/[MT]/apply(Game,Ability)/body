{
  Player controller=game.getPlayer(source.getControllerId());
  HashMap<UUID,Cards> cardsToDiscard=new HashMap<UUID,Cards>();
  if (controller != null) {
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        int numberOfCardsToDiscard=Math.min(amount.calculate(game,source),player.getHand().size());
        Cards cards=new CardsImpl();
        if (randomDiscard) {
          while (cards.size() < numberOfCardsToDiscard) {
            Card card=player.getHand().getRandom(game);
            if (!cards.contains(card.getId())) {
              cards.add(card);
            }
          }
        }
 else {
          Target target=new TargetDiscard(numberOfCardsToDiscard,numberOfCardsToDiscard,new FilterCard(),playerId);
          target.setRequired(true);
          player.chooseTarget(outcome,target,source,game);
          cards.addAll(target.getTargets());
        }
        cardsToDiscard.put(playerId,cards);
      }
    }
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        Cards cardsPlayer=cardsToDiscard.get(playerId);
        if (cardsPlayer != null) {
          for (          UUID cardId : cardsPlayer) {
            Card card=game.getCard(cardId);
            if (card != null) {
              player.discard(card,source,game);
            }
          }
          game.informPlayers(new StringBuilder(player.getName()).append(" discards ").append(Integer.toString(cardsPlayer.size())).append(" card").append(cardsPlayer.size() > 1 ? "s" : "").toString());
        }
      }
    }
  }
  return true;
}
