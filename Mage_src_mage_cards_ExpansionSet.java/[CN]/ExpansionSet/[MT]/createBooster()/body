{
  List<Card> booster=new ArrayList<Card>();
  if (!hasBoosters) {
    return booster;
  }
  CardCriteria criteria=new CardCriteria();
  criteria.setCodes(parentSet != null ? parentSet.code : this.code).rarities(Rarity.LAND).doubleFaced(false);
  List<CardInfo> basicLand=CardRepository.instance.findCards(criteria);
  criteria=new CardCriteria();
  criteria.setCodes(this.code).rarities(Rarity.COMMON).doubleFaced(false);
  List<CardInfo> common=CardRepository.instance.findCards(criteria);
  criteria=new CardCriteria();
  criteria.setCodes(this.code).rarities(Rarity.UNCOMMON).doubleFaced(false);
  List<CardInfo> uncommon=CardRepository.instance.findCards(criteria);
  criteria=new CardCriteria();
  criteria.setCodes(this.code).rarities(Rarity.RARE).doubleFaced(false);
  List<CardInfo> rare=CardRepository.instance.findCards(criteria);
  criteria=new CardCriteria();
  criteria.setCodes(this.code).rarities(Rarity.MYTHIC).doubleFaced(false);
  List<CardInfo> mythic=CardRepository.instance.findCards(criteria);
  criteria=new CardCriteria();
  criteria.setCodes(this.code).doubleFaced(true);
  List<CardInfo> doubleFaced=CardRepository.instance.findCards(criteria);
  for (int i=0; i < numBoosterLands; i++) {
    addToBooster(booster,basicLand);
  }
  for (int i=0; i < numBoosterCommon; i++) {
    addToBooster(booster,common);
  }
  for (int i=0; i < numBoosterUncommon; i++) {
    addToBooster(booster,uncommon);
  }
  for (int i=0; i < numBoosterRare; i++) {
    if (ratioBoosterMythic > 0 && rnd.nextInt(ratioBoosterMythic) == 1) {
      addToBooster(booster,mythic);
    }
 else {
      addToBooster(booster,rare);
    }
  }
  for (int i=0; i < numBoosterDoubleFaced; i++) {
    addToBooster(booster,doubleFaced);
  }
  return booster;
}
