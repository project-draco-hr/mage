{
  boolean valid=true;
  if (deck.getCards().size() < 60) {
    invalid.put("Deck","Must contain at least 60 cards: " + deck.getCards().size());
    valid=false;
  }
  if (!deck.getSideboard().isEmpty() && deck.getSideboard().size() != 15) {
    invalid.put("Sideboard","Must have 0 or 15 cards: " + deck.getSideboard().size());
    valid=false;
  }
  List<String> basicLandNames=new ArrayList<String>(Arrays.asList("Forest","Island","Mountain","Swamp","Plains"));
  Map<String,Integer> counts=new HashMap<String,Integer>();
  countCards(counts,deck.getCards());
  countCards(counts,deck.getSideboard());
  for (  Entry<String,Integer> entry : counts.entrySet()) {
    if (entry.getValue() > 4) {
      if (!basicLandNames.contains(entry.getKey()) && !entry.getKey().equals("Relentless Rats")) {
        invalid.put(entry.getKey(),"Too many: " + entry.getValue());
        valid=false;
      }
    }
  }
  for (  String bannedCard : banned) {
    if (counts.containsKey(bannedCard)) {
      invalid.put(bannedCard,"Banned");
      valid=false;
    }
  }
  for (  String restrictedCard : restricted) {
    if (counts.containsKey(restrictedCard)) {
      int count=counts.get(restrictedCard);
      if (count > 1) {
        invalid.put(restrictedCard,"Restricted: " + count);
        valid=false;
      }
    }
  }
  if (!setCodes.isEmpty()) {
    for (    Card card : deck.getCards()) {
      if (!setCodes.contains(card.getExpansionSetCode())) {
        if (!invalid.containsKey(card.getName())) {
          invalid.put(card.getName(),"Invalid set: " + card.getExpansionSetCode());
          valid=false;
        }
      }
    }
    for (    Card card : deck.getSideboard()) {
      if (!setCodes.contains(card.getExpansionSetCode())) {
        if (!invalid.containsKey(card.getName())) {
          invalid.put(card.getName(),"Invalid set: " + card.getExpansionSetCode());
          valid=false;
        }
      }
    }
  }
  return valid;
}
