{
  tableModel=new TableTableModel();
  matchesModel=new MatchesTableModel();
  gameChooser=new GameChooser();
  initComponents();
  tableModel.setSession(session);
  tableTables.createDefaultColumnsFromModel();
  activeTablesSorter=new MageTableRowSorter(tableModel);
  tableTables.setRowSorter(activeTablesSorter);
  TableUtil.setColumnWidthAndOrder(tableTables,defaultColumnsWidth,PreferencesDialog.KEY_TABLES_COLUMNS_WIDTH,PreferencesDialog.KEY_TABLES_COLUMNS_ORDER);
  tableCompleted.setRowSorter(new MageTableRowSorter(matchesModel));
  chatPanel.useExtendedView(ChatPanel.VIEW_MODE.NONE);
  chatPanel.setBorder(null);
  chatPanel.setChatType(ChatPanel.ChatType.TABLES);
  filterButtons=new JToggleButton[]{btnStateWaiting,btnStateActive,btnStateFinished,btnTypeMatch,btnTypeTourneyConstructed,btnTypeTourneyLimited,btnFormatBlock,btnFormatStandard,btnFormatModern,btnFormatLegacy,btnFormatVintage,btnFormatCommander,btnFormatTinyLeader,btnFormatLimited,btnFormatOther,btnSkillBeginner,btnSkillCasual,btnSkillSerious};
  JComponent[] components=new JComponent[]{chatPanel,jSplitPane1,jScrollPane1,jScrollPane2,topPanel,jPanel3};
  for (  JComponent component : components) {
    component.setOpaque(false);
  }
  jScrollPane1.getViewport().setBackground(new Color(255,255,255,50));
  jScrollPane2.getViewport().setBackground(new Color(255,255,255,50));
  restoreSettings();
  Action openTableAction;
  openTableAction=new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      int modelRow=Integer.valueOf(e.getActionCommand());
      UUID tableId=(UUID)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN + 3);
      UUID gameId=(UUID)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN + 2);
      String action=(String)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN);
      String deckType=(String)tableModel.getValueAt(modelRow,TableTableModel.COLUMN_DECK_TYPE);
      String status=(String)tableModel.getValueAt(modelRow,TableTableModel.COLUMN_STATUS);
      boolean isTournament=(Boolean)tableModel.getValueAt(modelRow,TableTableModel.ACTION_COLUMN + 1);
      String owner=(String)tableModel.getValueAt(modelRow,TableTableModel.COLUMN_OWNER);
switch (action) {
case "Join":
        if (owner.equals(session.getUserName()) || owner.startsWith(session.getUserName() + ",")) {
          try {
            JDesktopPane desktopPane=(JDesktopPane)MageFrame.getUI().getComponent(MageComponents.DESKTOP_PANE);
            JInternalFrame[] windows=desktopPane.getAllFramesInLayer(javax.swing.JLayeredPane.DEFAULT_LAYER);
            for (            JInternalFrame frame : windows) {
              if (frame.getTitle().equals("Waiting for players")) {
                frame.toFront();
                frame.setVisible(true);
                try {
                  frame.setSelected(true);
                }
 catch (                PropertyVetoException ve) {
                  logger.error(ve);
                }
              }
            }
          }
 catch (          InterruptedException ex) {
            logger.error(ex);
          }
          return;
        }
      if (isTournament) {
        logger.info("Joining tournament " + tableId);
        if (deckType.startsWith("Limited")) {
          if (!status.endsWith("PW")) {
            session.joinTournamentTable(roomId,tableId,session.getUserName(),"Human",1,null,"");
          }
 else {
            joinTableDialog.showDialog(roomId,tableId,true,deckType.startsWith("Limited"));
          }
        }
 else {
          joinTableDialog.showDialog(roomId,tableId,true,deckType.startsWith("Limited"));
        }
      }
 else {
        logger.info("Joining table " + tableId);
        joinTableDialog.showDialog(roomId,tableId,false,false);
      }
    break;
case "Remove":
  if (JOptionPane.showConfirmDialog(null,"Are you sure you want to remove table?","Removing table",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
    session.removeTable(roomId,tableId);
  }
break;
case "Show":
if (isTournament) {
logger.info("Showing tournament table " + tableId);
session.watchTable(roomId,tableId);
}
break;
case "Watch":
if (!isTournament) {
logger.info("Watching table " + tableId);
session.watchTable(roomId,tableId);
}
break;
case "Replay":
logger.info("Replaying game " + gameId);
session.replayGame(gameId);
break;
}
}
}
;
Action closedTableAction;
closedTableAction=new AbstractAction(){
@Override public void actionPerformed(ActionEvent e){
int modelRow=Integer.valueOf(e.getActionCommand());
String action=(String)matchesModel.getValueAt(modelRow,MatchesTableModel.ACTION_COLUMN);
switch (action) {
case "Replay":
List<UUID> gameList=matchesModel.getListofGames(modelRow);
if (gameList != null && gameList.size() > 0) {
if (gameList.size() == 1) {
session.replayGame(gameList.get(0));
}
 else {
gameChooser.show(gameList,MageFrame.getDesktop().getMousePosition());
}
}
break;
case "Show":
;
if (matchesModel.isTournament(modelRow)) {
logger.info("Showing tournament table " + matchesModel.getTableId(modelRow));
session.watchTable(roomId,matchesModel.getTableId(modelRow));
}
break;
}
}
}
;
new ButtonColumn(tableTables,openTableAction,tableTables.convertColumnIndexToView(TableTableModel.ACTION_COLUMN));
new ButtonColumn(tableCompleted,closedTableAction,tableCompleted.convertColumnIndexToView(MatchesTableModel.ACTION_COLUMN));
}
