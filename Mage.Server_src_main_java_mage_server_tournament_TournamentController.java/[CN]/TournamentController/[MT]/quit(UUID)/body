{
  UUID playerId=userPlayerMap.get(userId);
  if (playerId == null) {
    logger.debug("Player not found userId:" + userId + " tournId: "+ tournament.getId());
    return;
  }
  TournamentPlayer tournamentPlayer=tournament.getPlayer(playerId);
  if (tournamentPlayer == null) {
    logger.debug("TournamentPlayer not found userId: " + userId + " tournId: "+ tournament.getId());
    return;
  }
  if (!started) {
    tournament.leave(playerId);
    return;
  }
  TournamentSession tournamentSession=tournamentSessions.get(playerId);
  if (tournamentSession == null) {
    logger.debug("TournamentSession not found userId: " + userId + " tournId: "+ tournament.getId());
    return;
  }
  tournamentSession.setKilled();
  if (tournamentPlayer.isInTournament()) {
    String info;
    TourneyQuitStatus status;
    if (tournament.isDoneConstructing()) {
      info=new StringBuilder("during round ").append(tournament.getRounds().size()).toString();
      TableManager.getInstance().userQuitTournamentSubTables(tournament.getId(),userId);
      status=TourneyQuitStatus.DURING_ROUND;
    }
 else     if (tournamentPlayer.getState().equals(TournamentPlayerState.DRAFTING)) {
      info="during Draft phase";
      if (!checkToReplaceDraftPlayerByAi(userId,tournamentPlayer)) {
        this.abortDraftTournament();
      }
 else {
        DraftController draftController=DraftManager.getInstance().getController(tableId);
        if (draftController != null) {
          DraftSession draftSession=draftController.getDraftSession(playerId);
          if (draftSession != null) {
            DraftManager.getInstance().kill(draftSession.getDraftId(),userId);
          }
        }
      }
      status=TourneyQuitStatus.DURING_DRAFTING;
    }
 else     if (tournamentPlayer.getState().equals(TournamentPlayerState.CONSTRUCTING)) {
      info="during Construction phase";
      status=TourneyQuitStatus.DURING_CONSTRUCTION;
    }
 else {
      info="";
      status=TourneyQuitStatus.NO_TOURNEY_QUIT;
    }
    tournamentPlayer.setQuit(info,status);
    tournament.quit(playerId);
    tournamentSession.quit();
    ChatManager.getInstance().broadcast(chatId,"",tournamentPlayer.getPlayer().getLogName() + " has quit the tournament",MessageColor.BLACK,true,MessageType.STATUS,SoundToPlay.PlayerQuitTournament);
  }
}
