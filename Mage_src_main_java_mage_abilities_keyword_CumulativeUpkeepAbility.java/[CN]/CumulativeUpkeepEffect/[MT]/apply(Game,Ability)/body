{
  Player player=game.getPlayer(source.getControllerId());
  Permanent permanent=game.getPermanent(source.getSourceId());
  if (player != null && permanent != null) {
    int ageCounter=permanent.getCounters(game).getCount(CounterType.AGE);
    if (cumulativeCost instanceof ManaCost) {
      ManaCostsImpl totalCost=new ManaCostsImpl<>();
      for (int i=0; i < ageCounter; i++) {
        totalCost.add((ManaCost)cumulativeCost.copy());
      }
      if (player.chooseUse(Outcome.Benefit,"Pay " + totalCost.getText() + "?",source,game)) {
        totalCost.clearPaid();
        if (totalCost.payOrRollback(source,game,source.getSourceId(),source.getControllerId())) {
          game.fireEvent(new GameEvent(EventType.PAID_CUMULATIVE_UPKEEP,permanent.getId(),permanent.getId(),player.getId(),ageCounter,false));
          return true;
        }
      }
      game.fireEvent(new GameEvent(EventType.DIDNT_PAY_CUMULATIVE_UPKEEP,permanent.getId(),permanent.getId(),player.getId(),ageCounter,false));
      permanent.sacrifice(source.getSourceId(),game);
      return true;
    }
 else {
      CostsImpl<Cost> totalCost=new CostsImpl<>();
      for (int i=0; i < ageCounter; i++) {
        totalCost.add(cumulativeCost.copy());
      }
      if (player.chooseUse(Outcome.Benefit,totalCost.getText() + "?",source,game)) {
        totalCost.clearPaid();
        int bookmark=game.bookmarkState();
        if (totalCost.pay(source,game,source.getSourceId(),source.getControllerId(),false,null)) {
          game.fireEvent(new GameEvent(EventType.PAID_CUMULATIVE_UPKEEP,permanent.getId(),permanent.getId(),player.getId(),ageCounter,false));
          return true;
        }
 else {
          game.restoreState(bookmark,source.getRule());
        }
      }
      game.fireEvent(new GameEvent(EventType.DIDNT_PAY_CUMULATIVE_UPKEEP,permanent.getId(),permanent.getId(),player.getId(),ageCounter,false));
      permanent.sacrifice(source.getSourceId(),game);
      return true;
    }
  }
  return false;
}
