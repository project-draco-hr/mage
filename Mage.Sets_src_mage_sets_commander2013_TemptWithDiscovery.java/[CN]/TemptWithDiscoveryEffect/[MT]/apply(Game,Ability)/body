{
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Set<UUID> playersShuffle=new LinkedHashSet<>();
    playersShuffle.add(controller.getId());
    TargetCardInLibrary target=new TargetCardInLibrary(new FilterLandCard());
    if (controller.searchLibrary(target,game)) {
      for (      UUID cardId : target.getTargets()) {
        Card card=game.getCard(cardId);
        if (card != null) {
          controller.moveCards(card,null,Zone.BATTLEFIELD,source,game);
        }
      }
    }
    int opponentsUsedSearch=0;
    for (    UUID playerId : game.getOpponents(controller.getId())) {
      Player opponent=game.getPlayer(playerId);
      if (opponent != null) {
        if (opponent.chooseUse(outcome,"Search your library for a land card and put it onto the battlefield?",source,game)) {
          target.clearChosen();
          opponentsUsedSearch++;
          playersShuffle.add(playerId);
          if (opponent.searchLibrary(target,game)) {
            for (            UUID cardId : target.getTargets()) {
              Card card=game.getCard(cardId);
              if (card != null) {
                opponent.moveCards(card,null,Zone.BATTLEFIELD,source,game);
              }
            }
          }
        }
      }
    }
    if (opponentsUsedSearch > 0) {
      target=new TargetCardInLibrary(0,opponentsUsedSearch,new FilterLandCard());
      if (controller.searchLibrary(target,game)) {
        for (        UUID cardId : target.getTargets()) {
          Card card=game.getCard(cardId);
          if (card != null) {
            controller.moveCards(card,null,Zone.BATTLEFIELD,source,game);
          }
        }
      }
    }
    for (    UUID playerId : playersShuffle) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        player.shuffleLibrary(game);
      }
    }
    return true;
  }
  return false;
}
