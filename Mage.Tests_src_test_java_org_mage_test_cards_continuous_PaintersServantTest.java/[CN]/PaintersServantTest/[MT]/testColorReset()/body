{
  addCard(Zone.HAND,playerA,"Painter's Servant",1);
  addCard(Zone.BATTLEFIELD,playerA,"Swamp",2);
  addCard(Zone.HAND,playerA,"Lightning Bolt");
  addCard(Zone.BATTLEFIELD,playerA,"Silvercoat Lion");
  addCard(Zone.GRAVEYARD,playerA,"Silvercoat Lion");
  addCard(Zone.HAND,playerB,"Lightning Bolt",2);
  addCard(Zone.BATTLEFIELD,playerB,"Silvercoat Lion");
  addCard(Zone.GRAVEYARD,playerB,"Silvercoat Lion");
  addCard(Zone.BATTLEFIELD,playerB,"Mountain",1);
  castSpell(1,PhaseStep.PRECOMBAT_MAIN,playerA,"Painter's Servant");
  setChoice(playerA,"Blue");
  castSpell(1,PhaseStep.POSTCOMBAT_MAIN,playerB,"Lightning Bolt","Painter's Servant");
  setStopAt(1,PhaseStep.END_TURN);
  execute();
  assertGraveyardCount(playerA,"Painter's Servant",1);
  Permanent silvercoatLion=getPermanent("Silvercoat Lion",playerA);
  Assert.assertEquals(true,silvercoatLion.getColor(currentGame).isWhite());
  Assert.assertEquals(false,silvercoatLion.getColor(currentGame).isBlue());
  silvercoatLion=getPermanent("Silvercoat Lion",playerB);
  Assert.assertEquals(true,silvercoatLion.getColor(currentGame).isWhite());
  Assert.assertEquals(false,silvercoatLion.getColor(currentGame).isBlue());
  for (  Card card : playerA.getLibrary().getCards(currentGame)) {
    Assert.assertEquals(card.getName() + " should not be blue",false,card.getColor(currentGame).isBlue());
  }
  for (  Card card : playerB.getLibrary().getCards(currentGame)) {
    Assert.assertEquals(card.getName() + " should not be blue",false,card.getColor(currentGame).isBlue());
  }
  for (  Card card : playerA.getHand().getCards(currentGame)) {
    Assert.assertEquals(true,card.getColor(currentGame).isRed());
    Assert.assertEquals(false,card.getColor(currentGame).isBlue());
  }
  for (  Card card : playerB.getHand().getCards(currentGame)) {
    Assert.assertEquals(true,card.getColor(currentGame).isRed());
    Assert.assertEquals(false,card.getColor(currentGame).isBlue());
  }
  for (  Card card : playerA.getGraveyard().getCards(currentGame)) {
    if (card.getName().equals("Silvercoat Lion")) {
      Assert.assertEquals(true,card.getColor(currentGame).isWhite());
      Assert.assertEquals(false,card.getColor(currentGame).isBlue());
    }
  }
  for (  Card card : playerB.getGraveyard().getCards(currentGame)) {
    if (card.getName().equals("Silvercoat Lion")) {
      Assert.assertEquals(true,card.getColor(currentGame).isWhite());
      Assert.assertEquals(false,card.getColor(currentGame).isBlue());
    }
  }
}
