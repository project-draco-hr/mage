{
  if (table.getState() != TableState.WAITING) {
    return false;
  }
  Seat seat=table.getNextAvailableSeat(playerType);
  if (seat == null) {
    throw new GameException("No available seats.");
  }
  User user=UserManager.getInstance().getUser(userId);
  if (user == null) {
    logger.fatal(new StringBuilder("couldn't get user ").append(name).append(" for join tournament userId = ").append(userId).toString());
    return false;
  }
  if (userPlayerMap.containsKey(userId) && playerType.equals("Human")) {
    user.showUserMessage("Join Table",new StringBuilder("You can join a table only one time.").toString());
    return false;
  }
  Player player=createPlayer(name,seat.getPlayerType(),skill);
  if (player != null) {
    if (!player.canJoinTable(table)) {
      user.showUserMessage("Join Table",new StringBuilder("A ").append(seat.getPlayerType()).append(" player can't join this table.").toString());
      return false;
    }
    tournament.addPlayer(player,seat.getPlayerType());
    table.joinTable(player,seat);
    logger.trace("player " + player.getName() + " joined tableId: "+ table.getId());
    if (seat.getPlayer().isHuman()) {
      user.addTable(player.getId(),table);
      user.joinedTable(table.getRoomId(),table.getId(),true);
      userPlayerMap.put(userId,player.getId());
    }
    return true;
  }
 else {
    throw new GameException("Playertype " + seat.getPlayerType() + " could not be created.");
  }
}
