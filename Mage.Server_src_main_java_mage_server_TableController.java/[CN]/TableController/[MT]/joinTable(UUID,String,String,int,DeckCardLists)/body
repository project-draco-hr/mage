{
  User user=UserManager.getInstance().getUser(userId);
  if (user == null) {
    return false;
  }
  if (table.getState() != TableState.WAITING) {
    user.showUserMessage("Join Table","No available seats.");
    return false;
  }
  Seat seat=table.getNextAvailableSeat(playerType);
  if (seat == null) {
    user.showUserMessage("Join Table","No available seats.");
    return false;
  }
  Deck deck=Deck.load(deckList,false,false);
  if (!Main.isTestMode() && !table.getValidator().validate(deck)) {
    StringBuilder sb=new StringBuilder("You (").append(name).append(") have an invalid deck for the selected ").append(table.getValidator().getName()).append(" Format. \n\n");
    for (    Map.Entry<String,String> entry : table.getValidator().getInvalid().entrySet()) {
      sb.append(entry.getKey()).append(": ").append(entry.getValue()).append("\n");
    }
    sb.append("\n\nSelect a deck that is appropriate for the selected format and try again!");
    user.showUserMessage("Join Table",sb.toString());
    return false;
  }
  Player player=createPlayer(name,seat.getPlayerType(),skill);
  if (player == null) {
    String message=new StringBuilder("Could not create player ").append(name).append(" of type ").append(seat.getPlayerType().toString()).toString();
    logger.warn(new StringBuilder("User: ").append(user.getName()).append(" => ").append(message).toString());
    user.showUserMessage("Join Table",message);
    return false;
  }
  if (!player.canJoinTable(table)) {
    user.showUserMessage("Join Table",new StringBuilder("A ").append(seat.getPlayerType()).append(" player can't join this table.").toString());
    return false;
  }
  match.addPlayer(player,deck);
  table.joinTable(player,seat);
  logger.debug("player joined " + player.getId() + " "+ player.getName());
  if (seat.getPlayer().isHuman()) {
    user.addTable(player.getId(),table);
    user.joinedTable(table.getRoomId(),table.getId(),false);
    userPlayerMap.put(userId,player.getId());
  }
  return true;
}
