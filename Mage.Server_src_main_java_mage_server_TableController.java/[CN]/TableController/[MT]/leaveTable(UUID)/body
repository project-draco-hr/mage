{
  UUID playerId=userPlayerMap.get(userId);
  if (table == null) {
    logger.error("TableController.leaveTable table == null - userId: " + userId);
    return;
  }
  if (table.isTournament() && tournament == null) {
    logger.error("TableController.leaveTable tournament == null - userId: " + userId + "  table: "+ table.getId());
    return;
  }
  if (playerId != null) {
    if (table.getState() == TableState.WAITING || table.getState() == TableState.STARTING) {
      table.leaveNotStartedTable(playerId);
      if (table.isTournament()) {
        tournament.removePlayer(playerId);
      }
 else {
        match.leave(playerId);
      }
      User user=UserManager.getInstance().getUser(userId);
      user.removeTable(playerId);
      userPlayerMap.remove(userId);
    }
 else     if (!table.getState().equals(TableState.FINISHED)) {
      if (table.isTournament()) {
        logger.debug("TableController.leaveTable before userQuitTournamentSubTables");
        TableManager.getInstance().userQuitTournamentSubTables(userId);
        logger.debug("TableController.leaveTable before quit tournament ");
        TournamentManager.getInstance().quit(tournament.getId(),userId);
      }
 else {
        MatchPlayer matchPlayer=match.getPlayer(playerId);
        if (matchPlayer != null) {
          if (table.getState().equals(TableState.SIDEBOARDING)) {
            matchPlayer.submitDeck(matchPlayer.getDeck());
          }
          matchPlayer.setQuit(true);
        }
        match.leave(playerId);
      }
    }
  }
 else {
    logger.error("TableController.leaveTable no playerId found for userId: " + userId);
  }
}
