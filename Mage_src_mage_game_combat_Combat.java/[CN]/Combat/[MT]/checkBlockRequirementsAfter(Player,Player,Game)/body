{
  Set<UUID> opponents=game.getOpponents(attackerId);
  Map<UUID,Set<UUID>> mustBeBlockedByAtLeastOne=new HashMap<UUID,Set<UUID>>();
  for (  Permanent creature : game.getBattlefield().getActivePermanents(new FilterControlledCreaturePermanent(),player.getId(),game)) {
    if (opponents.contains(creature.getControllerId())) {
      if (creature.getBlocking() > 0) {
        for (        Map.Entry entry : game.getContinuousEffects().getApplicableRequirementEffects(creature,game).entrySet()) {
          RequirementEffect effect=(RequirementEffect)entry.getKey();
          for (          Ability ability : (HashSet<Ability>)entry.getValue()) {
            UUID toBeBlockedCreature=effect.mustBlockAttackerIfElseUnblocked(ability,game);
            if (toBeBlockedCreature != null) {
              Set<UUID> potentialBlockers;
              if (mustBeBlockedByAtLeastOne.containsKey(toBeBlockedCreature)) {
                potentialBlockers=mustBeBlockedByAtLeastOne.get(toBeBlockedCreature);
              }
 else {
                potentialBlockers=new HashSet<UUID>();
                mustBeBlockedByAtLeastOne.put(toBeBlockedCreature,potentialBlockers);
              }
              potentialBlockers.add(creature.getId());
            }
          }
        }
      }
      if (creature.getBlocking() == 0) {
        for (        Map.Entry entry : game.getContinuousEffects().getApplicableRequirementEffects(creature,game).entrySet()) {
          RequirementEffect effect=(RequirementEffect)entry.getKey();
          for (          Ability ability : (HashSet<Ability>)entry.getValue()) {
            UUID toBeBlockedCreature=effect.mustBlockAttackerIfElseUnblocked(ability,game);
            if (toBeBlockedCreature != null) {
              Set<UUID> potentialBlockers;
              if (mustBeBlockedByAtLeastOne.containsKey(toBeBlockedCreature)) {
                potentialBlockers=mustBeBlockedByAtLeastOne.get(toBeBlockedCreature);
              }
 else {
                potentialBlockers=new HashSet<UUID>();
                mustBeBlockedByAtLeastOne.put(toBeBlockedCreature,potentialBlockers);
              }
              potentialBlockers.add(creature.getId());
            }
          }
          if (effect.mustBlockAny(game)) {
            boolean mayBlock=false;
            for (            UUID attackingCreatureId : getAttackers()) {
              if (creature.canBlock(attackingCreatureId,game)) {
                mayBlock=true;
                break;
              }
            }
            if (mayBlock) {
              if (controller.isHuman()) {
                game.informPlayer(controller,"Creature should block this turn: " + creature.getName());
              }
 else {
                Player defender=game.getPlayer(creature.getControllerId());
                if (defender != null) {
                  for (                  UUID attackingCreatureId : getAttackers()) {
                    if (creature.canBlock(attackingCreatureId,game)) {
                      defender.declareBlocker(defender.getId(),creature.getId(),attackingCreatureId,game);
                      break;
                    }
                  }
                }
              }
              return false;
            }
          }
        }
      }
    }
  }
  for (  UUID toBeBlockedCreatureId : mustBeBlockedByAtLeastOne.keySet()) {
    for (    CombatGroup combatGroup : game.getCombat().getGroups()) {
      if (combatGroup.getBlockers().isEmpty() && combatGroup.getAttackers().contains(toBeBlockedCreatureId)) {
        if (controller.isHuman()) {
          Permanent toBeBlockedCreature=game.getPermanent(toBeBlockedCreatureId);
          if (toBeBlockedCreature != null) {
            boolean possibleBlockerAvailable=false;
            for (            UUID possibleBlockerId : mustBeBlockedByAtLeastOne.get(toBeBlockedCreatureId)) {
              Set<UUID> forcingAttackers=creaturesForcedToBlockAttackers.get(possibleBlockerId);
              if (forcingAttackers == null) {
                possibleBlockerAvailable=true;
                break;
              }
              List<UUID> blockedAttackers=null;
              for (              CombatGroup combatGroupToCheck : game.getCombat().getGroups()) {
                if (combatGroupToCheck.getBlockers().contains(possibleBlockerId)) {
                  blockedAttackers=combatGroupToCheck.getAttackers();
                  break;
                }
              }
              if (blockedAttackers == null) {
                possibleBlockerAvailable=true;
                break;
              }
              possibleBlockerAvailable=true;
              for (              UUID blockedAttackerId : blockedAttackers) {
                if (creaturesForcedToBlockAttackers.get(possibleBlockerId).contains(blockedAttackerId)) {
                  possibleBlockerAvailable=false;
                  break;
                }
              }
              if (possibleBlockerAvailable) {
                break;
              }
            }
            if (possibleBlockerAvailable) {
              game.informPlayer(controller,new StringBuilder(toBeBlockedCreature.getName()).append(" has to be blocked by at least one creature.").toString());
              return false;
            }
          }
        }
 else {
          UUID blockingCreatureId=mustBeBlockedByAtLeastOne.get(toBeBlockedCreatureId).iterator().next();
          Permanent blockingCreature=game.getPermanent(blockingCreatureId);
          if (blockingCreature != null) {
            Player defender=game.getPlayer(blockingCreature.getControllerId());
            if (defender != null) {
              defender.declareBlocker(defender.getId(),blockingCreatureId,toBeBlockedCreatureId,game);
            }
          }
        }
      }
    }
  }
  StringBuilder sb=new StringBuilder();
  for (  Map.Entry<UUID,Set<UUID>> entry : creaturesForcedToBlockAttackers.entrySet()) {
    boolean blockIsValid;
    Permanent creatureForcedToBlock=game.getPermanent(entry.getKey());
    if (creatureForcedToBlock.getBlocking() == 0) {
      blockIsValid=false;
    }
 else {
      blockIsValid=false;
      CombatGroups:       for (      CombatGroup combatGroup : game.getCombat().getGroups()) {
        if (combatGroup.getBlockers().contains(creatureForcedToBlock.getId())) {
          for (          UUID forcingAttackerId : combatGroup.getAttackers()) {
            if (entry.getValue().contains(forcingAttackerId)) {
              blockIsValid=true;
              break CombatGroups;
            }
 else {
              if (combatGroup.getBlockers().size() == 1) {
                if (mustBeBlockedByAtLeastOne.containsKey(forcingAttackerId)) {
                  if (mustBeBlockedByAtLeastOne.get(forcingAttackerId).contains(creatureForcedToBlock.getId())) {
                    blockIsValid=true;
                    break CombatGroups;
                  }
                }
              }
            }
          }
        }
      }
    }
    if (!blockIsValid) {
      sb.append(" ").append(creatureForcedToBlock.getName());
    }
  }
  if (sb.length() > 0) {
    sb.insert(0,"Some creatures are forced to block certain attacker(s):\n");
    sb.append("\nPlease block with each of these creatures an appropriate attacker.");
    game.informPlayer(controller,sb.toString());
    return false;
  }
  return true;
}
