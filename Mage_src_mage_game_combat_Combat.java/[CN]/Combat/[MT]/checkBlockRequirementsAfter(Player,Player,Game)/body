{
  Map<UUID,Set<UUID>> mustBeBlockedByAtLeastOne=new HashMap<UUID,Set<UUID>>();
  for (  Permanent creature : game.getBattlefield().getActivePermanents(new FilterControlledCreaturePermanent(),player.getId(),game)) {
    if (creature.getBlocking() == 0 && game.getOpponents(attackerId).contains(creature.getControllerId())) {
      for (      Map.Entry entry : game.getContinuousEffects().getApplicableRequirementEffects(creature,game).entrySet()) {
        RequirementEffect effect=(RequirementEffect)entry.getKey();
        for (        Ability ability : (HashSet<Ability>)entry.getValue()) {
          UUID toBeBlockedCreature=effect.mustBlockAttackerIfElseUnblocked(ability,game);
          if (toBeBlockedCreature != null) {
            Set<UUID> potentialBlockers;
            if (mustBeBlockedByAtLeastOne.containsKey(toBeBlockedCreature)) {
              potentialBlockers=mustBeBlockedByAtLeastOne.get(toBeBlockedCreature);
            }
 else {
              potentialBlockers=new HashSet<UUID>();
              mustBeBlockedByAtLeastOne.put(toBeBlockedCreature,potentialBlockers);
            }
            potentialBlockers.add(creature.getId());
          }
        }
        if (effect.mustBlockAny(game)) {
          boolean mayBlock=false;
          for (          UUID attackingCreatureId : getAttackers()) {
            if (creature.canBlock(attackingCreatureId,game)) {
              mayBlock=true;
              break;
            }
          }
          if (mayBlock) {
            if (controller.isHuman()) {
              game.informPlayer(controller,"Creature should block this turn: " + creature.getName());
            }
 else {
              Player defender=game.getPlayer(creature.getControllerId());
              if (defender != null) {
                for (                UUID attackingCreatureId : getAttackers()) {
                  if (creature.canBlock(attackingCreatureId,game)) {
                    defender.declareBlocker(defender.getId(),creature.getId(),attackingCreatureId,game);
                    break;
                  }
                }
              }
            }
            return false;
          }
        }
      }
    }
  }
  for (  UUID toBeBlockedCreatureId : mustBeBlockedByAtLeastOne.keySet()) {
    for (    CombatGroup combatGroup : game.getCombat().getGroups()) {
      if (combatGroup.getBlockers().isEmpty() && combatGroup.getAttackers().contains(toBeBlockedCreatureId)) {
        if (controller.isHuman()) {
          Permanent toBeBlockedCreature=game.getPermanent(toBeBlockedCreatureId);
          if (toBeBlockedCreature != null) {
            game.informPlayer(controller,new StringBuilder(toBeBlockedCreature.getName()).append(" has to be blocked by at least one creature.").toString());
          }
          return false;
        }
 else {
          UUID blockingCreatureId=mustBeBlockedByAtLeastOne.get(toBeBlockedCreatureId).iterator().next();
          Permanent blockingCreature=game.getPermanent(blockingCreatureId);
          if (blockingCreature != null) {
            Player defender=game.getPlayer(blockingCreature.getControllerId());
            if (defender != null) {
              defender.declareBlocker(defender.getId(),blockingCreatureId,toBeBlockedCreatureId,game);
            }
          }
        }
      }
    }
  }
  return true;
}
