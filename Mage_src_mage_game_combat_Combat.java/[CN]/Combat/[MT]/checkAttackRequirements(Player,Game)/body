{
  for (  Permanent creature : player.getAvailableAttackers(game)) {
    boolean mustAttack=false;
    Set<UUID> defendersForcedToAttack=new HashSet<>();
    for (    Map.Entry<RequirementEffect,HashSet<Ability>> entry : game.getContinuousEffects().getApplicableRequirementEffects(creature,game).entrySet()) {
      RequirementEffect effect=entry.getKey();
      if (effect.mustAttack(game)) {
        mustAttack=true;
        for (        Ability ability : entry.getValue()) {
          UUID defenderId=effect.mustAttackDefender(ability,game);
          if (defenderId != null) {
            if (defenders.contains(defenderId)) {
              defendersForcedToAttack.add(defenderId);
            }
          }
          break;
        }
      }
    }
    if (mustAttack) {
      creaturesForcedToAttack.put(creature.getId(),defendersForcedToAttack);
      if (defendersForcedToAttack.isEmpty()) {
        if (defenders.size() == 1) {
          player.declareAttacker(creature.getId(),defenders.iterator().next(),game,false);
        }
 else {
          TargetDefender target=new TargetDefender(defenders,creature.getId());
          target.setRequired(true);
          if (player.chooseTarget(Outcome.Damage,target,null,game)) {
            player.declareAttacker(creature.getId(),target.getFirstTarget(),game,false);
          }
        }
      }
 else {
        player.declareAttacker(creature.getId(),defendersForcedToAttack.iterator().next(),game,false);
      }
    }
  }
}
