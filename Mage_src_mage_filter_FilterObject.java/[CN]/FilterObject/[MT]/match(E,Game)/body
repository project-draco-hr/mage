{
  if (!super.match(object,game)) {
    return notFilter;
  }
  if (useColor) {
    if (scopeColor == ComparisonScope.All) {
      if (object.getColor().equals(color) == notColor) {
        return notFilter;
      }
    }
 else     if (object.getColor().contains(color) == notColor) {
      if (useColorless && colorless) {
        if (object.getColor().isColorless() != colorless) {
          return notFilter;
        }
      }
 else {
        return notFilter;
      }
    }
  }
 else   if (useColorless && object.getColor().isColorless() != colorless) {
    return notFilter;
  }
  if (cardType.size() > 0) {
    if (!compCardType.compare(cardType,object.getCardType(),scopeCardType,false))     return notFilter;
  }
  if (notCardType.size() > 0) {
    if (compCardType.compare(notCardType,object.getCardType(),scopeNotCardType,false))     return notFilter;
  }
  if (subtype.size() > 0) {
    if (!object.getAbilities().contains(ChangelingAbility.getInstance())) {
      if (!compString.compare(subtype,object.getSubtype(),scopeSubtype,notSubtype))       return notFilter;
    }
  }
  if (supertype.size() > 0) {
    if (!compString.compare(supertype,object.getSupertype(),scopeSupertype,notSupertype))     return notFilter;
  }
  if (abilities.size() > 0) {
    List<Ability> test=new ArrayList<Ability>(abilities);
    for (    Ability ability : object.getAbilities()) {
      for (      Ability abilityTest : test) {
        if (ability == abilityTest || ability.getClass().equals(abilityTest.getClass())) {
          test.remove(abilityTest);
          break;
        }
      }
    }
    if (test.isEmpty() == notAbilities)     return notFilter;
  }
  if (powerComparison != null) {
    if (!compareInts(object.getPower().getValue(),power,powerComparison))     return notFilter;
  }
  if (toughnessComparison != null) {
    if (!compareInts(object.getToughness().getValue(),toughness,toughnessComparison))     return notFilter;
  }
  return !notFilter;
}
