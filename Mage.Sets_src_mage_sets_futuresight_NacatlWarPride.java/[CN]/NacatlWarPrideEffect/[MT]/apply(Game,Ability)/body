{
  Permanent origNactalWarPride=game.getPermanent(source.getSourceId());
  if (origNactalWarPride == null) {
    return false;
  }
  UUID defenderId=game.getCombat().getDefendingPlayerId(origNactalWarPride.getId(),game);
  int count=0;
  if (defenderId != null) {
    count=game.getBattlefield().countAll(new FilterControlledCreaturePermanent(),defenderId,game);
  }
  if (count == 0) {
    return false;
  }
  List<Permanent> copies=new ArrayList<>();
  for (int i=0; i < count; i++) {
    EmptyToken token=new EmptyToken();
    CardUtil.copyTo(token).from(origNactalWarPride);
    token.putOntoBattlefield(1,game,source.getSourceId(),source.getControllerId(),true,true);
    for (    UUID tokenId : token.getLastAddedTokenIds()) {
      Permanent tokenPermanent=game.getPermanent(tokenId);
      if (tokenPermanent != null) {
        copies.add(tokenPermanent);
      }
    }
  }
  if (!copies.isEmpty()) {
    FixedTargets fixedTargets=new FixedTargets(copies,game);
    ExileTargetEffect exileEffect=new ExileTargetEffect();
    exileEffect.setTargetPointer(fixedTargets);
    DelayedTriggeredAbility delayedAbility=new AtTheBeginOfNextEndStepDelayedTriggeredAbility(exileEffect);
    delayedAbility.setSourceId(source.getSourceId());
    delayedAbility.setControllerId(source.getControllerId());
    delayedAbility.setSourceObject(source.getSourceObject(game),game);
    game.addDelayedTriggeredAbility(delayedAbility);
    return true;
  }
  return false;
}
