{
  StringBuilder sb=new StringBuilder("Target ");
switch (targetController) {
case OPPONENT:
    sb.append("opponent");
  break;
case ANY:
sb.append("player");
break;
default :
throw new UnsupportedOperationException("target controller not supported");
}
if (revealAllCards) {
sb.append(" reveals his or her hand");
}
 else {
if (numberCardsToReveal instanceof StaticValue) {
sb.append(" reveals ");
sb.append(numberCardsToReveal.getMessage());
sb.append(" from his or her hand");
}
 else {
sb.append(" reveals a number of cards from his or her hand equal to ");
sb.append(numberCardsToReveal.getMessage());
}
}
sb.append(". You choose ");
boolean discardMultipleCards=!numberCardsToDiscard.toString().equals("1");
if (discardMultipleCards) {
sb.append(numberCardsToDiscard).append(" ");
}
 else {
if (!filter.getMessage().startsWith("a ") && !filter.getMessage().startsWith("an ")) {
sb.append("a ");
}
}
sb.append(filter.getMessage());
if (revealAllCards) {
sb.append(" from it.");
}
 else {
sb.append(" of them.");
}
sb.append(" That player discards ").append(discardMultipleCards ? "those cards" : "that card");
return sb.toString();
}
