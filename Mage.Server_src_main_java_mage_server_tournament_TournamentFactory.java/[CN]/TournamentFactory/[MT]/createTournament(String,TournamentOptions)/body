{
  Tournament tournament;
  Constructor<Tournament> con;
  try {
    con=tournaments.get(tournamentType).getConstructor(new Class[]{TournamentOptions.class});
    tournament=con.newInstance(new Object[]{options});
    tournament.setTournamentType(tournamentTypes.get(tournamentType));
    Map<String,Integer> setInfo=new LinkedHashMap<>();
    for (    String setCode : options.getLimitedOptions().getSetCodes()) {
      tournament.getSets().add(Sets.findSet(setCode));
      int count=setInfo.containsKey(setCode) ? setInfo.get(setCode) : 0;
      setInfo.put(setCode,count + 1);
    }
    if (tournament.getTournamentType().isLimited()) {
      tournament.getOptions().getLimitedOptions().setNumberBoosters(tournament.getTournamentType().getNumBoosters());
      if (tournament.getTournamentType().isCubeBooster()) {
        tournament.getOptions().getLimitedOptions().setDraftCube(CubeFactory.getInstance().createDraftCube(tournament.getOptions().getLimitedOptions().getDraftCubeName()));
        tournament.setBoosterInfo(tournament.getOptions().getLimitedOptions().getDraftCubeName());
      }
 else {
        StringBuilder sb=new StringBuilder();
        for (        Map.Entry<String,Integer> entry : setInfo.entrySet()) {
          sb.append(entry.getValue().toString()).append("x").append(entry.getKey()).append(" ");
        }
        tournament.setBoosterInfo(sb.toString());
      }
    }
  }
 catch (  Exception ex) {
    logger.fatal("TournamentFactory error ",ex);
    return null;
  }
  logger.debug("Tournament created: " + tournamentType);
  return tournament;
}
