{
  BufferedInputStream in;
  BufferedOutputStream out;
  File base=new File(Constants.IO.imageBaseDir);
  if (!base.exists()) {
    base.mkdir();
  }
  if (type == 0)   p=Proxy.NO_PROXY;
 else   try {
    p=new Proxy(types[type],new InetSocketAddress(addr.getText(),Integer.parseInt(port.getText())));
  }
 catch (  Exception ex) {
    throw new RuntimeException("Gui_DownloadPictures : error 1 - " + ex);
  }
  if (p != null) {
    HashSet<String> ignoreUrls=SettingsManager.getIntance().getIgnoreUrls();
    update(0);
    for (int i=0; (checkBox.isSelected() ? i < cardsInGame.size() : i < cards.size()) && !cancel; i++) {
      try {
        CardUrl card=checkBox.isSelected() ? cardsInGame.get(i) : cards.get(i);
        log.info("Downloading card: " + card.name + " ("+ card.set+ ")");
        URL url=new URL(CardImageUtils.generateURL(card.collector,card.set));
        if (ignoreUrls.contains(card.set) || card.token) {
          if (card.collector != 0) {
            continue;
          }
          url=new URL(card.url);
        }
        Runnable task=new DownloadTask(card,url);
        executor.execute(task);
      }
 catch (      Exception ex) {
        log.error(ex,ex);
      }
    }
    executor.shutdown();
    while (!executor.isTerminated()) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException ie) {
      }
    }
  }
  close.setText("Close");
}
