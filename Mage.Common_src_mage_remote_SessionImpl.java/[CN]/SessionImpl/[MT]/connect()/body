{
  sessionState=SessionState.CONNECTING;
  try {
    System.setProperty("http.nonProxyHosts","code.google.com");
    System.setProperty("socksNonProxyHosts","code.google.com");
    System.clearProperty("socksProxyHost");
    System.clearProperty("socksProxyPort");
    System.clearProperty("http.proxyHost");
    System.clearProperty("http.proxyPort");
switch (connection.getProxyType()) {
case SOCKS:
      System.setProperty("socksProxyHost",connection.getProxyHost());
    System.setProperty("socksProxyPort",Integer.toString(connection.getProxyPort()));
  break;
case HTTP:
System.setProperty("http.proxyHost",connection.getProxyHost());
System.setProperty("http.proxyPort",Integer.toString(connection.getProxyPort()));
Authenticator.setDefault(new MageAuthenticator(connection.getProxyUsername(),connection.getProxyPassword()));
break;
}
InvokerLocator clientLocator=new InvokerLocator(connection.getURI());
Map<String,String> metadata=new HashMap<>();
metadata.put(SocketWrapper.WRITE_TIMEOUT,"2000");
metadata.put("generalizeSocketException","true");
server=(MageServer)TransporterClient.createTransporterClient(clientLocator.getLocatorURI(),MageServer.class,metadata);
Map<String,String> clientMetadata=new HashMap<>();
clientMetadata.put(SocketWrapper.WRITE_TIMEOUT,"2000");
clientMetadata.put("generalizeSocketException","true");
clientMetadata.put(Client.ENABLE_LEASE,"true");
clientMetadata.put("numberOfCallRetries","1");
clientMetadata.put(Client.MAX_NUM_ONEWAY_THREADS,"10");
clientMetadata.put(Remoting.USE_CLIENT_CONNECTION_IDENTITY,"true");
callbackClient=new Client(clientLocator,"callback",clientMetadata);
Map<String,String> listenerMetadata=new HashMap<>();
if (debugMode) {
listenerMetadata.put(ConnectionValidator.VALIDATOR_PING_PERIOD,"1000000");
listenerMetadata.put(ConnectionValidator.VALIDATOR_PING_TIMEOUT,"900000");
}
 else {
listenerMetadata.put(ConnectionValidator.VALIDATOR_PING_PERIOD,"15000");
listenerMetadata.put(ConnectionValidator.VALIDATOR_PING_TIMEOUT,"13000");
}
callbackClient.connect(new ClientConnectionListener(),listenerMetadata);
Map<String,String> callbackMetadata=new HashMap<>();
callbackMetadata.put(Bisocket.IS_CALLBACK_SERVER,"true");
if (callbackHandler == null) {
callbackHandler=new CallbackHandler();
}
callbackClient.addListener(callbackHandler,callbackMetadata);
Set callbackConnectors=callbackClient.getCallbackConnectors(callbackHandler);
if (callbackConnectors.size() != 1) {
logger.warn("There should be one callback Connector (number existing = " + callbackConnectors.size() + ")");
}
logger.info("Trying to connect as " + (this.getUserName() == null ? "" : this.getUserName()) + " to XMAGE server at "+ connection.getHost()+ ":"+ connection.getPort());
callbackClient.invoke(null);
this.sessionId=callbackClient.getSessionId();
boolean registerResult;
if (connection.getPassword() == null) {
UserDataView userDataView=new UserDataView(connection.getAvatarId(),connection.isShowAbilityPickerForced(),connection.allowRequestShowHandCards(),connection.confirmEmptyManaPool(),connection.getUserSkipPrioritySteps());
registerResult=server.registerClient(connection.getUsername(),sessionId,client.getVersion());
if (registerResult) {
server.setUserData(connection.getUsername(),sessionId,userDataView);
}
}
 else {
registerResult=server.registerAdmin(connection.getPassword(),sessionId,client.getVersion());
}
if (registerResult) {
sessionState=SessionState.CONNECTED;
serverState=server.getServerState();
if (!connection.getUsername().equals("Admin")) {
updateDatabase(connection.isForceDBComparison(),serverState);
}
logger.info("Connected as " + (this.getUserName() == null ? "" : this.getUserName()) + " to MAGE server at "+ connection.getHost()+ ":"+ connection.getPort());
client.connected(this.getUserName() == null ? "" : this.getUserName() + "@" + connection.getHost()+ ":"+ connection.getPort()+ " ");
return true;
}
disconnect(false);
}
 catch (MalformedURLException ex) {
logger.fatal("",ex);
client.showMessage("Unable to connect to server. " + ex.getMessage());
}
catch (UndeclaredThrowableException ex) {
String addMessage="";
if (ex.getCause() instanceof InvocationFailureException) {
InvocationFailureException exep=(InvocationFailureException)ex.getCause();
if (exep.getCause() instanceof IOException) {
if (exep.getCause().getMessage().startsWith("Field hash null is not available on current")) {
addMessage="Probabaly the server version is not compatible to the client. ";
}
}
}
if (addMessage.isEmpty()) {
logger.fatal("",ex);
}
client.showMessage("Unable to connect to server. " + addMessage + (ex.getMessage() != null ? ex.getMessage() : ""));
}
catch (IOException ex) {
logger.fatal("",ex);
String addMessage="";
if (ex.getMessage() != null && ex.getMessage().startsWith("Unable to perform invocation")) {
addMessage="Maybe the server version is not compatible. ";
}
client.showMessage("Unable to connect to server. " + addMessage + ex.getMessage() != null ? ex.getMessage() : "");
}
catch (MageVersionException ex) {
if (!canceled) {
client.showMessage("Unable to connect to server. " + ex.getMessage());
}
disconnect(false);
}
catch (CannotConnectException ex) {
if (!canceled) {
handleCannotConnectException(ex);
}
}
catch (Throwable t) {
logger.fatal("Unable to connect to server - ",t);
if (!canceled) {
disconnect(false);
StringBuilder sb=new StringBuilder();
sb.append("Unable to connect to server.\n");
for (StackTraceElement element : t.getStackTrace()) {
sb.append(element.toString()).append("\n");
}
client.showMessage(sb.toString());
}
}
return false;
}
