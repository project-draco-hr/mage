{
  return new Thread(new Runnable(){
    @Override public void run(){
      if (bigImage == null) {
        return;
      }
      final HueFilter filter=FilterFactory.getHueFilter();
      int sign=1;
      while (true) {
        boolean prevState=foilState;
        while (!foilState) {
          ThreadUtils.sleep(10);
        }
        if (prevState == foilState) {
          ThreadUtils.sleep(DEFAULT_DELAY_PERIOD);
        }
        hue+=dh * sign;
        if (hue < LEFT_BOUNDARY) {
          sign*=-1;
          hue=LEFT_BOUNDARY;
        }
 else         if (hue > RIGHT_BOUNDARY) {
          sign*=-1;
          hue=RIGHT_BOUNDARY;
        }
        filter.setHue(hue);
        BufferedImage f=null;
synchronized (BigCard.this) {
          if (source == null) {
            source=BufferedImageBuilder.bufferImage(bigImage);
          }
          f=filter.filter(source,null);
        }
synchronized (BigCard.class) {
          foil=f;
        }
        SwingUtilities.invokeLater(new Runnable(){
          @Override public void run(){
            BigCard.this.repaint();
          }
        }
);
      }
    }
  }
);
}
