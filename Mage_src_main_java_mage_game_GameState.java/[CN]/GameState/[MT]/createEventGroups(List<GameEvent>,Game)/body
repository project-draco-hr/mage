{
class ZoneChangeData {
    private final Zone fromZone;
    private final Zone toZone;
    private final UUID sourceId;
    private final UUID playerId;
    public ZoneChangeData(    UUID sourceId,    UUID playerId,    Zone fromZone,    Zone toZone){
      this.sourceId=sourceId;
      this.playerId=playerId;
      this.fromZone=fromZone;
      this.toZone=toZone;
    }
    @Override public int hashCode(){
      return (this.fromZone.ordinal() + 1) * 1 + (this.toZone.ordinal() + 1) * 10 + (this.sourceId != null ? this.sourceId.hashCode() : 0) + (this.playerId != null ? this.playerId.hashCode() : 0);
    }
    @Override public boolean equals(    Object obj){
      if (obj instanceof ZoneChangeData) {
        ZoneChangeData data=(ZoneChangeData)obj;
        return this.fromZone == data.fromZone && this.toZone == data.toZone && this.sourceId == data.sourceId && this.playerId == data.playerId;
      }
      return false;
    }
  }
  Map<ZoneChangeData,List<GameEvent>> eventsByKey=new HashMap<>();
  List<GameEvent> groupEvents=new LinkedList<>();
  for (  GameEvent event : events) {
    if (event instanceof ZoneChangeEvent) {
      ZoneChangeEvent castEvent=(ZoneChangeEvent)event;
      ZoneChangeData key=new ZoneChangeData(castEvent.getSourceId(),castEvent.getPlayerId(),castEvent.getFromZone(),castEvent.getToZone());
      if (eventsByKey.containsKey(key)) {
        eventsByKey.get(key).add(event);
      }
 else {
        List<GameEvent> list=new LinkedList<>();
        list.add(event);
        eventsByKey.put(key,list);
      }
    }
  }
  for (  Map.Entry<ZoneChangeData,List<GameEvent>> entry : eventsByKey.entrySet()) {
    Set<Card> movedCards=new LinkedHashSet<>();
    for (Iterator<GameEvent> it=entry.getValue().iterator(); it.hasNext(); ) {
      GameEvent event=it.next();
      ZoneChangeEvent castEvent=(ZoneChangeEvent)event;
      UUID targetId=castEvent.getTargetId();
      Card card=game.getCard(targetId);
      movedCards.add(card);
    }
    ZoneChangeData eventData=entry.getKey();
    if (!movedCards.isEmpty()) {
      ZoneChangeGroupEvent event=new ZoneChangeGroupEvent(movedCards,eventData.sourceId,eventData.playerId,eventData.fromZone,eventData.toZone);
      groupEvents.add(event);
    }
  }
  return groupEvents;
}
