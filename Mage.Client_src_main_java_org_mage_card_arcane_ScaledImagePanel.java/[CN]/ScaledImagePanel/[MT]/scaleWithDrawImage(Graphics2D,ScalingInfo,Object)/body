{
  g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,hint);
  int tempDestWidth=info.srcWidth / 2, tempDestHeight=info.srcHeight / 2;
  if (tempDestWidth < info.targetWidth) {
    tempDestWidth=info.targetWidth;
  }
  if (tempDestHeight < info.targetHeight) {
    tempDestHeight=info.targetHeight;
  }
  Image srcImage=getSourceImage(info);
  if (multiPassType == MultipassType.none || (tempDestWidth == info.targetWidth && tempDestHeight == info.targetHeight)) {
    g2.drawImage(srcImage,info.x,info.y,info.targetWidth,info.targetHeight,null);
    return;
  }
  BufferedImage tempImage=new BufferedImage(tempDestWidth,tempDestHeight,BufferedImage.TYPE_INT_RGB);
  Graphics2D g2temp=tempImage.createGraphics();
switch (multiPassType) {
case nearestNeighbor:
    g2temp.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR);
  break;
case bilinear:
g2temp.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BILINEAR);
break;
case bicubic:
g2temp.setRenderingHint(RenderingHints.KEY_INTERPOLATION,RenderingHints.VALUE_INTERPOLATION_BICUBIC);
break;
}
g2temp.drawImage(srcImage,0,0,tempDestWidth,tempDestHeight,null);
int tempSrcWidth=tempDestWidth;
int tempSrcHeight=tempDestHeight;
while (true) {
if (tempDestWidth > info.targetWidth) {
tempDestWidth=tempDestWidth / 2;
if (tempDestWidth < info.targetWidth) {
tempDestWidth=info.targetWidth;
}
}
if (tempDestHeight > info.targetHeight) {
tempDestHeight=tempDestHeight / 2;
if (tempDestHeight < info.targetHeight) {
tempDestHeight=info.targetHeight;
}
}
if (tempDestWidth == info.targetWidth && tempDestHeight == info.targetHeight) {
break;
}
g2temp.drawImage(tempImage,0,0,tempDestWidth,tempDestHeight,0,0,tempSrcWidth,tempSrcHeight,null);
tempSrcWidth=tempDestWidth;
tempSrcHeight=tempDestHeight;
}
g2temp.dispose();
g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,hint);
g2.drawImage(tempImage,info.x,info.y,info.x + info.targetWidth,info.y + info.targetHeight,0,0,tempSrcWidth,tempSrcHeight,null);
}
