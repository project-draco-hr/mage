{
  List<Permanent> lands=game.getBattlefield().getActivePermanents(filter,source.getControllerId(),game);
  Mana types=new Mana();
  for (  Permanent land : lands) {
    Abilities<ManaAbility> mana=land.getAbilities().getManaAbilities(Zone.BATTLEFIELD);
    for (    ManaAbility ability : mana) {
      types.add(ability.getNetMana(game));
    }
  }
  Choice choice=new ChoiceImpl(true);
  choice.setMessage("Pick a mana color");
  if (types.getBlack() > 0) {
    choice.getChoices().add("Black");
  }
  if (types.getRed() > 0) {
    choice.getChoices().add("Red");
  }
  if (types.getBlue() > 0) {
    choice.getChoices().add("Blue");
  }
  if (types.getGreen() > 0) {
    choice.getChoices().add("Green");
  }
  if (types.getWhite() > 0) {
    choice.getChoices().add("White");
  }
  if (types.getColorless() > 0) {
    choice.getChoices().add("Colorless");
  }
  if (types.getAny() > 0) {
    choice.getChoices().add("Black");
    choice.getChoices().add("Red");
    choice.getChoices().add("Blue");
    choice.getChoices().add("Green");
    choice.getChoices().add("White");
    choice.getChoices().add("Colorless");
  }
  if (choice.getChoices().size() > 0) {
    Player player=game.getPlayer(source.getControllerId());
    if (choice.getChoices().size() == 1) {
      choice.setChoice(choice.getChoices().iterator().next());
    }
 else {
      player.choose(outcome,choice,game);
    }
    if (choice.getChoice() != null) {
switch (choice.getChoice()) {
case "Black":
        player.getManaPool().addMana(Mana.BlackMana,game,source);
      break;
case "Blue":
    player.getManaPool().addMana(Mana.BlueMana,game,source);
  break;
case "Red":
player.getManaPool().addMana(Mana.RedMana,game,source);
break;
case "Green":
player.getManaPool().addMana(Mana.GreenMana,game,source);
break;
case "White":
player.getManaPool().addMana(Mana.WhiteMana,game,source);
break;
case "Colorless":
player.getManaPool().addMana(Mana.ColorlessMana,game,source);
break;
}
return true;
}
return false;
}
return true;
}
