{
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    controller.drawCards(2,game);
    CardsDrawnThisTurnWatcher watcher=(CardsDrawnThisTurnWatcher)game.getState().getWatchers().get("CardsDrawnThisTurnWatcher");
    if (watcher != null) {
      Cards cards=new CardsImpl();
      Set<UUID> cardsDrawnThisTurn=watcher.getCardsDrawnThisTurn(controller.getId());
      for (      UUID cardId : controller.getHand()) {
        if (cardsDrawnThisTurn != null && cardsDrawnThisTurn.contains(cardId)) {
          Card card=game.getCard(cardId);
          if (card != null) {
            cards.add(card);
          }
        }
      }
      int numberOfTargets=Math.min(2,cards.size());
      if (numberOfTargets > 0) {
        FilterCard filter=new FilterCard(numberOfTargets + " cards of cards drawn this turn");
        filter.add(new CardIdPredicate(cards));
        TargetCardInHand target=new TargetCardInHand(numberOfTargets,filter);
        controller.choose(outcome,target,source.getSourceId(),game);
        Cards cardsPutBack=new CardsImpl();
        for (        UUID cardId : target.getTargets()) {
          Card card=cards.get(cardId,game);
          if (card != null) {
            if (controller.canPayLifeCost() && controller.getLife() >= 4 && controller.chooseUse(outcome,"Pay 4 life for " + card.getLogName() + "? (Otherwise it's put on top of your library)",source,game)) {
              controller.loseLife(4,game,false);
              game.informPlayers(controller.getLogName() + " pays 4 life to keep a card on hand");
            }
 else {
              cardsPutBack.add(card);
            }
          }
        }
        controller.putCardsOnTopOfLibrary(cardsPutBack,game,source,applyEffectsAfter);
      }
    }
    return true;
  }
  return false;
}
