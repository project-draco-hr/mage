{
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Map<UUID,Map<Integer,Set<UUID>>> playerPermanents=new LinkedHashMap<>();
    PlayerList playerList=game.getState().getPlayerList();
    while (!playerList.get().equals(source.getControllerId()) && controller.isInGame()) {
      playerList.getNext();
    }
    Player currentPlayer=game.getPlayer(playerList.get());
    Player nextPlayer;
    UUID firstNextPlayer=null;
    while (!getNextPlayerInDirection(true,playerList,game).equals(firstNextPlayer) && controller.isInGame()) {
      nextPlayer=game.getPlayer(playerList.get());
      if (nextPlayer == null) {
        return false;
      }
      if (firstNextPlayer == null) {
        firstNextPlayer=nextPlayer.getId();
      }
      if (currentPlayer != null && controller.getInRange().contains(currentPlayer.getId())) {
        Map<Integer,Set<UUID>> playerPiles=new HashMap<>();
        for (int i=1; i < 4; i++) {
          playerPiles.put(i,new LinkedHashSet<UUID>());
        }
        playerPermanents.put(currentPlayer.getId(),playerPiles);
        for (int i=1; i < 3; i++) {
          FilterPermanent filter=new FilterPermanent(new StringBuilder("the permanents for the ").append(i == 1 ? "first " : "second ").append("pile").toString());
          filter.add(new ControllerIdPredicate(currentPlayer.getId()));
          Target target;
          if (i == 1) {
            target=new TargetPermanent(0,Integer.MAX_VALUE,filter,true);
          }
 else {
            target=new TargetSecondPilePermanent(playerPiles.get(1),filter);
          }
          currentPlayer.chooseTarget(outcome,target,source,game);
          StringBuilder message=new StringBuilder(currentPlayer.getName()).append(" pile ").append(i).append(": ");
          if (target.getTargets().isEmpty()) {
            message.append(" (empty)");
          }
 else {
            for (            UUID permanentId : target.getTargets()) {
              Permanent permanent=game.getPermanent(permanentId);
              if (permanent != null) {
                message.append(permanent.getName()).append(" ");
              }
            }
          }
          game.informPlayers(message.toString());
          playerPiles.get(i).addAll(target.getTargets());
        }
        StringBuilder message=new StringBuilder(currentPlayer.getName()).append(" pile 3: ");
        for (        Permanent permanent : game.getState().getBattlefield().getAllActivePermanents(currentPlayer.getId())) {
          if (!playerPiles.get(1).contains(permanent.getId()) && !playerPiles.get(2).contains(permanent.getId())) {
            playerPiles.get(3).add(permanent.getId());
            message.append(permanent.getName()).append(" ");
          }
        }
        if (playerPiles.get(3).isEmpty()) {
          message.append(" (empty)");
        }
        game.informPlayers(message.toString());
      }
      currentPlayer=nextPlayer;
    }
    for (    Map.Entry<UUID,Map<Integer,Set<UUID>>> playerPiles : playerPermanents.entrySet()) {
      Player player=game.getPlayer(playerPiles.getKey());
      if (player != null) {
        int sacrificePile=rnd.nextInt(3) + 1;
        game.informPlayers(new StringBuilder(player.getName()).append(" sacrifices pile number ").append(sacrificePile).toString());
        for (        UUID permanentId : playerPiles.getValue().get(sacrificePile)) {
          Permanent permanent=game.getPermanent(permanentId);
          if (permanent != null) {
            permanent.sacrifice(source.getSourceId(),game);
          }
        }
      }
    }
    return true;
  }
  return false;
}
