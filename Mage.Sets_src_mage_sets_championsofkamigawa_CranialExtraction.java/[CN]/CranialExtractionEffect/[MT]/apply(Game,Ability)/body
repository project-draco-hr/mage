{
  Player player=game.getPlayer(targetPointer.getFirst(game,source));
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (player != null && controller != null) {
    Choice cardChoice=new ChoiceImpl();
    cardChoice.setChoices(CardRepository.instance.getNonLandNames());
    cardChoice.clearChoice();
    while (!controller.choose(Outcome.Exile,cardChoice,game)) {
      if (!controller.isInGame()) {
        return false;
      }
    }
    String cardName=cardChoice.getChoice();
    game.informPlayers(sourceObject.getLogName() + ", named card: [" + cardName+ "]");
    for (    Card card : player.getGraveyard().getCards(game)) {
      if (card.getName().equals(cardName)) {
        controller.moveCardToExileWithInfo(card,null,"",source.getSourceId(),game,Zone.GRAVEYARD,true);
      }
    }
    for (    Card card : player.getHand().getCards(game)) {
      if (card.getName().equals(cardName)) {
        controller.moveCardToExileWithInfo(card,null,"",source.getSourceId(),game,Zone.HAND,true);
      }
    }
    for (    Card card : player.getLibrary().getCards(game)) {
      if (card.getName().equals(cardName)) {
        controller.moveCardToExileWithInfo(card,null,"",source.getSourceId(),game,Zone.LIBRARY,true);
      }
    }
    controller.lookAtCards(sourceObject.getLogName() + " Hand",player.getHand(),game);
    controller.lookAtCards(sourceObject.getLogName() + " Library",new CardsImpl(Zone.PICK,player.getLibrary().getCards(game)),game);
    player.shuffleLibrary(game);
  }
  return true;
}
