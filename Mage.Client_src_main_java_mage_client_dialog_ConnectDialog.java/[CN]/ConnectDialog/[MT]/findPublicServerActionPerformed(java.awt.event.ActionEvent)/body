{
  BufferedReader in=null;
  try {
    URL serverListURL=new URL(PreferencesDialog.getCachedValue(PreferencesDialog.KEY_CONNECTION_URL_SERVER_LIST,"http://176.31.186.181/files/server-list.txt"));
    Connection.ProxyType configProxyType=Connection.ProxyType.valueByText(PreferencesDialog.getCachedValue(PreferencesDialog.KEY_PROXY_TYPE,"None"));
    Proxy p=null;
    Proxy.Type type=Proxy.Type.DIRECT;
switch (configProxyType) {
case HTTP:
      type=Proxy.Type.HTTP;
    break;
case SOCKS:
  type=Proxy.Type.SOCKS;
break;
case NONE:
default :
p=Proxy.NO_PROXY;
break;
}
if (p == null || !p.equals(Proxy.NO_PROXY)) {
try {
String address=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_PROXY_ADDRESS,"");
Integer port=Integer.parseInt(PreferencesDialog.getCachedValue(PreferencesDialog.KEY_PROXY_PORT,"80"));
p=new Proxy(type,new InetSocketAddress(address,port));
}
 catch (Exception ex) {
throw new RuntimeException("Gui_DownloadPictures : error 1 - " + ex);
}
}
if (p == null) {
JOptionPane.showMessageDialog(null,"Couldn't configure Proxy object!","Error",JOptionPane.ERROR_MESSAGE);
return;
}
boolean URLNotFound=false;
try {
in=new BufferedReader(new InputStreamReader(serverListURL.openConnection(p).getInputStream()));
}
 catch (FileNotFoundException|UnknownHostException ex) {
logger.warn("Could not read serverlist from: " + serverListURL.toString());
File f=new File("serverlist.txt");
if (f.exists() && !f.isDirectory()) {
logger.info("Using buffered serverlist: serverlist.txt");
URLNotFound=true;
in=new BufferedReader(new FileReader("serverlist.txt"));
}
}
List<String> servers=new ArrayList<>();
if (in != null) {
Writer output=null;
if (!URLNotFound) {
File file=new File("serverlist.txt");
if (file.exists() && !file.isDirectory()) {
file.delete();
}
output=new BufferedWriter(new FileWriter(file));
}
String inputLine;
while ((inputLine=in.readLine()) != null) {
logger.debug("Found server: " + inputLine);
servers.add(inputLine);
if (output != null) {
output.append(inputLine).append('\n');
}
}
if (output != null) {
output.close();
}
in.close();
}
if (servers.isEmpty()) {
JOptionPane.showMessageDialog(null,"Couldn't find any server.");
return;
}
String selectedServer=(String)JOptionPane.showInputDialog(null,"Choose XMage Public Server:","Input",JOptionPane.INFORMATION_MESSAGE,null,servers.toArray(),servers.get(0));
if (selectedServer != null) {
String[] params=selectedServer.split(":");
if (params.length == 3) {
this.txtServer.setText(params[1]);
this.txtPort.setText(params[2]);
}
 else {
JOptionPane.showMessageDialog(null,"Wrong server data format.");
}
}
}
 catch (Exception ex) {
logger.error(ex,ex);
}
 finally {
if (in != null) {
try {
in.close();
}
 catch (Exception e) {
}
}
}
}
