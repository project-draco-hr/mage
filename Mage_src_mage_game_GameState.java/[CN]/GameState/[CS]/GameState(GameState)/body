{
  this.players=state.players.copy();
  this.playerList=state.playerList.copy();
  this.activePlayerId=state.activePlayerId;
  this.priorityPlayerId=state.priorityPlayerId;
  this.choosingPlayerId=state.choosingPlayerId;
  this.turn=state.turn.copy();
  this.stack=state.stack.copy();
  this.command=state.command.copy();
  this.exile=state.exile.copy();
  this.revealed=state.revealed.copy();
  this.lookedAt.putAll(state.lookedAt);
  this.battlefield=state.battlefield.copy();
  this.turnNum=state.turnNum;
  this.stepNum=state.stepNum;
  this.extraTurn=state.extraTurn;
  this.legendaryRuleActive=state.legendaryRuleActive;
  this.gameOver=state.gameOver;
  this.effects=state.effects.copy();
  for (  TriggeredAbility trigger : state.triggered) {
    this.triggered.add(trigger.copy());
  }
  this.triggers=state.triggers.copy();
  this.delayed=state.delayed.copy();
  this.specialActions=state.specialActions.copy();
  this.combat=state.combat.copy();
  this.turnMods=state.turnMods.copy();
  this.watchers=state.watchers.copy();
  for (  Map.Entry<String,Object> entry : state.values.entrySet()) {
    this.values.put(entry.getKey(),entry.getValue());
  }
  this.zones.putAll(state.zones);
  this.paused=state.paused;
  this.simultaneousEvents.addAll(state.simultaneousEvents);
  for (  Map.Entry<UUID,CardState> entry : state.cardState.entrySet()) {
    cardState.put(entry.getKey(),entry.getValue().copy());
  }
  this.zoneChangeCounter.putAll(state.zoneChangeCounter);
  this.copiedCards.putAll(state.copiedCards);
  this.permanentOrderNumber=state.permanentOrderNumber;
}
