{
  System.setProperty("java.util.Arrays.useLegacyMergeSort","true");
  logger.info("Starting MAGE server version " + version);
  logger.info("Logging level: " + logger.getEffectiveLevel());
  String adminPassword="";
  for (  String arg : args) {
    if (arg.startsWith(testModeArg)) {
      testMode=Boolean.valueOf(arg.replace(testModeArg,""));
    }
 else     if (arg.startsWith(adminPasswordArg)) {
      adminPassword=arg.replace(adminPasswordArg,"");
      adminPassword=SystemUtil.sanitize(adminPassword);
    }
 else     if (arg.startsWith(fastDBModeArg)) {
      fastDbMode=Boolean.valueOf(arg.replace(fastDBModeArg,""));
    }
  }
  logger.info("Loading cards...");
  if (fastDbMode) {
    CardScanner.scanned=true;
  }
 else {
    CardScanner.scan();
  }
  logger.info("Done.");
  deleteSavedGames();
  ConfigSettings config=ConfigSettings.getInstance();
  for (  GamePlugin plugin : config.getGameTypes()) {
    GameFactory.getInstance().addGameType(plugin.getName(),loadGameType(plugin),loadPlugin(plugin));
  }
  for (  GamePlugin plugin : config.getTournamentTypes()) {
    TournamentFactory.getInstance().addTournamentType(plugin.getName(),loadTournamentType(plugin),loadPlugin(plugin));
  }
  for (  Plugin plugin : config.getPlayerTypes()) {
    PlayerFactory.getInstance().addPlayerType(plugin.getName(),loadPlugin(plugin));
  }
  for (  Plugin plugin : config.getDraftCubes()) {
    CubeFactory.getInstance().addDraftCube(plugin.getName(),loadPlugin(plugin));
  }
  for (  Plugin plugin : config.getDeckTypes()) {
    DeckValidatorFactory.getInstance().addDeckType(plugin.getName(),loadPlugin(plugin));
  }
  logger.info("Config - max seconds idle: " + config.getMaxSecondsIdle());
  logger.info("Config - max game threads: " + config.getMaxGameThreads());
  logger.info("Config - max AI opponents: " + config.getMaxAiOpponents());
  logger.info("Config - min user name l.: " + config.getMinUserNameLength());
  logger.info("Config - max user name l.: " + config.getMaxUserNameLength());
  logger.info("Config - save game active: " + (config.isSaveGameActivated() ? "True" : "false"));
  logger.info("Config - backlog size    : " + config.getBacklogSize());
  logger.info("Config - lease period    : " + config.getLeasePeriod());
  logger.info("Config - max pool size   : " + config.getMaxPoolSize());
  logger.info("Config - num accp.threads: " + config.getNumAcceptThreads());
  logger.info("Config - second.bind port: " + config.getSecondaryBindPort());
  Connection connection=new Connection("&maxPoolSize=" + config.getMaxPoolSize());
  connection.setHost(config.getServerAddress());
  connection.setPort(config.getPort());
  try {
    InvokerLocator serverLocator=new InvokerLocator(connection.getURI());
    if (!isAlreadyRunning(serverLocator)) {
      server=new MageTransporterServer(serverLocator,new MageServerImpl(adminPassword,testMode),MageServer.class.getName(),new MageServerInvocationHandler());
      server.start();
      logger.info("Started MAGE server - listening on " + connection.toString());
      if (testMode) {
        logger.info("MAGE server running in test mode");
      }
      initStatistics();
    }
 else {
      logger.fatal("Unable to start MAGE server - another server is already started");
    }
  }
 catch (  Exception ex) {
    logger.fatal("Failed to start server - " + connection.toString(),ex);
  }
}
