{
  long latestEndTimeMs=UserStatsRepository.instance.getLatestEndTimeMs();
  List<TableRecord> records=TableRecordRepository.instance.getAfter(latestEndTimeMs);
  for (  TableRecord record : records) {
    TableProto table=record.getProto();
    if (table.getControllerName().equals("System")) {
      continue;
    }
    if (table.hasMatch()) {
      MatchProto match=table.getMatch();
      for (      MatchPlayerProto player : match.getPlayersList()) {
        UserStats userStats=UserStatsRepository.instance.getUser(player.getName());
        UserStatsProto proto=userStats != null ? userStats.getProto() : UserStatsProto.newBuilder().setName(player.getName()).build();
        UserStatsProto.Builder builder=UserStatsProto.newBuilder(proto).setMatches(proto.getMatches() + 1);
switch (player.getQuit()) {
case IDLE_TIMEOUT:
          builder.setMatchesIdleTimeout(proto.getMatchesIdleTimeout() + 1);
        break;
case TIMER_TIMEOUT:
      builder.setMatchesTimerTimeout(proto.getMatchesTimerTimeout() + 1);
    break;
case QUIT:
  builder.setMatchesQuit(proto.getMatchesQuit() + 1);
break;
}
if (userStats == null) {
UserStatsRepository.instance.add(new UserStats(builder.build(),table.getEndTimeMs()));
}
 else {
UserStatsRepository.instance.update(new UserStats(builder.build(),table.getEndTimeMs()));
}
User user=UserManager.getInstance().getUserByName(player.getName());
if (user != null) {
user.resetUserStats();
}
}
}
 else if (table.hasTourney()) {
TourneyProto tourney=table.getTourney();
for (TourneyPlayerProto player : tourney.getPlayersList()) {
UserStats userStats=UserStatsRepository.instance.getUser(player.getName());
UserStatsProto proto=userStats != null ? userStats.getProto() : UserStatsProto.newBuilder().setName(player.getName()).build();
UserStatsProto.Builder builder=UserStatsProto.newBuilder(proto).setTourneys(proto.getTourneys() + 1);
switch (player.getQuit()) {
case DURING_ROUND:
builder.setTourneysQuitDuringRound(proto.getTourneysQuitDuringRound() + 1);
break;
case DURING_DRAFTING:
builder.setTourneysQuitDuringDrafting(proto.getTourneysQuitDuringDrafting() + 1);
break;
case DURING_CONSTRUCTION:
builder.setTourneysQuitDuringConstruction(proto.getTourneysQuitDuringConstruction() + 1);
break;
}
if (userStats == null) {
UserStatsRepository.instance.add(new UserStats(builder.build(),table.getEndTimeMs()));
}
 else {
UserStatsRepository.instance.update(new UserStats(builder.build(),table.getEndTimeMs()));
}
User user=UserManager.getInstance().getUserByName(player.getName());
if (user != null) {
user.resetUserStats();
}
}
}
}
}
