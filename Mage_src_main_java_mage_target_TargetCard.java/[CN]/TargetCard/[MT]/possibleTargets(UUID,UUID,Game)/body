{
  Set<UUID> possibleTargets=new HashSet<>();
  for (  UUID playerId : game.getState().getPlayersInRange(sourceControllerId,game)) {
    Player player=game.getPlayer(playerId);
    if (player != null) {
switch (zone) {
case HAND:
        for (        Card card : player.getHand().getCards(filter,sourceId,sourceControllerId,game)) {
          if (sourceId == null || isNotTarget() || !game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.TARGET,card.getId(),sourceId,sourceControllerId))) {
            possibleTargets.add(card.getId());
          }
        }
      break;
case GRAVEYARD:
    for (    Card card : player.getGraveyard().getCards(filter,sourceId,sourceControllerId,game)) {
      if (sourceId == null || isNotTarget() || !game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.TARGET,card.getId(),sourceId,sourceControllerId))) {
        possibleTargets.add(card.getId());
      }
    }
  break;
case LIBRARY:
for (Card card : player.getLibrary().getUniqueCards(game)) {
  if (sourceId == null || isNotTarget() || !game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.TARGET,card.getId(),sourceId,sourceControllerId))) {
    if (filter.match(card,game)) {
      possibleTargets.add(card.getId());
    }
  }
}
break;
case EXILED:
for (Card card : game.getExile().getPermanentExile().getCards(game)) {
if (sourceId == null || isNotTarget() || !game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.TARGET,card.getId(),sourceId,sourceControllerId))) {
if (filter.match(card,player.getId(),game)) {
  possibleTargets.add(card.getId());
}
}
}
break;
}
}
}
return possibleTargets;
}
