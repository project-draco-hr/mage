{
  if (ability instanceof SpellAbility) {
    Player player=game.getPlayer(controllerId);
    if (player != null) {
      this.resetKicker(game,ability);
      for (      OptionalAdditionalCost kickerCost : kickerCosts) {
        boolean again=true;
        while (player.isInGame() && again) {
          String times="";
          if (kickerCost.isRepeatable()) {
            int activatedCount=getKickedCounter(game,ability);
            times=Integer.toString(activatedCount + 1) + (activatedCount == 0 ? " time " : " times ");
          }
          if (kickerCost.canPay(ability,sourceId,controllerId,game) && player.chooseUse(Outcome.Benefit,"Pay " + times + kickerCost.getText(false)+ " ?",ability,game)) {
            this.activateKicker(kickerCost,ability,game);
            for (Iterator itKickerCost=kickerCost.iterator(); itKickerCost.hasNext(); ) {
              Object kickerCostObject=itKickerCost.next();
              if ((kickerCostObject instanceof Costs) || (kickerCostObject instanceof CostsImpl)) {
                for (@SuppressWarnings("unchecked") Iterator<Cost> itDetails=((Costs)kickerCostObject).iterator(); itDetails.hasNext(); ) {
                  addKickerCostsToAbility(itDetails.next(),ability,game);
                }
              }
 else {
                addKickerCostsToAbility((Cost)kickerCostObject,ability,game);
              }
            }
            again=kickerCost.isRepeatable();
          }
 else {
            again=false;
          }
        }
      }
    }
  }
}
