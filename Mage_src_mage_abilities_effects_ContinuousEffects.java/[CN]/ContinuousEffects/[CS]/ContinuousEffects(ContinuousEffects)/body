{
  this.applyCounters=effect.applyCounters.copy();
  this.planeswalkerRedirectionEffect=effect.planeswalkerRedirectionEffect.copy();
  layeredEffects.ensureCapacity(effect.layeredEffects.size());
  for (  ContinuousEffect entry : effect.layeredEffects) {
    layeredEffects.add((ContinuousEffect)entry.copy());
  }
  replacementEffects.ensureCapacity(effect.replacementEffects.size());
  for (  ReplacementEffect entry : effect.replacementEffects) {
    replacementEffects.add((ReplacementEffect)entry.copy());
  }
  preventionEffects.ensureCapacity(effect.preventionEffects.size());
  for (  PreventionEffect entry : effect.preventionEffects) {
    preventionEffects.add((PreventionEffect)entry.copy());
  }
  requirementEffects.ensureCapacity(effect.requirementEffects.size());
  for (  RequirementEffect entry : effect.requirementEffects) {
    requirementEffects.add((RequirementEffect)entry.copy());
  }
  restrictionEffects.ensureCapacity(effect.restrictionEffects.size());
  for (  RestrictionEffect entry : effect.restrictionEffects) {
    restrictionEffects.add((RestrictionEffect)entry.copy());
  }
  asThoughEffects.ensureCapacity(effect.asThoughEffects.size());
  for (  AsThoughEffect entry : effect.asThoughEffects) {
    asThoughEffects.add((AsThoughEffect)entry.copy());
  }
  costModificationEffects.ensureCapacity(effect.costModificationEffects.size());
  for (  CostModificationEffect entry : effect.costModificationEffects) {
    costModificationEffects.add(entry);
  }
  for (  Entry<UUID,Ability> entry : effect.abilityMap.entrySet()) {
    abilityMap.put(entry.getKey(),entry.getValue().copy());
  }
}
