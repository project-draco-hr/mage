{
  boolean caught=false;
  HashMap<UUID,HashSet<UUID>> consumed=new HashMap<>();
  do {
    HashMap<ReplacementEffect,HashSet<Ability>> rEffects=getApplicableReplacementEffects(event,game);
    for (Iterator<ReplacementEffect> it1=rEffects.keySet().iterator(); it1.hasNext(); ) {
      ReplacementEffect entry=it1.next();
      if (consumed.containsKey(entry.getId())) {
        HashSet<UUID> consumedAbilitiesIds=consumed.get(entry.getId());
        if (rEffects.get(entry) == null || consumedAbilitiesIds.size() == rEffects.get(entry).size()) {
          it1.remove();
        }
 else {
          Iterator it=rEffects.get(entry).iterator();
          while (it.hasNext()) {
            Ability ability=(Ability)it.next();
            if (consumedAbilitiesIds.contains(ability.getId())) {
              it.remove();
            }
          }
        }
      }
    }
    if (rEffects.isEmpty()) {
      break;
    }
    int index;
    boolean onlyOne=false;
    if (rEffects.size() == 1) {
      ReplacementEffect effect=rEffects.keySet().iterator().next();
      HashSet<Ability> abilities=replacementEffects.getAbility(effect.getId());
      if (abilities == null || abilities.size() == 1) {
        onlyOne=true;
      }
    }
    if (onlyOne) {
      index=0;
    }
 else {
      Player player=game.getPlayer(event.getPlayerId());
      index=player.chooseEffect(getReplacementEffectsTexts(rEffects,game),game);
    }
    int checked=0;
    ReplacementEffect rEffect=null;
    Ability rAbility=null;
    for (    Map.Entry<ReplacementEffect,HashSet<Ability>> entry : rEffects.entrySet()) {
      if (entry.getValue() == null) {
        if (checked == index) {
          rEffect=entry.getKey();
          break;
        }
 else {
          checked++;
        }
      }
 else {
        HashSet<Ability> abilities=entry.getValue();
        int size=abilities.size();
        if (index > (checked + size - 1)) {
          checked+=size;
        }
 else {
          rEffect=entry.getKey();
          Iterator it=abilities.iterator();
          while (it.hasNext() && rAbility == null) {
            if (checked == index) {
              rAbility=(Ability)it.next();
            }
 else {
              it.next();
              checked++;
            }
          }
          break;
        }
      }
    }
    if (rEffect != null) {
      event.getAppliedEffects().add(rEffect.getId());
      caught=rEffect.replaceEvent(event,rAbility,game);
    }
    if (caught) {
      break;
    }
    if (rEffect != null) {
      if (consumed.containsKey(rEffect.getId())) {
        HashSet<UUID> set=consumed.get(rEffect.getId());
        if (rAbility != null) {
          if (!set.contains(rAbility.getId())) {
            set.add(rAbility.getId());
          }
        }
      }
 else {
        HashSet<UUID> set=new HashSet<>();
        if (rAbility != null) {
          set.add(rAbility.getId());
        }
        consumed.put(rEffect.getId(),set);
      }
    }
    game.applyEffects();
  }
 while (true);
  return caught;
}
