{
  removeInactiveEffects(game);
  List<ContinuousEffect> activeLayerEffects=getLayeredEffects(game);
  List<ContinuousEffect> layer=filterLayeredEffects(activeLayerEffects,Layer.CopyEffects_1);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.CopyEffects_1,SubLayer.NA,ability,game);
    }
  }
  if (layer.size() > 0) {
    activeLayerEffects=getLayeredEffects(game);
  }
  layer=filterLayeredEffects(activeLayerEffects,Layer.ControlChangingEffects_2);
  while (true) {
    for (    ContinuousEffect effect : layer) {
      HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
      for (      Ability ability : abilities) {
        effect.apply(Layer.ControlChangingEffects_2,SubLayer.NA,ability,game);
      }
    }
    if (!game.getBattlefield().fireControlChangeEvents(game)) {
      break;
    }
    game.getBattlefield().resetPermanentsControl();
  }
  applyLayer(activeLayerEffects,Layer.TextChangingEffects_3,game);
  applyLayer(activeLayerEffects,Layer.TypeChangingEffects_4,game);
  applyLayer(activeLayerEffects,Layer.ColorChangingEffects_5,game);
  Map<ContinuousEffect,List<Ability>> appliedEffectAbilities=new HashMap<>();
  boolean done=false;
  Map<ContinuousEffect,Set<UUID>> waitingEffects=new LinkedHashMap<>();
  Set<UUID> appliedEffects=new HashSet<>();
  while (!done) {
    done=true;
    layer=filterLayeredEffects(activeLayerEffects,Layer.AbilityAddingRemovingEffects_6);
    for (    ContinuousEffect effect : layer) {
      if (activeLayerEffects.contains(effect) && !appliedEffects.contains(effect.getId())) {
        Set<UUID> dependentTo=effect.isDependentTo(layer);
        if (dependentTo != null && !appliedEffects.containsAll(dependentTo)) {
          waitingEffects.put(effect,dependentTo);
          continue;
        }
        List<Ability> appliedAbilities=appliedEffectAbilities.get(effect);
        HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
        for (        Ability ability : abilities) {
          if (appliedAbilities == null || !appliedAbilities.contains(ability)) {
            if (appliedAbilities == null) {
              appliedAbilities=new ArrayList<>();
              appliedEffectAbilities.put(effect,appliedAbilities);
            }
            appliedAbilities.add(ability);
            effect.apply(Layer.AbilityAddingRemovingEffects_6,SubLayer.NA,ability,game);
            done=false;
            activeLayerEffects=getLayeredEffects(game);
          }
        }
        appliedEffects.add(effect.getId());
        if (!waitingEffects.isEmpty()) {
          for (Iterator<Map.Entry<ContinuousEffect,Set<UUID>>> iterator=waitingEffects.entrySet().iterator(); iterator.hasNext(); ) {
            Map.Entry<ContinuousEffect,Set<UUID>> entry=iterator.next();
            if (appliedEffects.containsAll(entry.getValue())) {
              appliedAbilities=appliedEffectAbilities.get(entry.getKey());
              abilities=layeredEffects.getAbility(entry.getKey().getId());
              for (              Ability ability : abilities) {
                if (appliedAbilities == null || !appliedAbilities.contains(ability)) {
                  if (appliedAbilities == null) {
                    appliedAbilities=new ArrayList<>();
                    appliedEffectAbilities.put(entry.getKey(),appliedAbilities);
                  }
                  appliedAbilities.add(ability);
                  entry.getKey().apply(Layer.AbilityAddingRemovingEffects_6,SubLayer.NA,ability,game);
                  done=false;
                  activeLayerEffects=getLayeredEffects(game);
                }
              }
              appliedEffects.add(entry.getKey().getId());
              iterator.remove();
            }
          }
        }
      }
    }
  }
  layer=filterLayeredEffects(activeLayerEffects,Layer.PTChangingEffects_7);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PTChangingEffects_7,SubLayer.CharacteristicDefining_7a,ability,game);
    }
  }
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PTChangingEffects_7,SubLayer.SetPT_7b,ability,game);
    }
  }
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PTChangingEffects_7,SubLayer.ModifyPT_7c,ability,game);
    }
  }
  applyCounters.apply(Layer.PTChangingEffects_7,SubLayer.Counters_7d,null,game);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PTChangingEffects_7,SubLayer.SwitchPT_e,ability,game);
    }
  }
  layer=filterLayeredEffects(activeLayerEffects,Layer.PlayerEffects);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.PlayerEffects,SubLayer.NA,ability,game);
    }
  }
  layer=filterLayeredEffects(activeLayerEffects,Layer.RulesEffects);
  for (  ContinuousEffect effect : layer) {
    HashSet<Ability> abilities=layeredEffects.getAbility(effect.getId());
    for (    Ability ability : abilities) {
      effect.apply(Layer.RulesEffects,SubLayer.NA,ability,game);
    }
  }
}
