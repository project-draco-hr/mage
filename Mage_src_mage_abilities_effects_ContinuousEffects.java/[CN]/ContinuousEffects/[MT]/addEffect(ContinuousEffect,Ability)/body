{
switch (effect.getEffectType()) {
case REPLACEMENT:
case REDIRECTION:
    ReplacementEffect newReplacementEffect=(ReplacementEffect)effect;
  replacementEffects.addEffect(newReplacementEffect,source);
break;
case PREVENTION:
PreventionEffect newPreventionEffect=(PreventionEffect)effect;
preventionEffects.addEffect(newPreventionEffect,source);
break;
case RESTRICTION:
RestrictionEffect newRestrictionEffect=(RestrictionEffect)effect;
restrictionEffects.addEffect(newRestrictionEffect,source);
break;
case RESTRICTION_UNTAP_NOT_MORE_THAN:
RestrictionUntapNotMoreThanEffect newRestrictionUntapNotMoreThanEffect=(RestrictionUntapNotMoreThanEffect)effect;
restrictionUntapNotMoreThanEffects.addEffect(newRestrictionUntapNotMoreThanEffect,source);
break;
case REQUIREMENT:
RequirementEffect newRequirementEffect=(RequirementEffect)effect;
requirementEffects.addEffect(newRequirementEffect,source);
break;
case ASTHOUGH:
AsThoughEffect newAsThoughEffect=(AsThoughEffect)effect;
asThoughEffects.addEffect(newAsThoughEffect,source);
break;
case COSTMODIFICATION:
CostModificationEffect newCostModificationEffect=(CostModificationEffect)effect;
costModificationEffects.addEffect(newCostModificationEffect,source);
break;
case SPLICE:
SpliceCardEffect newSpliceCardEffect=(SpliceCardEffect)effect;
spliceCardEffects.addEffect(newSpliceCardEffect,source);
break;
default :
ContinuousEffect newEffect=(ContinuousEffect)effect;
layeredEffects.addEffect(newEffect,source);
break;
}
}
