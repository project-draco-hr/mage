{
  Set<UUID> playable=new HashSet<>();
  if (!shouldSkipGettingPlayable(game)) {
    ManaOptions available=getManaAvailable(game);
    available.addMana(manaPool.getMana());
    for (    Card card : hand.getCards(game)) {
      Abilities:       for (      Ability ability : card.getAbilities()) {
        if (ability.getZone().match(Zone.HAND)) {
switch (ability.getAbilityType()) {
case PLAY_LAND:
            if (game.getContinuousEffects().preventedByRuleModification(GameEvent.getEvent(GameEvent.EventType.PLAY_LAND,ability.getSourceId(),ability.getSourceId(),playerId),ability,game,true)) {
              break;
            }
          if (canPlay((ActivatedAbility)ability,available,card,game) && game.canPlaySorcery(playerId)) {
            playable.add(card.getId());
            break Abilities;
          }
        break;
case ACTIVATED:
case SPELL:
      if (canPlay((ActivatedAbility)ability,available,card,game)) {
        playable.add(card.getId());
        break Abilities;
      }
    break;
case STATIC:
  if (card.getCardType().contains(CardType.LAND) && ability instanceof AlternativeSourceCosts) {
    if (canLandPlayAlternateSourceCostsAbility(card,available,ability,game)) {
      playable.add(card.getId());
      break Abilities;
    }
  }
}
}
}
}
}
return playable;
}
