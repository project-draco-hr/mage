{
  if (!(ability instanceof ManaAbility)) {
    ActivatedAbility copy=ability.copy();
    copy.setCheckPlayableMode();
    if (!copy.canActivate(playerId,game)) {
      return false;
    }
    game.getContinuousEffects().costModification(copy,game);
    Card card=game.getCard(ability.getSourceId());
    if (card != null) {
      for (      Ability ability0 : card.getAbilities()) {
        if (ability0 instanceof AdjustingSourceCosts) {
          if (!(ability0 instanceof ConvokeAbility)) {
            ((AdjustingSourceCosts)ability0).adjustCosts(copy,game);
          }
        }
      }
    }
    boolean canBeCastRegularly=true;
    if (copy instanceof SpellAbility && copy.getManaCosts().isEmpty() && copy.getCosts().isEmpty()) {
      canBeCastRegularly=false;
    }
    if (canBeCastRegularly) {
      ManaOptions abilityOptions=copy.getManaCostsToPay().getOptions();
      if (abilityOptions.isEmpty()) {
        return true;
      }
 else {
        if (available == null) {
          return true;
        }
        boolean spendAnyMana=game.getContinuousEffects().asThough(ability.getSourceId(),AsThoughEffectType.SPEND_OTHER_MANA,ability,ability.getControllerId(),game);
        for (        Mana mana : abilityOptions) {
          for (          Mana avail : available) {
            if (spendAnyMana && mana.count() <= avail.count()) {
              return true;
            }
            if (mana.enough(avail)) {
              return true;
            }
          }
        }
      }
    }
    for (    Ability objectAbility : sourceObject.getAbilities()) {
      if (objectAbility instanceof AlternativeCostSourceAbility) {
        if (objectAbility.getCosts().canPay(ability,ability.getSourceId(),playerId,game)) {
          return true;
        }
      }
    }
    if (canPlayCardByAlternateCost(card,available,ability,game)) {
      return true;
    }
  }
  return false;
}
