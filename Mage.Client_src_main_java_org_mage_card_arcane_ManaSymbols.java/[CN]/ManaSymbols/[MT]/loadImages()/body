{
  renameSymbols(getSymbolsPath() + File.separator + "symbols");
  smallSymbolsFound=loadSymbolsImages(15);
  mediumSymbolsFound=loadSymbolsImages(25);
  List<String> setCodes=ExpansionRepository.instance.getSetCodes();
  if (setCodes == null) {
    LOGGER.warn("No db information for sets found. Connect to a server to create database file on client side. Then try to restart the client.");
    return;
  }
  for (  String set : setCodes) {
    String[] codes=new String[]{"C","U","R","M"};
    Map<String,Image> rarityImages=new HashMap<>();
    setImages.put(set,rarityImages);
    for (    String rarityCode : codes) {
      File file=new File(getSymbolsPath() + Constants.RESOURCE_PATH_SET + set+ "-"+ rarityCode+ ".jpg");
      try {
        Image image=UI.getImageIcon(file.getAbsolutePath()).getImage();
        int width=image.getWidth(null);
        if (width > 21) {
          int h=image.getHeight(null);
          if (h > 0) {
            Rectangle r=new Rectangle(21,(int)(h * 21.0f / width));
            BufferedImage resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
            rarityImages.put(set,resized);
          }
        }
 else {
          rarityImages.put(rarityCode,image);
        }
      }
 catch (      Exception e) {
      }
    }
    try {
      File file=new File(getSymbolsPath() + Constants.RESOURCE_PATH_SET_SMALL);
      if (!file.exists()) {
        file.mkdirs();
      }
      for (      String code : codes) {
        file=new File(getSymbolsPath() + Constants.RESOURCE_PATH_SET_SMALL + set+ "-"+ code+ ".png");
        if (file.exists()) {
          continue;
        }
        file=new File(getSymbolsPath() + Constants.RESOURCE_PATH_SET + set+ "-"+ code+ ".jpg");
        Image image=UI.getImageIcon(file.getAbsolutePath()).getImage();
        try {
          int width=image.getWidth(null);
          int height=image.getHeight(null);
          if (height > 0) {
            int dx=0;
            if (set.equals("M10") || set.equals("M11") || set.equals("M12")) {
              dx=6;
            }
            Rectangle r=new Rectangle(15 + dx,(int)(height * (15.0f + dx) / width));
            BufferedImage resized=ImageHelper.getResizedImage(BufferedImageBuilder.bufferImage(image,BufferedImage.TYPE_INT_ARGB),r);
            File newFile=new File(getSymbolsPath() + Constants.RESOURCE_PATH_SET_SMALL + File.separator+ set+ "-"+ code+ ".png");
            ImageIO.write(resized,"png",newFile);
          }
        }
 catch (        Exception e) {
          if (file.exists()) {
            file.delete();
          }
        }
      }
    }
 catch (    Exception e) {
    }
  }
  File file;
  for (  String set : ExpansionRepository.instance.getSetCodes()) {
    file=new File(getSymbolsPath() + Constants.RESOURCE_PATH_SET_SMALL);
    if (!file.exists()) {
      break;
    }
    file=new File(getSymbolsPath() + Constants.RESOURCE_PATH_SET_SMALL + set+ "-C.png");
    try {
      Image image=UI.getImageIcon(file.getAbsolutePath()).getImage();
      int width=image.getWidth(null);
      int height=image.getHeight(null);
      setImagesExist.put(set,new Dimension(width,height));
    }
 catch (    Exception e) {
    }
  }
}
