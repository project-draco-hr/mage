{
  List<UUID> permsToSacrifice=new ArrayList<>();
  filter.add(new ControllerPredicate(TargetController.YOU));
  for (  UUID playerId : game.getOpponents(source.getControllerId())) {
    Player player=game.getPlayer(playerId);
    if (player != null) {
      Cost costToPay;
      if (cost != null) {
        costToPay=cost.copy();
      }
 else {
        costToPay=new GenericManaCost(dynamicGenericMana.calculate(game,source,this));
      }
      String message;
      if (costToPay instanceof ManaCost) {
        message="Would you like to pay " + costToPay.getText() + " to prevent sacrifice effect?";
      }
 else {
        message=costToPay.getText() + " to prevent sacrifice effect?";
      }
      costToPay.clearPaid();
      if (!(player.chooseUse(Outcome.Benefit,message,source,game) && costToPay.pay(source,game,source.getSourceId(),player.getId(),false,null))) {
        game.informPlayers(player.getLogName() + " chooses not to pay " + costToPay.getText()+ " to prevent the sacrifice effect");
        int numTargets=Math.min(amount.calculate(game,source,this),game.getBattlefield().countAll(filter,player.getId(),game));
        if (numTargets > 0) {
          TargetPermanent target=new TargetPermanent(numTargets,numTargets,filter,true);
          if (target.canChoose(player.getId(),game)) {
            player.chooseTarget(Outcome.Sacrifice,target,source,game);
            permsToSacrifice.addAll(target.getTargets());
          }
        }
      }
 else {
        game.informPlayers(player.getLogName() + " chooses to pay " + costToPay.getText()+ " to prevent the sacrifice effect");
      }
    }
  }
  for (  UUID permID : permsToSacrifice) {
    Permanent permanent=game.getPermanent(permID);
    if (permanent != null) {
      permanent.sacrifice(source.getSourceId(),game);
    }
  }
  return true;
}
