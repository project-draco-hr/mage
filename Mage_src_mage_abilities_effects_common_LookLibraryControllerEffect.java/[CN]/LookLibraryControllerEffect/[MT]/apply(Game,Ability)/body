{
  String windowName="Reveal";
  if (source instanceof SpellAbility) {
    Card sourceCard=game.getCard(source.getSourceId());
    if (sourceCard != null) {
      windowName=sourceCard.getName();
    }
  }
 else {
    Permanent sourcePermanent=game.getPermanent(source.getSourceId());
    if (sourcePermanent != null) {
      windowName=sourcePermanent.getName();
    }
  }
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  boolean topCardRevealed=player.isTopCardRevealed();
  player.setTopCardRevealed(false);
  Cards cards=new CardsImpl();
  int count=Math.min(player.getLibrary().size(),this.numberOfCards.calculate(game,source,this));
  for (int i=0; i < count; i++) {
    Card card=player.getLibrary().removeFromTop(game);
    if (card != null) {
      cards.add(card);
      this.cardLooked(card,game,source);
    }
  }
  player.lookAtCards(windowName,cards,game);
  this.actionWithSelectedCards(cards,game,source,windowName);
  this.putCardsBack(source,player,cards,game);
  player.setTopCardRevealed(topCardRevealed);
  this.mayShuffle(player,source,game);
  return true;
}
