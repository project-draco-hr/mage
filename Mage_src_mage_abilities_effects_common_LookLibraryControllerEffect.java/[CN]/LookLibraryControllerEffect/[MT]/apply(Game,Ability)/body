{
  String windowName="Reveal";
  if (source instanceof SpellAbility) {
    Card sourceCard=game.getCard(source.getSourceId());
    if (sourceCard != null)     windowName=sourceCard.getName();
  }
 else {
    Permanent sourcePermanent=game.getPermanent(source.getSourceId());
    if (sourcePermanent != null)     windowName=sourcePermanent.getName();
  }
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  Cards cards=new CardsImpl(Zone.PICK);
  int count=Math.min(player.getLibrary().size(),this.numberOfCards.calculate(game,source));
  for (int i=0; i < count; i++) {
    Card card=player.getLibrary().removeFromTop(game);
    if (card != null) {
      cards.add(card);
      game.setZone(card.getId(),Zone.PICK);
    }
  }
  player.lookAtCards(windowName,cards,game);
  TargetCard target=new TargetCard(Zone.PICK,new FilterCard("card to put on your library (last chosen will be on top)"));
  target.setRequired(true);
  while (cards.size() > 1) {
    player.choose(Outcome.Neutral,cards,target,game);
    Card card=cards.get(target.getFirstTarget(),game);
    if (card != null) {
      cards.remove(card);
      card.moveToZone(Zone.LIBRARY,source.getId(),game,true);
    }
    target.clearChosen();
  }
  if (cards.size() == 1) {
    Card card=cards.get(cards.iterator().next(),game);
    card.moveToZone(Zone.LIBRARY,source.getId(),game,true);
  }
  if (this.mayShuffleAfter) {
    if (player.chooseUse(Constants.Outcome.Benefit,"Shuffle you library?",game)) {
      player.shuffleLibrary(game);
    }
  }
  return true;
}
