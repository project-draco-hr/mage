{
  int thinkTime=calculateThinkTime(game,action);
  if (thinkTime > 0) {
    if (USE_MULTIPLE_THREADS) {
      ExecutorService pool=Executors.newFixedThreadPool(poolSize);
      List<MCTSExecutor> tasks=new ArrayList<>();
      for (int i=0; i < poolSize; i++) {
        Game sim=createMCTSGame(game);
        MCTSPlayer player=(MCTSPlayer)sim.getPlayer(playerId);
        player.setNextAction(action);
        MCTSExecutor exec=new MCTSExecutor(sim,playerId,thinkTime);
        tasks.add(exec);
      }
      try {
        pool.invokeAll(tasks,thinkTime,TimeUnit.SECONDS);
        pool.awaitTermination(1,TimeUnit.SECONDS);
        pool.shutdownNow();
      }
 catch (      InterruptedException|RejectedExecutionException ex) {
        logger.warn("applyMCTS interrupted");
      }
      int simCount=0;
      for (      MCTSExecutor task : tasks) {
        simCount+=task.getSimCount();
        root.merge(task.getRoot());
        task.clear();
      }
      tasks.clear();
      totalThinkTime+=thinkTime;
      totalSimulations+=simCount;
      logger.info("Player: " + name + " Simulated "+ simCount+ " games in "+ thinkTime+ " seconds - nodes in tree: "+ root.size());
      logger.info("Total: Simulated " + totalSimulations + " games in "+ totalThinkTime+ " seconds - Average: "+ totalSimulations / totalThinkTime);
      MCTSNode.logHitMiss();
    }
 else {
      long startTime=System.nanoTime();
      long endTime=startTime + (thinkTime * 1000000000l);
      MCTSNode current;
      int simCount=0;
      while (true) {
        long currentTime=System.nanoTime();
        if (currentTime > endTime)         break;
        current=root;
        while (!current.isLeaf()) {
          current=current.select(this.playerId);
        }
        int result;
        if (!current.isTerminal()) {
          current.expand();
          current=current.select(this.playerId);
          result=current.simulate(this.playerId);
          simCount++;
        }
 else {
          result=current.isWinner(this.playerId) ? 1 : -1;
        }
        current.backpropagate(result);
      }
      logger.info("Simulated " + simCount + " games - nodes in tree: "+ root.size());
    }
  }
}
