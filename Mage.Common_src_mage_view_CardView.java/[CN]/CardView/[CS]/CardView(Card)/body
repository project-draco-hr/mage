{
  super(card.getId(),card.getExpansionSetCode(),card.getCardNumber(),card.isFaceDown(),card.getUsesVariousArt());
  if (this.faceDown) {
    fillEmpty();
    return;
  }
  Card cardHalf=null;
  SplitCard splitCard=null;
  this.isSplitCard=card.isSplitCard();
  if (card instanceof Spell) {
    if (((Spell)card).getSpellAbility().getSpellAbilityType().equals(Constants.SpellAbilityType.SPLIT_LEFT)) {
      splitCard=(SplitCard)((Spell)card).getCard();
      cardHalf=((SplitCard)splitCard).getLeftHalfCard();
    }
 else     if (((Spell)card).getSpellAbility().getSpellAbilityType().equals(Constants.SpellAbilityType.SPLIT_RIGHT)) {
      splitCard=(SplitCard)((Spell)card).getCard();
      cardHalf=((SplitCard)splitCard).getRightHalfCard();
    }
 else     if (((Spell)card).getSpellAbility().getSpellAbilityType().equals(Constants.SpellAbilityType.SPLIT_FUSED)) {
      isSplitCard=true;
      splitCard=(SplitCard)((Spell)card).getCard();
    }
  }
 else   if (card.isSplitCard()) {
    splitCard=(SplitCard)card;
  }
  if (this.isSplitCard && splitCard != null) {
    leftSplitName=splitCard.getLeftHalfCard().getName();
    leftSplitCosts=splitCard.getLeftHalfCard().getManaCost();
    leftSplitRules=splitCard.getLeftHalfCard().getRules();
    rightSplitName=splitCard.getRightHalfCard().getName();
    rightSplitCosts=splitCard.getRightHalfCard().getManaCost();
    rightSplitRules=splitCard.getRightHalfCard().getRules();
  }
  this.name=card.getName();
  if (cardHalf != null) {
    this.displayName=cardHalf.getName();
    this.rules=cardHalf.getRules();
    this.manaCost=cardHalf.getManaCost().getSymbols();
    this.convertedManaCost=cardHalf.getManaCost().convertedManaCost();
  }
 else {
    this.displayName=card.getName();
    this.rules=card.getRules();
    this.manaCost=card.getManaCost().getSymbols();
    this.convertedManaCost=card.getManaCost().convertedManaCost();
  }
  if (card instanceof Permanent) {
    Permanent permanent=(Permanent)card;
    this.power=Integer.toString(card.getPower().getValue());
    this.toughness=Integer.toString(card.getToughness().getValue());
    this.loyalty=Integer.toString(permanent.getCounters().getCount(CounterType.LOYALTY));
    this.pairedCard=permanent.getPairedCard();
  }
 else {
    this.power=card.getPower().toString();
    this.toughness=card.getToughness().toString();
    this.loyalty="";
  }
  this.cardTypes=card.getCardType();
  this.subTypes=card.getSubtype();
  this.superTypes=card.getSupertype();
  this.color=card.getColor();
  this.canTransform=card.canTransform();
  if (card instanceof PermanentToken) {
    this.rarity=Rarity.COMMON;
    this.expansionSetCode=((PermanentToken)card).getExpansionSetCode();
    this.rules=((PermanentToken)card).getRules();
    this.type=((PermanentToken)card).getToken().getTokenType();
  }
 else {
    this.rarity=card.getRarity();
  }
  if (card.getCounters() != null && !card.getCounters().isEmpty()) {
    counters=new ArrayList<CounterView>();
    for (    Counter counter : card.getCounters().values()) {
      counters.add(new CounterView(counter));
    }
  }
  if (card.getSecondCardFace() != null) {
    this.secondCardFace=new CardView(card.getSecondCardFace());
  }
  if (card instanceof Spell) {
    Spell<?> spell=(Spell<?>)card;
    if (spell.getSpellAbility().getTargets().size() > 0) {
      setTargets(spell.getSpellAbility().getTargets());
    }
    if (spell.getSpellAbility().isModal()) {
      Mode activeMode=spell.getSpellAbility().getModes().getMode();
      if (activeMode != null) {
        this.rules.add("<span color='green'><i>Chosen mode: " + activeMode.getEffects().getText(activeMode) + "</i></span>");
      }
    }
  }
}
