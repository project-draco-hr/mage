{
  logLastPick(draftPickView);
  loadCardsToPickedCardsArea(draftPickView.getPicks());
  this.draftPicks.clearCardEventListeners();
  this.draftPicks.addCardEventListener(new Listener<Event>(){
    @Override public void event(    Event event){
      if (event.getEventName().equals("show-popup-menu")) {
        if (event.getSource() != null) {
          cardIdPopupMenu=((SimpleCardView)event.getSource()).getId();
          popupMenuCardPanel.show(event.getComponent(),event.getxPos(),event.getyPos());
        }
 else {
          popupMenuPickedArea.show(event.getComponent(),event.getxPos(),event.getyPos());
        }
      }
    }
  }
);
  draftBooster.loadBooster(CardsViewUtil.convertSimple(draftPickView.getBooster()),bigCard);
  this.draftBooster.clearCardEventListeners();
  this.draftBooster.addCardEventListener(new Listener<Event>(){
    @Override public void event(    Event event){
      if (event.getEventName().equals("pick-a-card")) {
        SimpleCardView source=(SimpleCardView)event.getSource();
        DraftPickView view=SessionHandler.sendCardPick(draftId,source.getId(),cardsHidden);
        if (view != null) {
          loadCardsToPickedCardsArea(view.getPicks());
          draftBooster.loadBooster(EMPTY_VIEW,bigCard);
          Plugins.getInstance().getActionCallback().hideTooltipPopup();
          setMessage("Waiting for other players");
        }
      }
      if (event.getEventName().equals("mark-a-card")) {
        SimpleCardView source=(SimpleCardView)event.getSource();
        SessionHandler.sendCardMark(draftId,source.getId());
      }
    }
  }
);
  setMessage("Pick a card");
  if (!MageFrame.getInstance().isActive()) {
    MageTray.getInstance().displayMessage("Pick the next card.");
    MageTray.getInstance().blink();
  }
  countdown.stop();
  this.timeout=draftPickView.getTimeout();
  setTimeout(timeout);
  if (timeout != 0) {
    countdown.start();
  }
}
