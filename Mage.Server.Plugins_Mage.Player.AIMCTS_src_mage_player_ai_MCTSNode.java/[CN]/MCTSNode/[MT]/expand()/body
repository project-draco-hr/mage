{
  MCTSPlayer player=(MCTSPlayer)game.getPlayer(playerId);
  if (player.getNextAction() == null) {
    logger.fatal("next action is null");
  }
switch (player.getNextAction()) {
case PRIORITY:
    List<Ability> abilities=player.getPlayableOptions(game);
  for (  Ability ability : abilities) {
    Game sim=game.copy();
    MCTSPlayer simPlayer=(MCTSPlayer)sim.getPlayer(player.getId());
    simPlayer.activateAbility((ActivatedAbility)ability,sim);
    sim.resume();
    children.add(new MCTSNode(this,sim,ability));
  }
break;
case SELECT_ATTACKERS:
List<List<UUID>> attacks=player.getAttacks(game);
UUID defenderId=game.getOpponents(player.getId()).iterator().next();
for (List<UUID> attack : attacks) {
Game sim=game.copy();
MCTSPlayer simPlayer=(MCTSPlayer)sim.getPlayer(player.getId());
for (UUID attackerId : attack) {
simPlayer.declareAttacker(attackerId,defenderId,sim);
}
sim.resume();
children.add(new MCTSNode(this,sim,sim.getCombat()));
}
break;
case SELECT_BLOCKERS:
List<List<List<UUID>>> blocks=player.getBlocks(game);
for (List<List<UUID>> block : blocks) {
Game sim=game.copy();
MCTSPlayer simPlayer=(MCTSPlayer)sim.getPlayer(player.getId());
List<CombatGroup> groups=sim.getCombat().getGroups();
for (int i=0; i < groups.size(); i++) {
if (i < block.size()) {
for (UUID blockerId : block.get(i)) {
simPlayer.declareBlocker(simPlayer.getId(),blockerId,groups.get(i).getAttackers().get(0),sim);
}
}
}
sim.resume();
children.add(new MCTSNode(this,sim,sim.getCombat()));
}
break;
}
game=null;
}
