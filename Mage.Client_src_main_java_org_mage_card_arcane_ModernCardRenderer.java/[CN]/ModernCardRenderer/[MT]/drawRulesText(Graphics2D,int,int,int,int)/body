{
  List<TextboxRule> allRules=new ArrayList<>(textboxRules);
  if (!textboxKeywords.isEmpty()) {
    String keywordRulesString=getKeywordRulesString();
    TextboxRule keywordsRule=new TextboxRule(keywordRulesString,new ArrayList<TextboxRule.AttributeRegion>());
    allRules.add(keywordsRule);
  }
  RuleLayout bestLayout=null;
  for (  int fontSize : RULES_TEXT_FONT_SIZES) {
    bestLayout=layoutRules(g,allRules,w,h,fontSize);
    if (bestLayout.fits) {
      break;
    }
  }
  if (bestLayout == null) {
    return;
  }
  int padding;
  if (bestLayout.fits) {
    padding=(int)(((float)bestLayout.remainingHeight) / (1 + allRules.size()));
  }
 else {
    padding=0;
  }
  loyaltyAbilityColorToggle=false;
  g.setColor(Color.black);
  int curY=y + padding;
  for (int i=0; i < bestLayout.attributedRules.size(); ++i) {
    AttributedString attributedRule=bestLayout.attributedRules.get(i);
    TextboxRule rule=allRules.get(i);
    int adv=drawSingleRule(g,attributedRule,rule,x,curY,w,h,true);
    curY+=adv + padding;
    h-=adv;
    if (h < 0) {
      break;
    }
  }
}
