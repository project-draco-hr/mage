{
  Target newTarget=target.copy();
  if (!targetController.getId().equals(getControllerId())) {
    newTarget.setTargetController(targetController.getId());
    newTarget.setAbilityController(getControllerId());
  }
  newTarget.clearChosen();
  for (  UUID targetId : target.getTargets()) {
    String targetNames=getNamesOftargets(targetId,game);
    if (targetNames != null && (forceChange || targetController.chooseUse(mode.getEffects().get(0).getOutcome(),"Change this target: " + targetNames + "?",ability,game))) {
      Set<UUID> possibleTargets=target.possibleTargets(this.getSourceId(),getControllerId(),game);
      if (forceChange && possibleTargets != null && possibleTargets.size() > 1) {
        int iteration=0;
        do {
          if (iteration > 0 && !game.isSimulation()) {
            game.informPlayer(targetController,"You may only select exactly one target that must be different from the origin target!");
          }
          iteration++;
          newTarget.clearChosen();
          newTarget.chooseTarget(mode.getEffects().get(0).getOutcome(),getControllerId(),ability,game);
          if (newTarget.getFirstTarget() != null && filterNewTarget != null) {
            Permanent newTargetPermanent=game.getPermanent(newTarget.getFirstTarget());
            if (newTargetPermanent == null || !filterNewTarget.match(newTargetPermanent,game)) {
              game.informPlayer(targetController,"Target does not fullfil the target requirements (" + filterNewTarget.getMessage() + ")");
              newTarget.clearChosen();
            }
          }
        }
 while (targetController.isInGame() && (targetId.equals(newTarget.getFirstTarget()) || newTarget.getTargets().size() != 1));
      }
 else {
        Target tempTarget=target.copy();
        if (target instanceof TargetAmount) {
          ((TargetAmount)tempTarget).setAmountDefinition(new StaticValue(target.getTargetAmount(targetId)));
        }
        tempTarget.setMinNumberOfTargets(1);
        tempTarget.setMaxNumberOfTargets(1);
        if (!targetController.getId().equals(getControllerId())) {
          tempTarget.setTargetController(targetController.getId());
          tempTarget.setAbilityController(getControllerId());
        }
        boolean again;
        do {
          again=false;
          tempTarget.clearChosen();
          if (!tempTarget.chooseTarget(mode.getEffects().get(0).getOutcome(),getControllerId(),ability,game)) {
            if (targetController.chooseUse(Outcome.Benefit,"No target object selected. Reset to original target?",ability,game)) {
              newTarget.addTarget(targetId,target.getTargetAmount(targetId),ability,game,false);
            }
 else {
              again=true;
            }
          }
 else {
            if (newTarget.getTargets().contains(tempTarget.getFirstTarget()) || target.getTargets().contains(tempTarget.getFirstTarget())) {
              if (targetController.isHuman()) {
                game.informPlayer(targetController,"This target was already selected from origin spell. You can only keep this target!");
                again=true;
              }
 else {
                newTarget.addTarget(targetId,target.getTargetAmount(targetId),ability,game,false);
              }
            }
 else             if (!target.canTarget(getControllerId(),tempTarget.getFirstTarget(),ability,game)) {
              if (targetController.isHuman()) {
                game.informPlayer(targetController,"This target is not valid!");
                again=true;
              }
 else {
                newTarget.addTarget(targetId,target.getTargetAmount(targetId),ability,game,false);
              }
            }
 else             if (newTarget.getFirstTarget() != null && filterNewTarget != null) {
              Permanent newTargetPermanent=game.getPermanent(newTarget.getFirstTarget());
              if (newTargetPermanent == null || !filterNewTarget.match(newTargetPermanent,game)) {
                game.informPlayer(targetController,"This target does not fullfil the target requirements (" + filterNewTarget.getMessage() + ")");
                again=true;
              }
            }
 else {
              newTarget.addTarget(tempTarget.getFirstTarget(),target.getTargetAmount(targetId),ability,game,false);
            }
          }
        }
 while (again && targetController.isInGame());
      }
    }
 else {
      newTarget.addTarget(targetId,target.getTargetAmount(targetId),ability,game,false);
    }
  }
  return newTarget;
}
