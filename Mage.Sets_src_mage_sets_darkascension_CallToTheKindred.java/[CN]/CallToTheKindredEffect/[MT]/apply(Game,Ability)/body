{
  Player controller=game.getPlayer(source.getControllerId());
  Permanent enchantment=game.getPermanent(source.getSourceId());
  if (enchantment == null || controller == null || enchantment.getAttachedTo() == null) {
    return false;
  }
  Permanent creature=game.getPermanent(enchantment.getAttachedTo());
  if (creature == null) {
    return false;
  }
  Cards cards=new CardsImpl();
  cards.addAll(controller.getLibrary().getTopCards(game,5));
  controller.lookAtCards(enchantment.getIdName(),cards,game);
  FilterCreatureCard filter=new FilterCreatureCard();
  if (!creature.getAbilities().contains(ChangelingAbility.getInstance())) {
    StringBuilder sb=new StringBuilder("creature card with at least one subtype from: ");
    ArrayList<Predicate<MageObject>> subtypes=new ArrayList<>();
    for (    String subtype : creature.getSubtype()) {
      subtypes.add(new SubtypePredicate(subtype));
      sb.append(subtype).append(", ");
    }
    filter.add(Predicates.or(subtypes));
    sb.delete(sb.length() - 2,sb.length());
    filter.setMessage(sb.toString());
  }
 else {
    filter.setMessage("creature card that shares a creature type with enchanted creature");
  }
  if (cards.count(filter,game) > 0 && controller.chooseUse(Outcome.DrawCard,"Do you wish to put a creature card onto the battlefield?",source,game)) {
    TargetCard target=new TargetCard(Zone.LIBRARY,filter);
    if (controller.choose(Outcome.PutCreatureInPlay,cards,target,game)) {
      Card card=cards.get(target.getFirstTarget(),game);
      if (card != null) {
        cards.remove(card);
        controller.moveCards(card,Zone.BATTLEFIELD,source,game);
      }
    }
  }
  controller.putCardsOnBottomOfLibrary(cards,game,source,true);
  return true;
}
