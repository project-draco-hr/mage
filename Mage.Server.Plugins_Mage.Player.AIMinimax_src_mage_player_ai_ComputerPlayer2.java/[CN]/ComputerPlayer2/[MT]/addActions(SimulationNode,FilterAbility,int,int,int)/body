{
  Game game=node.getGame();
  int val;
  if (Thread.interrupted()) {
    Thread.currentThread().interrupt();
    logger.debug("interrupted");
    return GameStateEvaluator.evaluate(playerId,game);
  }
  if (depth <= 0 || SimulationNode.nodeCount > maxNodes || game.isGameOver()) {
    logger.debug("simulating -- reached end state");
    val=GameStateEvaluator.evaluate(playerId,game);
  }
 else   if (node.getChildren().size() > 0) {
    logger.debug("simulating -- somthing added children:" + node.getChildren().size());
    val=minimaxAB(node,filter,depth - 1,alpha,beta);
  }
 else {
    if (logger.isDebugEnabled())     logger.debug("simulating -- alpha: " + alpha + " beta: "+ beta+ " depth:"+ depth+ " step:"+ game.getTurn().getStepType()+ " for player:"+ (node.getPlayerId().equals(playerId) ? "yes" : "no"));
    if (allPassed(game)) {
      if (!game.getStack().isEmpty()) {
        resolve(node,depth,game);
      }
 else {
        game.getPlayers().resetPassed();
        playNext(game,game.getActivePlayerId(),node);
      }
    }
    if (game.isGameOver()) {
      val=GameStateEvaluator.evaluate(playerId,game);
    }
 else     if (node.getChildren().size() > 0) {
      logger.debug("simulating -- attack/block/trigger added children:" + node.getChildren().size());
      val=minimaxAB(node,filter,depth - 1,alpha,beta);
    }
 else {
      val=simulatePriority(node,game,filter,depth,alpha,beta);
    }
  }
  if (logger.isDebugEnabled())   logger.debug("returning -- score: " + val + " depth:"+ depth+ " step:"+ game.getTurn().getStepType()+ " for player:"+ game.getPlayer(node.getPlayerId()).getName());
  return val;
}
