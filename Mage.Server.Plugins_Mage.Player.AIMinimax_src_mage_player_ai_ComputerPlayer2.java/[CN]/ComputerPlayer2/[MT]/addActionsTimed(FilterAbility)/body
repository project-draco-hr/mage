{
  FutureTask<Integer> task=new FutureTask<Integer>(new Callable<Integer>(){
    @Override public Integer call() throws Exception {
      return addActions(root,filter,Integer.MIN_VALUE,Integer.MAX_VALUE);
    }
  }
);
  long startTime=System.nanoTime();
  pool.execute(task);
  try {
    task.get(maxThink,TimeUnit.SECONDS);
    long endTime=System.nanoTime();
    long duration=endTime - startTime;
    logger.info("Calculated " + SimulationNode.nodeCount + " nodes in "+ duration / 1000000000.0 + "s");
    nodeCount+=SimulationNode.nodeCount;
    thinkTime+=duration;
  }
 catch (  TimeoutException e) {
    logger.debug("simulating - timed out");
    task.cancel(true);
    try {
      Thread.sleep(1000);
    }
 catch (    InterruptedException ex) {
      logger.fatal("can't sleep");
    }
    long endTime=System.nanoTime();
    long duration=endTime - startTime;
    logger.info("Timeout - Calculated " + SimulationNode.nodeCount + " nodes in "+ duration / 1000000000.0 + "s");
    nodeCount+=SimulationNode.nodeCount;
    thinkTime+=duration;
  }
catch (  ExecutionException e) {
    logger.fatal("Simulation error",e);
    task.cancel(true);
  }
catch (  InterruptedException e) {
    logger.fatal("Simulation interrupted",e);
    task.cancel(true);
  }
}
