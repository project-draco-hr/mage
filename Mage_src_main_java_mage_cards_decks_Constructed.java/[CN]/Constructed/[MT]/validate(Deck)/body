{
  logger.debug("DECK validate start: " + name + " deckname: "+ deck.getName());
  boolean valid=true;
  if (deck.getCards().size() < 60) {
    invalid.put("Deck","Must contain at least 60 cards: has only " + deck.getCards().size() + " cards");
    valid=false;
  }
  if (deck.getSideboard().size() > 15) {
    invalid.put("Sideboard","Must contain no more than 15 cards : has " + deck.getSideboard().size() + " cards");
    valid=false;
  }
  List<String> basicLandNames=new ArrayList<>(Arrays.asList("Forest","Island","Mountain","Swamp","Plains","Snow-Covered Forest","Snow-Covered Island","Snow-Covered Mountain","Snow-Covered Swamp","Snow-Covered Plains"));
  Map<String,Integer> counts=new HashMap<>();
  countCards(counts,deck.getCards());
  countCards(counts,deck.getSideboard());
  for (  Entry<String,Integer> entry : counts.entrySet()) {
    if (entry.getValue() > 4) {
      if (!basicLandNames.contains(entry.getKey()) && !entry.getKey().equals("Relentless Rats") && !entry.getKey().equals("Shadowborn Apostle")) {
        invalid.put(entry.getKey(),"Too many: " + entry.getValue());
        valid=false;
      }
    }
  }
  for (  String bannedCard : banned) {
    if (counts.containsKey(bannedCard)) {
      invalid.put(bannedCard,"Banned");
      valid=false;
    }
  }
  for (  String restrictedCard : restricted) {
    if (counts.containsKey(restrictedCard)) {
      int count=counts.get(restrictedCard);
      if (count > 1) {
        invalid.put(restrictedCard,"Restricted: " + count);
        valid=false;
      }
    }
  }
  if (!rarities.isEmpty()) {
    for (    Card card : deck.getCards()) {
      if (!rarities.contains(card.getRarity())) {
        invalid.put(card.getName(),"Invalid rarity: " + card.getRarity());
        valid=false;
      }
    }
    for (    Card card : deck.getSideboard()) {
      if (!rarities.contains(card.getRarity())) {
        invalid.put(card.getName(),"Invalid rarity: " + card.getRarity());
        valid=false;
      }
    }
  }
  if (!setCodes.isEmpty()) {
    for (    Card card : deck.getCards()) {
      if (!setCodes.contains(card.getExpansionSetCode())) {
        boolean legal=false;
        List<CardInfo> cardInfos=CardRepository.instance.findCards(card.getName());
        for (        CardInfo cardInfo : cardInfos) {
          if (setCodes.contains(cardInfo.getSetCode())) {
            legal=true;
            break;
          }
        }
        if (!legal && !invalid.containsKey(card.getName())) {
          invalid.put(card.getName(),"Invalid set: " + card.getExpansionSetCode());
          valid=false;
        }
      }
    }
    for (    Card card : deck.getSideboard()) {
      if (!setCodes.contains(card.getExpansionSetCode())) {
        boolean legal=false;
        List<CardInfo> cardInfos=CardRepository.instance.findCards(card.getName());
        for (        CardInfo cardInfo : cardInfos) {
          if (setCodes.contains(cardInfo.getSetCode())) {
            legal=true;
            break;
          }
        }
        if (!legal && !invalid.containsKey(card.getName())) {
          invalid.put(card.getName(),"Invalid set: " + card.getExpansionSetCode());
          valid=false;
        }
      }
    }
  }
  logger.debug("DECK validate end: " + name + " deckname: "+ deck.getName()+ " invalids:"+ invalid.size());
  return valid;
}
