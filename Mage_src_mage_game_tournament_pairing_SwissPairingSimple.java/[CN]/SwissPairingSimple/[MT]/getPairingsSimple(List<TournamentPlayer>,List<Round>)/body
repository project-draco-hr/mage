{
  List<TournamentPairing> pairings=new ArrayList<>();
  List<TournamentPlayer> playerByes=new ArrayList<>();
  Collections.sort(players,new Comparator<TournamentPlayer>(){
    @Override public int compare(    TournamentPlayer p1,    TournamentPlayer p2){
      return p2.getPoints() - p1.getPoints();
    }
  }
);
  while (players.size() > 0) {
    TournamentPlayer player1=players.get(0);
    players.remove(0);
    TournamentPlayer playerForPossibleSecondPairing=null;
    for (    TournamentPlayer player2 : players) {
      if (alreadyPaired(rounds,player1,player2)) {
        if (playerForPossibleSecondPairing == null) {
          playerForPossibleSecondPairing=player2;
        }
      }
 else {
        if (player2.getPoints() < player1.getPoints() && playerForPossibleSecondPairing != null) {
          pairings.add(new TournamentPairing(player1,playerForPossibleSecondPairing));
          players.remove(playerForPossibleSecondPairing);
          player1=null;
          break;
        }
 else {
          pairings.add(new TournamentPairing(player1,player2));
          players.remove(player2);
          player1=null;
          break;
        }
      }
    }
    if (player1 != null) {
      if (playerForPossibleSecondPairing != null) {
        pairings.add(new TournamentPairing(player1,playerForPossibleSecondPairing));
        players.remove(playerForPossibleSecondPairing);
      }
 else {
        playerByes.add(player1);
      }
    }
  }
  return new RoundPairings(pairings,playerByes);
}
