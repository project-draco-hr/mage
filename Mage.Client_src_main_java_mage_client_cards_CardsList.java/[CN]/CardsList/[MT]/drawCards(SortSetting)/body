{
  int maxWidth=this.getParent().getWidth();
  int numColumns=maxWidth / cardDimension.width;
  int curColumn=0;
  int curRow=0;
  int maxRow=0;
  int maxColumn=0;
  Comparator<CardView> comparator=null;
  Map<UUID,MageCard> oldMageCards=mageCards;
  mageCards=new LinkedHashMap<>();
  for (  UUID uuid : cards.keySet()) {
    if (oldMageCards.containsKey(uuid)) {
      mageCards.put(uuid,oldMageCards.get(uuid));
      oldMageCards.remove(uuid);
    }
 else {
      mageCards.put(uuid,addCard(cards.get(uuid),bigCard,gameId));
    }
  }
  for (  MageCard card : oldMageCards.values()) {
    cardArea.remove(card);
  }
  if (cards != null && cards.size() > 0) {
    Rectangle rectangle=new Rectangle(cardDimension.width,cardDimension.height);
    List<CardView> sortedCards=new ArrayList<>(cards.values());
switch (sortSetting.getSortBy()) {
case NAME:
      comparator=new CardViewNameComparator();
    break;
case RARITY:
  comparator=new CardViewRarityComparator();
break;
case CARD_TYPE:
comparator=new CardViewCardTypeComparator();
break;
case COLOR:
comparator=new CardViewColorComparator();
break;
case COLOR_IDENTITY:
comparator=new CardViewColorIdentityComparator();
break;
case CASTING_COST:
comparator=new CardViewCostComparator();
break;
}
if (comparator != null) {
Collections.sort(sortedCards,new CardViewNameComparator());
Collections.sort(sortedCards,comparator);
}
CardView lastCard=null;
for (CardView card : sortedCards) {
if (sortSetting.isPilesToggle()) {
if (lastCard == null) {
lastCard=card;
}
if (comparator != null) {
if (comparator.compare(card,lastCard) > 0) {
curColumn++;
maxRow=Math.max(maxRow,curRow);
curRow=0;
}
}
rectangle.setLocation(curColumn * cardDimension.width,curRow * rowHeight);
setCardBounds(mageCards.get(card.getId()),rectangle);
curRow++;
lastCard=card;
}
 else {
rectangle.setLocation(curColumn * cardDimension.width,curRow * rowHeight);
setCardBounds(mageCards.get(card.getId()),rectangle);
curColumn++;
if (curColumn == numColumns) {
maxColumn=Math.max(maxColumn,curColumn);
curColumn=0;
curRow++;
}
}
}
}
maxRow=Math.max(maxRow,curRow);
maxColumn=Math.max(maxColumn,curColumn);
updateCounts();
cardArea.setPreferredSize(new Dimension((maxColumn + 1) * cardDimension.width,cardDimension.height + maxRow * rowHeight));
cardArea.revalidate();
this.revalidate();
this.repaint();
this.setVisible(true);
}
