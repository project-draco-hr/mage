{
  int maxWidth=this.getParent().getWidth();
  int numColumns=maxWidth / Config.dimensions.frameWidth;
  int curColumn=0;
  int curRow=0;
  Comparator<CardView> comparator=null;
  cardArea.removeAll();
  if (cards != null && cards.size() > 0) {
    Rectangle rectangle=new Rectangle(Config.dimensions.frameWidth,Config.dimensions.frameHeight);
    List<CardView> sortedCards=new ArrayList<>(cards.values());
switch (sortSetting.getSortBy()) {
case NAME:
      comparator=new CardViewNameComparator();
    break;
case RARITY:
  comparator=new CardViewRarityComparator();
break;
case COLOR:
comparator=new CardViewColorComparator();
break;
case COLOR_DETAILED:
comparator=new CardViewColorDetailedComparator();
break;
case CASTING_COST:
comparator=new CardViewCostComparator();
break;
}
if (comparator != null) {
Collections.sort(sortedCards,new CardViewNameComparator());
Collections.sort(sortedCards,comparator);
}
CardView lastCard=null;
for (CardView card : sortedCards) {
if (sortSetting.isPilesToggle()) {
if (lastCard == null) {
lastCard=card;
}
if (comparator != null) {
if (comparator.compare(card,lastCard) > 0) {
curColumn++;
curRow=0;
}
}
rectangle.setLocation(curColumn * Config.dimensions.frameWidth,curRow * 20);
addCard(card,bigCard,gameId,rectangle);
curRow++;
lastCard=card;
}
 else {
rectangle.setLocation(curColumn * Config.dimensions.frameWidth,curRow * 20);
addCard(card,bigCard,gameId,rectangle);
curColumn++;
if (curColumn == numColumns) {
curColumn=0;
curRow++;
}
}
}
}
updateCounts();
cardArea.setPreferredSize(new Dimension(Config.dimensions.frameWidth,Config.dimensions.frameHeight + 200));
cardArea.revalidate();
this.revalidate();
this.repaint();
this.setVisible(true);
}
