{
  JPanel mainPanel=new JPanel();
  mainPanel.setLayout(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  c.insets=new Insets(0,15,0,0);
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridx=0;
  c.gridy=0;
  c.weightx=0.10;
  JLabel text=new JLabel("Choose color for your deck:");
  mainPanel.add(text,c);
  c.fill=GridBagConstraints.HORIZONTAL;
  c.weightx=0.80;
  c.ipadx=30;
  c.insets=new Insets(5,10,0,10);
  c.gridx=1;
  c.gridy=0;
  String chosen=MageFrame.getPreferences().get("genDeckColor","u");
  final ColorsChooser colorsChooser=new ColorsChooser(chosen);
  mainPanel.add(colorsChooser,c);
  c.insets=new Insets(0,15,0,0);
  c.fill=GridBagConstraints.HORIZONTAL;
  c.weightx=0.10;
  c.gridx=2;
  c.gridy=0;
  c.ipadx=0;
  JLabel text2=new JLabel("(X = random color)");
  mainPanel.add(text2);
  JLabel formatSetText=new JLabel("Choose format/set for your deck:");
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridx=0;
  c.gridy=1;
  c.weightx=0.10;
  mainPanel.add(formatSetText,c);
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridx=1;
  c.gridy=1;
  c.ipadx=30;
  c.insets=new Insets(5,10,0,10);
  c.weightx=0.90;
  cbSets=new JComboBox<>(ConstructedFormats.getTypes());
  cbSets.setSelectedIndex(0);
  mainPanel.add(cbSets,c);
  String prefSet=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_NEW_DECK_GENERATOR_SET,null);
  if (prefSet != null) {
    cbSets.setSelectedItem(prefSet);
  }
  c.fill=GridBagConstraints.HORIZONTAL;
  c.insets=new Insets(0,15,0,0);
  c.ipadx=0;
  c.gridx=0;
  c.gridy=2;
  c.weightx=0.10;
  JLabel textDeckSize=new JLabel("Deck size:");
  mainPanel.add(textDeckSize,c);
  c.fill=GridBagConstraints.HORIZONTAL;
  c.gridx=1;
  c.gridy=2;
  c.ipadx=30;
  c.insets=new Insets(5,10,0,10);
  c.weightx=0.90;
  cbDeckSize=new JComboBox<>(new String[]{"40","60"});
  cbDeckSize.setSelectedIndex(0);
  cbDeckSize.setAlignmentX(Component.LEFT_ALIGNMENT);
  mainPanel.add(cbDeckSize,c);
  String prefSize=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_NEW_DECK_GENERATOR_DECK_SIZE,"60");
  if (prefSet != null) {
    cbDeckSize.setSelectedItem(prefSize);
  }
  JPanel jCheckBoxes=new JPanel(new FlowLayout(FlowLayout.LEFT));
  cSingleton=new JCheckBox("Singleton",false);
  cSingleton.setToolTipText("Allow only a single copy of each non-land card in your deck.");
  String singletonEnabled=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_NEW_DECK_GENERATOR_SINGLETON,"false");
  cSingleton.setSelected(Boolean.valueOf(singletonEnabled));
  jCheckBoxes.add(cSingleton);
  cArtifacts=new JCheckBox("Artifacts",false);
  cArtifacts.setToolTipText("Use artifacts and artifact creatures in your deck.");
  String artifactEnabled=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_NEW_DECK_GENERATOR_ARTIFACTS,"false");
  cArtifacts.setSelected(Boolean.valueOf(artifactEnabled));
  jCheckBoxes.add(cArtifacts);
  cNonBasicLands=new JCheckBox("Non-basic Lands",false);
  cNonBasicLands.setToolTipText("Use non-basic lands in your deck (if applicable).");
  String nonBasicEnabled=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_NEW_DECK_GENERATOR_NON_BASIC_LANDS,"false");
  cNonBasicLands.setSelected(Boolean.valueOf(nonBasicEnabled));
  jCheckBoxes.add(cNonBasicLands);
  cColorless=new JCheckBox("Colorless mana",false);
  cColorless.setToolTipText("Allow cards with colorless mana cost.");
  String colorlessEnabled=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_NEW_DECK_GENERATOR_COLORLESS,"false");
  cColorless.setSelected(Boolean.valueOf(colorlessEnabled));
  jCheckBoxes.add(cColorless);
  c.ipadx=0;
  c.gridx=0;
  c.gridy=3;
  c.weightx=1;
  c.gridwidth=3;
  mainPanel.add(jCheckBoxes,c);
  JPanel advancedPanel=createAdvancedPanel();
  cAdvanced=new JCheckBox("Advanced");
  cAdvanced.setToolTipText("Enable advanced configuration options");
  cAdvanced.addItemListener(new ItemListener(){
    @Override public void itemStateChanged(    ItemEvent itemEvent){
      boolean enable=cAdvanced.isSelected();
      enableAdvancedPanel(enable);
    }
  }
);
  String advancedSavedValue=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_NEW_DECK_GENERATOR_ADVANCED,"false");
  boolean advancedEnabled=Boolean.valueOf(advancedSavedValue);
  enableAdvancedPanel(advancedEnabled);
  cAdvanced.setSelected(advancedEnabled);
  c.gridy=4;
  c.weightx=0;
  c.insets=new Insets(10,15,10,0);
  mainPanel.add(cAdvanced,c);
  c.gridy=5;
  c.weightx=1;
  c.insets=new Insets(5,10,0,5);
  mainPanel.add(advancedPanel,c);
  btnGenerate=new JButton("Ok");
  btnGenerate.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      btnGenerate.setEnabled(false);
      colorsChooser.setEnabled(false);
      selectedColors=(String)colorsChooser.getSelectedItem();
      dlg.setVisible(false);
      MageFrame.getPreferences().put("genDeckColor",selectedColors);
    }
  }
);
  btnCancel=new JButton("Cancel");
  btnCancel.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      dlg.setVisible(false);
      selectedColors=null;
    }
  }
);
  JButton[] options={btnGenerate,btnCancel};
  JOptionPane optionPane=new JOptionPane(mainPanel,JOptionPane.PLAIN_MESSAGE,JOptionPane.DEFAULT_OPTION,null,options,options[1]);
  dlg=optionPane.createDialog("Generating Deck");
  dlg.setResizable(false);
  dlg.setVisible(true);
  dlg.dispose();
}
