{
  this.cardIndex=0;
  File base=new File(Constants.IO.imageBaseDir);
  if (!base.exists()) {
    base.mkdir();
  }
  Connection.ProxyType configProxyType=Connection.ProxyType.valueByText(PreferencesDialog.getCachedValue(PreferencesDialog.KEY_PROXY_TYPE,"None"));
  Proxy.Type type=Proxy.Type.DIRECT;
switch (configProxyType) {
case HTTP:
    type=Proxy.Type.HTTP;
  break;
case SOCKS:
type=Proxy.Type.SOCKS;
break;
case NONE:
default :
p=Proxy.NO_PROXY;
break;
}
if (type != Proxy.Type.DIRECT) {
try {
String address=PreferencesDialog.getCachedValue(PreferencesDialog.KEY_PROXY_ADDRESS,"");
Integer port=Integer.parseInt(PreferencesDialog.getCachedValue(PreferencesDialog.KEY_PROXY_PORT,"80"));
p=new Proxy(type,new InetSocketAddress(address,port));
}
 catch (Exception ex) {
throw new RuntimeException("Gui_DownloadPictures : error 1 - " + ex);
}
}
if (p != null) {
HashSet<String> ignoreUrls=SettingsManager.getIntance().getIgnoreUrls();
ArrayList<CardDownloadData> cardsToDownload=this.checkBox.isSelected() ? type2cards : cards;
update(0,cardsToDownload.size());
int numberOfThreads=Integer.parseInt(PreferencesDialog.getCachedValue(PreferencesDialog.KEY_CARD_IMAGES_THREADS,"10"));
ExecutorService executor=Executors.newFixedThreadPool(numberOfThreads);
for (int i=0; i < cardsToDownload.size() && !cancel; i++) {
try {
CardDownloadData card=cardsToDownload.get(i);
logger.debug("Downloading card: " + card.getName() + " ("+ card.getSet()+ ")");
String url;
if (ignoreUrls.contains(card.getSet()) || card.isToken()) {
if (!"0".equals(card.getCollectorId())) {
continue;
}
url=cardImageSource.generateTokenUrl(card);
}
 else {
url=cardImageSource.generateURL(card);
}
if (url == null) {
String imageRef=cardImageSource.getNextHttpImageUrl();
String fileName=cardImageSource.getFileForHttpImage(imageRef);
if (imageRef != null && fileName != null) {
imageRef=cardImageSource.getSourceName() + imageRef;
try {
  URL imageUrl=new URL(imageRef);
  Runnable task=new DownloadTask(imageUrl,fileName,1);
  executor.execute(task);
}
 catch (Exception ex) {
}
}
 else {
if (card != null) {
  logger.info("Card not available on " + cardImageSource.getSourceName() + ": "+ card.getName()+ " ("+ card.getSet()+ ")");
synchronized (sync) {
    update(cardIndex + 1,cardsToDownload.size());
  }
}
}
}
 else if (url != null) {
Runnable task=new DownloadTask(card,new URL(url),cardsToDownload.size());
executor.execute(task);
}
}
 catch (Exception ex) {
logger.error(ex,ex);
}
}
executor.shutdown();
while (!executor.isTerminated()) {
try {
Thread.sleep(1000);
}
 catch (InterruptedException ie) {
}
}
}
try {
TVFS.umount();
}
 catch (FsSyncException e) {
logger.fatal("Couldn't unmount zip files",e);
JOptionPane.showMessageDialog(null,"Couldn't unmount zip files","Error",JOptionPane.ERROR_MESSAGE);
}
 finally {
System.gc();
}
closeButton.setText("Close");
}
