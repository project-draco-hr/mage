{
  StringBuilder filePath=new StringBuilder();
  File temporaryFile=null;
  TFile outputFile=null;
  try {
    filePath.append(Constants.IO.imageBaseDir);
    filePath.append(card.hashCode()).append(".").append(card.getName().replace(":","").replace("//","-")).append(".jpg");
    temporaryFile=new File(filePath.toString());
    String imagePath=CardImageUtils.generateImagePath(card);
    outputFile=new TFile(imagePath);
    if (!outputFile.exists()) {
      outputFile.getParentFile().mkdirs();
    }
    File existingFile=new File(imagePath.replaceFirst("\\w{3}.zip",""));
    if (existingFile.exists()) {
      new TFile(existingFile).cp_rp(outputFile);
synchronized (sync) {
        update(cardIndex + 1,count);
      }
      existingFile.delete();
      File parent=existingFile.getParentFile();
      if (parent != null && parent.isDirectory() && parent.list().length == 0) {
        parent.delete();
      }
      return;
    }
    BufferedOutputStream out;
    URLConnection httpConn=url.openConnection(p);
    setUpConnection(httpConn);
    httpConn.connect();
    int responseCode=((HttpURLConnection)httpConn).getResponseCode();
    if (responseCode == 200) {
      try (BufferedInputStream in=new BufferedInputStream(((HttpURLConnection)httpConn).getInputStream())){
        out=new BufferedOutputStream(new TFileOutputStream(temporaryFile));
        byte[] buf=new byte[1024];
        int len;
        while ((len=in.read(buf)) != -1) {
          if (cancel) {
            in.close();
            out.flush();
            out.close();
            temporaryFile.delete();
            return;
          }
          out.write(buf,0,len);
        }
      }
       out.flush();
      out.close();
      if (card.isTwoFacedCard()) {
        BufferedImage image=ImageIO.read(temporaryFile);
        if (image.getHeight() == 470) {
          BufferedImage renderedImage=new BufferedImage(265,370,BufferedImage.TYPE_INT_RGB);
          renderedImage.getGraphics();
          Graphics2D graphics2D=renderedImage.createGraphics();
          if (card.isTwoFacedCard() && card.isSecondSide()) {
            graphics2D.drawImage(image,0,0,265,370,313,62,578,432,null);
          }
 else {
            graphics2D.drawImage(image,0,0,265,370,41,62,306,432,null);
          }
          graphics2D.dispose();
          writeImageToFile(renderedImage,outputFile);
        }
 else {
          new TFile(temporaryFile).cp_rp(outputFile);
        }
        temporaryFile.delete();
      }
 else {
        new TFile(temporaryFile).cp_rp(outputFile);
      }
    }
 else {
      logger.warn("Image download for " + card.getName() + (!card.getDownloadName().equals(card.getName()) ? " downloadname: " + card.getDownloadName() : "")+ "("+ card.getSet()+ ") failed - responseCode: "+ responseCode+ " url: "+ url.toString());
      if (logger.isDebugEnabled()) {
        logger.debug("Return ed HTML ERROR:\n" + convertStreamToString(((HttpURLConnection)httpConn).getErrorStream()));
      }
    }
  }
 catch (  AccessDeniedException e) {
    logger.error("The file " + (outputFile != null ? outputFile.toString() : "to add the image of " + card.getName() + "("+ card.getSet()+ ")") + " can't be accessed. Try rebooting your system to remove the file lock.");
  }
catch (  Exception e) {
    logger.error(e,e);
  }
 finally {
    if (temporaryFile != null) {
      temporaryFile.delete();
    }
  }
synchronized (sync) {
    update(cardIndex + 1,count);
  }
}
