{
  this.cards=cards;
  bar=new JProgressBar(this);
  JPanel p0=new JPanel();
  p0.setLayout(new BoxLayout(p0,BoxLayout.Y_AXIS));
  p0.add(Box.createVerticalStrut(5));
  jLabel1=new JLabel();
  jLabel1.setText("Please select server:");
  jLabel1.setAlignmentX(Component.LEFT_ALIGNMENT);
  p0.add(jLabel1);
  p0.add(Box.createVerticalStrut(5));
  ComboBoxModel jComboBox1Model=new DefaultComboBoxModel(new String[]{"magiccards.info","wizards.com"});
  jComboBox1=new JComboBox();
  cardImageSource=MagicCardsImageSource.getInstance();
  jComboBox1.setModel(jComboBox1Model);
  jComboBox1.setAlignmentX(Component.LEFT_ALIGNMENT);
  jComboBox1.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      JComboBox cb=(JComboBox)e.getSource();
switch (cb.getSelectedIndex()) {
case 0:
        cardImageSource=MagicCardsImageSource.getInstance();
      break;
case 1:
    cardImageSource=WizardCardsImageSource.getInstance();
  break;
}
int count=DownloadPictures.this.cards.size();
float mb=(count * cardImageSource.getAverageSize()) / 1024;
bar.setString(String.format(cardIndex == count ? "%d of %d cards finished! Please close!" : "%d of %d cards finished! Please wait! [%.1f Mb]",0,count,mb));
}
}
);
p0.add(jComboBox1);
p0.add(Box.createVerticalStrut(5));
startDownloadButton=new JButton("Start download");
startDownloadButton.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
new Thread(DownloadPictures.this).start();
startDownloadButton.setEnabled(false);
checkBox.setEnabled(false);
}
}
);
p0.add(Box.createVerticalStrut(5));
p0.add(bar);
bar.setStringPainted(true);
int count=cards.size();
float mb=(count * cardImageSource.getAverageSize()) / 1024;
bar.setString(String.format(cardIndex == cards.size() ? "%d of %d cards finished! Please close!" : "%d of %d cards finished! Please wait! [%.1f Mb]",0,cards.size(),mb));
Dimension d=bar.getPreferredSize();
d.width=300;
bar.setPreferredSize(d);
p0.add(Box.createVerticalStrut(5));
checkBox=new JCheckBox("Download images for Standard (Type2) only");
p0.add(checkBox);
p0.add(Box.createVerticalStrut(5));
checkBox.addActionListener(new ActionListener(){
@Override public void actionPerformed(ActionEvent e){
ArrayList<CardDownloadData> cardsToDownload=DownloadPictures.this.cards;
if (checkBox.isSelected()) {
DownloadPictures.this.type2cards=new ArrayList<CardDownloadData>();
for (CardDownloadData data : DownloadPictures.this.cards) {
  if (data.isType2()) {
    DownloadPictures.this.type2cards.add(data);
  }
}
cardsToDownload=DownloadPictures.this.type2cards;
}
int count=cardsToDownload.size();
float mb=(count * cardImageSource.getAverageSize()) / 1024;
bar.setString(String.format(cardIndex == count ? "%d of %d cards finished! Please close!" : "%d of %d cards finished! Please wait! [%.1f Mb]",0,count,mb));
}
}
);
Object[] options={startDownloadButton,closeButton=new JButton("Cancel")};
dlg=new JOptionPane(p0,JOptionPane.DEFAULT_OPTION,JOptionPane.PLAIN_MESSAGE,null,options,options[1]);
}
