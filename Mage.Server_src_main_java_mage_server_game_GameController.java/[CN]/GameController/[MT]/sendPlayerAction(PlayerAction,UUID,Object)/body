{
switch (playerAction) {
case UNDO:
    game.undo(getPlayerId(userId));
  break;
case ROLLBACK_TURNS:
if (data instanceof Integer) {
  turnsToRollback=(Integer)data;
  if (game.canRollbackTurns(turnsToRollback)) {
    requestsOpen=requestPermissionToRollback(userId,turnsToRollback);
    if (requestsOpen == 0) {
      game.rollbackTurns(turnsToRollback);
      turnsToRollback=-1;
      requestsOpen=-1;
    }
 else {
      userReqestingRollback=userId;
    }
  }
 else {
    UUID playerId=getPlayerId(userId);
    if (playerId != null) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        game.informPlayer(player,"That turn is not available for rollback.");
      }
    }
  }
}
break;
case ADD_PERMISSION_TO_ROLLBACK_TURN:
if (userReqestingRollback != null && requestsOpen > 0 && !userId.equals(userReqestingRollback)) {
requestsOpen--;
if (requestsOpen == 0) {
game.rollbackTurns(turnsToRollback);
turnsToRollback=-1;
userReqestingRollback=null;
requestsOpen=-1;
}
}
break;
case DENY_PERMISSON_TO_ROLLBACK_TURN:
{
UUID playerId=getPlayerId(userId);
if (playerId != null) {
Player player=game.getPlayer(playerId);
if (player != null) {
if (userReqestingRollback != null && requestsOpen > 0 && !userId.equals(userReqestingRollback)) {
turnsToRollback=-1;
userReqestingRollback=null;
requestsOpen=-1;
game.informPlayers("Rollback request denied by " + player.getLogName());
}
}
}
}
break;
case CONCEDE:
game.concede(getPlayerId(userId));
break;
case MANA_AUTO_PAYMENT_OFF:
game.setManaPoolMode(getPlayerId(userId),false);
break;
case MANA_AUTO_PAYMENT_ON:
game.setManaPoolMode(getPlayerId(userId),true);
break;
case ADD_PERMISSION_TO_SEE_HAND_CARDS:
if (data instanceof UUID) {
UUID playerId=getPlayerId(userId);
if (playerId != null) {
Player player=game.getPlayer(playerId);
if (player != null) {
player.addPermissionToShowHandCards((UUID)data);
}
}
}
break;
case REVOKE_PERMISSIONS_TO_SEE_HAND_CARDS:
UUID playerId=getPlayerId(userId);
if (playerId != null) {
Player player=game.getPlayer(playerId);
if (player != null) {
player.revokePermissionToSeeHandCards();
}
}
break;
case REQUEST_PERMISSION_TO_SEE_HAND_CARDS:
if (data instanceof UUID) {
requestPermissionToSeeHandCards(userId,(UUID)data);
}
break;
default :
game.sendPlayerAction(playerAction,getPlayerId(userId));
}
}
