{
  TournamentTypeView tournamentType=(TournamentTypeView)cbTournamentType.getSelectedItem();
  TournamentOptions tOptions=new TournamentOptions(this.txtName.getText());
  tOptions.setTournamentType(tournamentType.getName());
  tOptions.setPassword(txtPassword.getText());
  tOptions.getPlayerTypes().add("Human");
  tOptions.setWatchingAllowed(cbAllowSpectators.isSelected());
  tOptions.setQuitRatio((Integer)spnQuitRatio.getValue());
  for (  TournamentPlayerPanel player : players) {
    tOptions.getPlayerTypes().add((String)player.getPlayerType().getSelectedItem());
  }
  if (!tournamentType.isElimination()) {
    tOptions.setNumberRounds((Integer)spnNumRounds.getValue());
  }
  if (tournamentType.isDraft()) {
    DraftOptions options=new DraftOptions();
    options.setDraftType("");
    options.setTiming((TimingOption)this.cbDraftTiming.getSelectedItem());
    tOptions.setLimitedOptions(options);
  }
  if (tOptions.getLimitedOptions() == null) {
    tOptions.setLimitedOptions(new LimitedOptions());
  }
  if (tournamentType.isLimited()) {
    tOptions.getLimitedOptions().setConstructionTime((Integer)this.spnConstructTime.getValue() * 60);
    tOptions.getLimitedOptions().setIsRandom(tournamentType.isRandom());
    if (tournamentType.isCubeBooster()) {
      tOptions.getLimitedOptions().setDraftCubeName(this.cbDraftCube.getSelectedItem().toString());
      if (!(cubeFromDeckFilename.equals(""))) {
        tOptions.getLimitedOptions().setCubeFromDeckFilename(cubeFromDeckFilename);
      }
    }
 else     if (tournamentType.isRandom() || tournamentType.isRichMan()) {
      this.isRandom=tournamentType.isRandom();
      this.isRichMan=tournamentType.isRichMan();
      tOptions.getLimitedOptions().getSetCodes().clear();
      ArrayList<String> selected=randomPackSelector.getSelectedPacks();
      int maxPacks=3 * (players.size() + 1);
      if (tournamentType.isRichMan()) {
        maxPacks=36;
      }
      if (selected.size() > maxPacks) {
        StringBuilder infoString=new StringBuilder("More sets were selected than needed. ");
        infoString.append(maxPacks);
        infoString.append(" sets will be randomly chosen.");
        JOptionPane.showMessageDialog(MageFrame.getDesktop(),infoString,"Information",JOptionPane.INFORMATION_MESSAGE);
        Collections.shuffle(selected);
        tOptions.getLimitedOptions().getSetCodes().addAll(selected.subList(0,maxPacks));
      }
 else {
        tOptions.getLimitedOptions().getSetCodes().addAll(selected);
      }
    }
 else {
      for (      JComboBox pack : packs) {
        tOptions.getLimitedOptions().getSetCodes().add(((ExpansionInfo)pack.getSelectedItem()).getCode());
      }
    }
    tOptions.getMatchOptions().setDeckType("Limited");
    tOptions.getMatchOptions().setGameType("Two Player Duel");
    tOptions.getMatchOptions().setLimited(true);
  }
 else {
    tOptions.getLimitedOptions().setConstructionTime(0);
    tOptions.getLimitedOptions().setNumberBoosters(0);
    tOptions.getLimitedOptions().setDraftCube(null);
    tOptions.getLimitedOptions().setDraftCubeName("");
    tOptions.getMatchOptions().setDeckType((String)this.cbDeckType.getSelectedItem());
    tOptions.getMatchOptions().setGameType(((GameTypeView)this.cbGameType.getSelectedItem()).getName());
    tOptions.getMatchOptions().setLimited(false);
  }
  tOptions.getMatchOptions().setMatchTimeLimit((MatchTimeLimit)this.cbTimeLimit.getSelectedItem());
  tOptions.getMatchOptions().setSkillLevel((SkillLevel)this.cbSkillLevel.getSelectedItem());
  tOptions.getMatchOptions().setWinsNeeded((Integer)this.spnNumWins.getValue());
  tOptions.getMatchOptions().setFreeMulligans((Integer)this.spnFreeMulligans.getValue());
  tOptions.getMatchOptions().setAttackOption(MultiplayerAttackOption.LEFT);
  tOptions.getMatchOptions().setRange(RangeOfInfluence.ALL);
  tOptions.getMatchOptions().setRollbackTurnsAllowed(this.chkRollbackTurnsAllowed.isSelected());
  tOptions.getMatchOptions().setRated(this.chkRated.isSelected());
  saveTournamentSettingsToPrefs(tOptions);
  table=session.createTournamentTable(roomId,tOptions);
  if (table == null) {
    return;
  }
  if (session.joinTournamentTable(roomId,table.getTableId(),this.player1Panel.getPlayerName(),"Human",1,DeckImporterUtil.importDeck(this.player1Panel.getDeckFile()),tOptions.getPassword())) {
    for (    TournamentPlayerPanel player : players) {
      if (!player.getPlayerType().toString().equals("Human")) {
        if (!player.joinTournamentTable(roomId,table.getTableId(),DeckImporterUtil.importDeck(this.player1Panel.getDeckFile()))) {
          session.removeTable(roomId,table.getTableId());
          table=null;
          return;
        }
      }
    }
    this.hideDialog();
    return;
  }
  JOptionPane.showMessageDialog(MageFrame.getDesktop(),"Error joining tournament.","Error",JOptionPane.ERROR_MESSAGE);
  session.removeTable(roomId,table.getTableId());
  table=null;
}
