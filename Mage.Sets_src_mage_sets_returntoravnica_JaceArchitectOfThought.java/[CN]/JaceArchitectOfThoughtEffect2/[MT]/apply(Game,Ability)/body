{
  Player player=game.getPlayer(source.getControllerId());
  if (player == null) {
    return false;
  }
  Cards cards=new CardsImpl(Zone.PICK);
  int count=Math.min(player.getLibrary().size(),3);
  for (int i=0; i < count; i++) {
    Card card=player.getLibrary().removeFromTop(game);
    if (card != null) {
      cards.add(card);
      game.setZone(card.getId(),Zone.PICK);
    }
  }
  player.revealCards("Jace, Architect of Thought",cards,game);
  Set<UUID> opponents=game.getOpponents(source.getControllerId());
  if (!opponents.isEmpty()) {
    Player opponent=null;
    if (opponents.size() > 1) {
      TargetOpponent targetOpponent=new TargetOpponent();
      if (player.chooseTarget(Outcome.Neutral,targetOpponent,source,game)) {
        opponent=game.getPlayer(targetOpponent.getFirstTarget());
      }
    }
    if (opponent == null) {
      opponent=game.getPlayer(opponents.iterator().next());
    }
    TargetCard target=new TargetCard(0,cards.size(),Zone.PICK,new FilterCard("cards to put in the first pile"));
    Cards pile1=new CardsImpl();
    if (opponent.choose(Outcome.Neutral,cards,target,game)) {
      for (      UUID targetId : (List<UUID>)target.getTargets()) {
        Card card=cards.get(targetId,game);
        if (card != null) {
          pile1.add(card);
          cards.remove(card);
        }
      }
    }
    player.revealCards("Pile 1 (Jace, Architect of Thought)",pile1,game);
    player.revealCards("Pile 2 (Jace, Architect of Thought)",cards,game);
    postPileToLog("Pile 1",pile1.getCards(game),game);
    postPileToLog("Pile 2",cards.getCards(game),game);
    Cards cardsToHand=cards;
    Cards cardsToLibrary=pile1;
    List<Card> cardPile1=new ArrayList<>();
    List<Card> cardPile2=new ArrayList<>();
    for (    UUID cardId : pile1) {
      cardPile1.add(game.getCard(cardId));
    }
    for (    UUID cardId : cards) {
      cardPile2.add(game.getCard(cardId));
    }
    boolean pileChoice=player.choosePile(Outcome.Neutral,"Choose a pile to to put into your hand.",cardPile1,cardPile2,game);
    if (pileChoice) {
      cardsToHand=pile1;
      cardsToLibrary=cards;
    }
    game.informPlayers(player.getName() + " chose pile" + (pileChoice ? "1" : "2"));
    for (    UUID cardUuid : cardsToHand) {
      Card card=cardsToHand.get(cardUuid,game);
      if (card != null) {
        player.moveCardToHandWithInfo(card,source.getSourceId(),game,Zone.LIBRARY);
      }
    }
    TargetCard targetCard=new TargetCard(Zone.PICK,new FilterCard("card to put on the bottom of your library"));
    targetCard.setRequired(true);
    while (cardsToLibrary.size() > 1) {
      player.choose(Outcome.Neutral,cardsToLibrary,targetCard,game);
      Card card=cardsToLibrary.get(targetCard.getFirstTarget(),game);
      if (card != null) {
        cardsToLibrary.remove(card);
        player.moveCardToLibraryWithInfo(card,source.getSourceId(),game,Zone.LIBRARY,false);
      }
      target.clearChosen();
    }
    if (cardsToLibrary.size() == 1) {
      Card card=cardsToLibrary.get(cardsToLibrary.iterator().next(),game);
      player.moveCardToLibraryWithInfo(card,source.getSourceId(),game,Zone.LIBRARY,false);
    }
    return true;
  }
  return false;
}
