{
  String name=card.getName();
  String set=card.getSet();
  int type=card.getType();
  if (name.toLowerCase().contains("emblem")) {
    for (    String emblem : EMBLEMS) {
      if (name.toLowerCase().contains(emblem.toLowerCase())) {
        name=emblem + " Emblem";
        break;
      }
    }
  }
  if (SET_NAMES_REPLACEMENT.containsKey(set.toLowerCase())) {
    set=SET_NAMES_REPLACEMENT.get(set.toLowerCase());
  }
  List<TokenData> tokensData=getTokensData();
  if (tokensData.isEmpty()) {
    return null;
  }
  List<TokenData> matchedTokens=new ArrayList<TokenData>();
  for (  TokenData token : tokensData) {
    if (name.equalsIgnoreCase(token.getName()) && set.equalsIgnoreCase(token.getExpansionSetCode())) {
      matchedTokens.add(token);
    }
  }
  if (matchedTokens.isEmpty()) {
    logger.info("Could not find data for token " + name + ", set "+ set+ ".");
    return null;
  }
  TokenData tokenData;
  if (type == 0) {
    if (matchedTokens.size() > 1) {
      logger.info("Multiple images were found for token " + name + ", set "+ set+ ".");
    }
    tokenData=matchedTokens.get(0);
  }
 else {
    if (type > matchedTokens.size()) {
      logger.warn("Not enough images for token with type " + type + ", name "+ name+ ", set "+ set+ ".");
      return null;
    }
    tokenData=matchedTokens.get(card.getType() - 1);
  }
  String url="http://tokens.mtg.onl/tokens/" + tokenData.getExpansionSetCode().trim() + "_"+ tokenData.getNumber().trim()+ "-"+ tokenData.getName().trim()+ ".jpg";
  url=url.replace(' ','-');
  return url;
}
