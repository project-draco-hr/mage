{
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=source.getSourceObject(game);
  if (controller != null && sourceObject != null) {
    Cards topLib=new CardsImpl();
    topLib.addAll(controller.getLibrary().getTopCards(game,10));
    controller.revealCards(sourceObject.getIdName(),topLib,game);
    Cards chosenCards=new CardsImpl();
    if (game.getOpponents(controller.getId()).size() >= topLib.getCards(StaticFilters.FILTER_CARD_NON_LAND,game).size()) {
      chosenCards.addAll(topLib.getCards(StaticFilters.FILTER_CARD_NON_LAND,game));
      topLib.removeAll(chosenCards);
    }
 else     if (!topLib.getCards(StaticFilters.FILTER_CARD_NON_LAND,game).isEmpty()) {
      for (      UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
        if (controller.hasOpponent(playerId,game)) {
          Player opponent=game.getPlayer(playerId);
          if (opponent != null && !topLib.getCards(StaticFilters.FILTER_CARD_NON_LAND,game).isEmpty()) {
            TargetCard target=new TargetCard(Zone.LIBRARY,StaticFilters.FILTER_CARD_NON_LAND);
            if (opponent.choose(Outcome.Detriment,topLib,target,game)) {
              Card card=game.getCard(target.getFirstTarget());
              if (card != null) {
                topLib.remove(card);
                chosenCards.add(card);
              }
            }
          }
        }
      }
    }
    controller.moveCards(chosenCards,Zone.HAND,source,game);
    while (topLib.size() > 0) {
      Card card=topLib.getRandom(game);
      if (card != null) {
        topLib.remove(card);
        controller.moveCardToLibraryWithInfo(card,source.getSourceId(),game,Zone.LIBRARY,false,false);
      }
    }
    return true;
  }
  return false;
}
