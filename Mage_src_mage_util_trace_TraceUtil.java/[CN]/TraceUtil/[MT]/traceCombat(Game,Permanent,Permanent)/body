{
  String uuid="[" + UUID.randomUUID() + "] ";
  log.error(uuid + "Tracing game state...");
  log.error(uuid + blocker.getName() + " could block "+ attacker.getName());
  log.error(uuid);
  log.error(uuid + "Attacker abilities: ");
  for (  Ability ability : attacker.getAbilities()) {
    log.error(uuid + "     " + ability.toString()+ ", id="+ ability.getId());
  }
  log.error(uuid + "Blocker abilities: ");
  for (  Ability ability : blocker.getAbilities()) {
    log.error(uuid + "     " + ability.toString()+ ", id="+ ability.getId());
  }
  log.error(uuid);
  log.error(uuid + "Flying ability id: " + FlyingAbility.getInstance().getId());
  log.error(uuid + "Reach ability id: " + ReachAbility.getInstance().getId());
  log.error(uuid);
  log.error(uuid + "Restriction effects:");
  Ability ability=attacker.getAbilities().size() > 0 ? attacker.getAbilities().get(0) : null;
  ContinuousEffectsList<RestrictionEffect> restrictionEffects=(ContinuousEffectsList<RestrictionEffect>)game.getContinuousEffects().getRestrictionEffects();
  for (  RestrictionEffect effect : restrictionEffects) {
    log.error(uuid + "    " + effect);
    log.error(uuid + "        id=" + effect.getId());
    log.error(uuid + "        applies to attacker=" + effect.applies(attacker,ability,game));
    log.error(uuid + "        applies to blocker=" + effect.applies(blocker,ability,game));
  }
  for (  RestrictionEffect effect : restrictionEffects) {
    ability=restrictionEffects.getAbility(effect.getId());
    if (!(ability instanceof StaticAbility) || ability.isInUseableZone(game,false)) {
      log.error(uuid + "        ability=" + ability+ ", applies_to_attacker="+ effect.applies(attacker,ability,game));
      log.error(uuid + "        ability=" + ability+ ", applies_to_blocker="+ effect.applies(blocker,ability,game));
    }
 else {
      boolean usable=ability.isInUseableZone(game,false);
      log.error(uuid + "        instanceof: " + (ability instanceof StaticAbility)+ ", ability="+ ability);
      log.error(uuid + "        usable: " + usable+ ", ability="+ ability);
      if (!usable) {
        Constants.Zone zone=ability.getZone();
        log.error(uuid + "        zone: " + zone);
        MageObject object=game.getObject(ability.getSourceId());
        log.error(uuid + "        object: " + object);
        if (object != null) {
          log.error(uuid + "        contains:" + object.getAbilities().contains(ability));
        }
        Constants.Zone test=game.getState().getZone(ability.getSourceId());
        log.error(uuid + "        test_zone: " + test);
      }
    }
  }
  log.error(uuid);
}
