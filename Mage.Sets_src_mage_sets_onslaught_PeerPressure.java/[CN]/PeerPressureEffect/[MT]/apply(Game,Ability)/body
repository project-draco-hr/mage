{
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Choice choice=new ChoiceImpl(true);
    choice.setMessage("Choose creature type");
    choice.setChoices(CardRepository.instance.getCreatureTypes());
    while (!controller.choose(Outcome.GainControl,choice,game)) {
      if (!controller.isInGame()) {
        return false;
      }
    }
    String chosenType=choice.getChoice();
    if (!game.isSimulation()) {
      game.informPlayers(controller.getLogName() + " has chosen " + chosenType);
    }
    UUID playerWithMost=null;
    int maxControlled=0;
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      FilterPermanent filter=new FilterCreaturePermanent(chosenType,chosenType);
      filter.add(new ControllerIdPredicate(playerId));
      int controlled=new PermanentsOnBattlefieldCount(filter).calculate(game,source,this);
      if (controlled > maxControlled) {
        maxControlled=controlled;
        playerWithMost=playerId;
      }
 else       if (controlled == maxControlled) {
        playerWithMost=null;
      }
    }
    if (playerWithMost != null && playerWithMost.equals(controller.getId())) {
      for (      Permanent permanent : game.getBattlefield().getActivePermanents(new FilterCreaturePermanent(chosenType,chosenType),controller.getId(),source.getSourceId(),game)) {
        ContinuousEffect effect=new GainControlTargetEffect(Duration.EndOfGame);
        effect.setTargetPointer(new FixedTarget(permanent.getId()));
        game.addEffect(effect,source);
      }
    }
    return true;
  }
  return false;
}
