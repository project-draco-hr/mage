{
  String cardPath=TESTS_PATH + path;
  File checkFile=new File(cardPath);
  if (!checkFile.exists()) {
    throw new FileNotFoundException("Couldn't find test file: " + cardPath);
  }
  if (checkFile.isDirectory()) {
    throw new FileNotFoundException("Couldn't find test file: " + cardPath + ". It is directory.");
  }
  if (currentGame != null) {
    logger.info("Resetting previous game and creating new one!");
    currentGame=null;
    System.gc();
  }
  Game game=new TwoPlayerDuel(Constants.MultiplayerAttackOption.LEFT,Constants.RangeOfInfluence.ALL);
  computerA=aiTypeA.equals(CardTestBase.AIType.MinimaxHybrid) ? createPlayer("ComputerA","Computer - minimax hybrid") : createPlayer("ComputerA","Computer - mad");
  computerA.setTestMode(true);
  Deck deck=Deck.load(Sets.loadDeck("RB Aggro.dck"));
  if (deck.getCards().size() < 40) {
    throw new IllegalArgumentException("Couldn't load deck, deck size=" + deck.getCards().size());
  }
  game.addPlayer(computerA,deck);
  game.loadCards(deck.getCards(),computerA.getId());
  computerB=aiTypeB.equals(CardTestBase.AIType.MinimaxHybrid) ? createPlayer("ComputerB","Computer - minimax hybrid") : createPlayer("ComputerB","Computer - mad");
  computerB.setTestMode(true);
  Deck deck2=Deck.load(Sets.loadDeck("RB Aggro.dck"));
  if (deck2.getCards().size() < 40) {
    throw new IllegalArgumentException("Couldn't load deck, deck size=" + deck2.getCards().size());
  }
  game.addPlayer(computerB,deck2);
  game.loadCards(deck2.getCards(),computerB.getId());
  parseScenario(cardPath);
  activePlayer=computerA;
  currentGame=game;
}
