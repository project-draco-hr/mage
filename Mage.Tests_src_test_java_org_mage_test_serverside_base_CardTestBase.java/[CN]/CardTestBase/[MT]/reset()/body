{
  if (currentGame != null) {
    logger.info("Resetting previous game and creating new one!");
    currentGame=null;
    System.gc();
  }
  Game game=new TwoPlayerDuel(Constants.MultiplayerAttackOption.LEFT,Constants.RangeOfInfluence.ALL);
  playerA=aiTypeA.equals(CardTestBase.AIType.MinimaxHybrid) ? createPlayer("PlayerA","Computer - minimax hybrid") : createPlayer("PlayerA","Computer - mad");
  playerA.setTestMode(true);
  logger.info("Loading deck...");
  Deck deck=Deck.load(Sets.loadDeck("RB Aggro.dck"));
  logger.info("Done!");
  if (deck.getCards().size() < 40) {
    throw new IllegalArgumentException("Couldn't load deck, deck size=" + deck.getCards().size());
  }
  game.addPlayer(playerA,deck);
  game.loadCards(deck.getCards(),playerA.getId());
  playerB=aiTypeB.equals(CardTestBase.AIType.MinimaxHybrid) ? createPlayer("PlayerB","Computer - minimax hybrid") : createPlayer("PlayerB","Computer - mad");
  playerB.setTestMode(true);
  Deck deck2=Deck.load(Sets.loadDeck("RB Aggro.dck"));
  if (deck2.getCards().size() < 40) {
    throw new IllegalArgumentException("Couldn't load deck, deck size=" + deck2.getCards().size());
  }
  game.addPlayer(playerB,deck2);
  game.loadCards(deck2.getCards(),playerB.getId());
  activePlayer=playerA;
  currentGame=game;
  stopOnTurn=2;
  handCardsA.clear();
  handCardsB.clear();
  battlefieldCardsA.clear();
  battlefieldCardsB.clear();
  graveyardCardsA.clear();
  graveyardCardsB.clear();
  libraryCardsA.clear();
  libraryCardsB.clear();
  commandsA.clear();
  commandsB.clear();
}
