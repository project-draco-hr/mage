{
  if (Thread.interrupted()) {
    Thread.currentThread().interrupt();
    logger.fine("interrupted");
    return GameStateEvaluator.evaluate(playerId,game);
  }
  Integer val=null;
  SimulationNode bestNode=null;
  if (game.getCombat().isAttacked(defenderId,game)) {
    SimulatedPlayer defender=(SimulatedPlayer)game.getPlayer(defenderId);
    for (    Combat engagement : defender.addBlockers(game)) {
      if (alpha >= beta) {
        logger.fine("simulating -- pruning blockers");
        break;
      }
      Game sim=game.copy();
      for (      CombatGroup group : engagement.getGroups()) {
        UUID attackerId=group.getAttackers().get(0);
        for (        UUID blockerId : group.getBlockers()) {
          sim.getPlayer(defenderId).declareBlocker(blockerId,attackerId,sim);
        }
      }
      sim.fireEvent(GameEvent.getEvent(GameEvent.EventType.DECLARED_BLOCKERS,playerId,playerId));
      SimulationNode newNode=new SimulationNode(sim,depth,defenderId);
      if (logger.isLoggable(Level.FINE))       logger.fine("simulating block -- node#: " + SimulationNode.getCount());
      sim.checkStateAndTriggered();
      while (!sim.getStack().isEmpty()) {
        sim.getStack().resolve(sim);
        logger.fine("resolving triggered abilities");
        sim.applyEffects();
      }
      sim.fireEvent(GameEvent.getEvent(GameEvent.EventType.DECLARE_BLOCKERS_STEP_POST,sim.getActivePlayerId(),sim.getActivePlayerId()));
      Combat simCombat=sim.getCombat().copy();
      finishCombat(sim);
      if (!counter) {
        int testScore=GameStateEvaluator.evaluate(playerId,sim);
        if (testScore < currentScore) {
          logger.fine("simulating -- abandoning counterattack check, no immediate benefit");
          val=testScore;
        }
 else         val=simulatePostCombatMain(sim,newNode,depth - 1,alpha,beta);
      }
 else       val=GameStateEvaluator.evaluate(playerId,sim);
      if (!defenderId.equals(playerId)) {
        if (val < beta) {
          beta=val;
          bestNode=newNode;
          node.setCombat(simCombat);
        }
      }
 else {
        if (val > alpha) {
          alpha=val;
          bestNode=newNode;
          node.setCombat(simCombat);
        }
      }
    }
  }
  if (val == null)   val=GameStateEvaluator.evaluate(playerId,game);
  if (bestNode != null) {
    node.children.clear();
    node.children.add(bestNode);
  }
  if (logger.isLoggable(Level.FINE))   logger.fine("returning -- combat blocker score: " + val + " depth:"+ depth+ " for player:"+ game.getPlayer(node.getPlayerId()).getName());
  return val;
}
