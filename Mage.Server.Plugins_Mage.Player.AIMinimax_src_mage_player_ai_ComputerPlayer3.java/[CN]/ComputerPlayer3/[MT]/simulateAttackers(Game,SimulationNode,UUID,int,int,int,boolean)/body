{
  if (Thread.interrupted()) {
    Thread.currentThread().interrupt();
    logger.debug("interrupted");
    return GameStateEvaluator.evaluate(playerId,game);
  }
  Integer val=null;
  SimulationNode bestNode=null;
  SimulatedPlayer attacker=(SimulatedPlayer)game.getPlayer(attackerId);
  if (logger.isDebugEnabled())   logger.debug(attacker.getName() + "'s possible attackers: " + attacker.getAvailableAttackers(game));
  for (  Combat engagement : attacker.addAttackers(game)) {
    if (alpha >= beta) {
      logger.debug("simulating -- pruning attackers");
      break;
    }
    Game sim=game.copy();
    UUID defenderId=game.getOpponents(attackerId).iterator().next();
    for (    CombatGroup group : engagement.getGroups()) {
      for (      UUID attackId : group.getAttackers()) {
        sim.getPlayer(attackerId).declareAttacker(attackId,defenderId,sim);
      }
    }
    sim.fireEvent(GameEvent.getEvent(GameEvent.EventType.DECLARED_ATTACKERS,attackerId,attackerId));
    SimulationNode newNode=new SimulationNode(node,sim,depth,attackerId);
    if (logger.isDebugEnabled())     logger.debug("simulating attack for player:" + game.getPlayer(attackerId).getName());
    sim.checkStateAndTriggered();
    while (!sim.getStack().isEmpty()) {
      sim.getStack().resolve(sim);
      logger.debug("resolving triggered abilities");
      sim.applyEffects();
    }
    sim.fireEvent(GameEvent.getEvent(GameEvent.EventType.DECLARE_ATTACKERS_STEP_POST,sim.getActivePlayerId(),sim.getActivePlayerId()));
    Combat simCombat=sim.getCombat().copy();
    sim.getPhase().setStep(new DeclareBlockersStep());
    val=simulateCombat(sim,newNode,depth - 1,alpha,beta,counter);
    if (!attackerId.equals(playerId)) {
      if (val < beta) {
        beta=val;
        bestNode=newNode;
        node.setCombat(simCombat);
      }
    }
 else {
      if (val > alpha) {
        alpha=val;
        bestNode=newNode;
        node.setCombat(simCombat);
      }
    }
  }
  if (val == null)   val=GameStateEvaluator.evaluate(playerId,game);
  if (bestNode != null) {
    node.children.clear();
    node.children.add(bestNode);
  }
  if (logger.isDebugEnabled())   logger.debug("returning -- combat attacker score: " + val + " depth:"+ depth+ " for player:"+ game.getPlayer(node.getPlayerId()).getName());
  return val;
}
