{
  logState(game);
  if (logger.isDebugEnabled())   logger.debug("Game State: Turn-" + game.getTurnNum() + " Step-"+ game.getTurn().getStepType()+ " ActivePlayer-"+ game.getPlayer(game.getActivePlayerId()).getName()+ " PriorityPlayer-"+ name);
  game.firePriorityEvent(playerId);
switch (game.getTurn().getStepType()) {
case UPKEEP:
case DRAW:
    pass();
  return false;
case PRECOMBAT_MAIN:
if (game.getActivePlayerId().equals(playerId)) {
  if (actions.size() == 0) {
    calculatePreCombatActions(game);
  }
  act(game);
  return true;
}
 else pass();
return false;
case BEGIN_COMBAT:
pass();
return false;
case DECLARE_ATTACKERS:
if (!game.getActivePlayerId().equals(playerId)) {
if (actions.size() == 0) {
calculatePreCombatActions(game);
}
act(game);
return true;
}
 else pass();
return false;
case DECLARE_BLOCKERS:
case FIRST_COMBAT_DAMAGE:
case COMBAT_DAMAGE:
case END_COMBAT:
pass();
return false;
case POSTCOMBAT_MAIN:
if (game.getActivePlayerId().equals(playerId)) {
if (actions.size() == 0) {
calculatePostCombatActions(game);
}
act(game);
return true;
}
 else pass();
return false;
case END_TURN:
case CLEANUP:
pass();
return false;
}
return false;
}
