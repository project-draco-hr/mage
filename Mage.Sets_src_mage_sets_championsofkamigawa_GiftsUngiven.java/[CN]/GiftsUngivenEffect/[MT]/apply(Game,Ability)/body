{
  Player player=game.getPlayer(source.getControllerId());
  Card sourceCard=game.getCard(source.getSourceId());
  if (player == null || sourceCard == null) {
    return false;
  }
  GiftsUngivenTarget target=new GiftsUngivenTarget();
  if (player.searchLibrary(target,game)) {
    if (target.getTargets().size() > 0) {
      Cards cards=new CardsImpl();
      for (      UUID cardId : (List<UUID>)target.getTargets()) {
        Card card=player.getLibrary().remove(cardId,game);
        if (card != null) {
          cards.add(card);
        }
      }
      player.revealCards(sourceCard.getName(),cards,game);
      CardsImpl cardsToKeep=new CardsImpl();
      if (cards.size() > 2) {
        cardsToKeep.addAll(cards);
        Player opponent;
        if (game.getOpponents(player.getId()).size() > 1) {
          TargetOpponent targetOpponent=new TargetOpponent();
          player.chooseTarget(outcome,targetOpponent,source,game);
          opponent=game.getPlayer(target.getFirstTarget());
        }
 else {
          opponent=game.getPlayer(game.getOpponents(player.getId()).iterator().next());
        }
        TargetCard targetDiscard=new TargetCard(2,Zone.PICK,new FilterCard("cards to put in graveyard"));
        if (opponent != null && opponent.choose(Outcome.Discard,cards,targetDiscard,game)) {
          cardsToKeep.removeAll(targetDiscard.getTargets());
          cards.removeAll(cardsToKeep);
        }
      }
      for (      UUID cardId : cards) {
        Card card=game.getCard(cardId);
        if (card != null) {
          player.moveCardToGraveyardWithInfo(card,source.getSourceId(),game,Zone.LIBRARY);
        }
      }
      for (      UUID cardId : cardsToKeep) {
        Card card=game.getCard(cardId);
        if (card != null) {
          player.moveCardToHandWithInfo(card,source.getSourceId(),game,Zone.LIBRARY);
        }
      }
    }
    player.shuffleLibrary(game);
    return true;
  }
  player.shuffleLibrary(game);
  return false;
}
