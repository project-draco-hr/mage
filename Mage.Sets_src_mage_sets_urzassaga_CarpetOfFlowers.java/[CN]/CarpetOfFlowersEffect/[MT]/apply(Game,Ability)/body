{
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    ChoiceColor choice=new ChoiceColor();
    while (!choice.isChosen()) {
      controller.choose(Outcome.Protect,choice,game);
      if (!controller.canRespond()) {
        return false;
      }
    }
    int countMax=game.getBattlefield().count(filter,source.getSourceId(),source.getTargets().getFirstTarget(),game);
    ChoiceImpl choiceCount=new ChoiceImpl(true);
    LinkedHashSet<String> set=new LinkedHashSet<>();
    for (int i=0; i <= countMax; i++) {
      set.add(Integer.toString(i));
    }
    choiceCount.setChoices(set);
    choiceCount.setMessage("Choose number of mana");
    controller.choose(Outcome.PutManaInPool,choiceCount,game);
    int count=Integer.parseInt(choiceCount.getChoice());
    if (count > 0) {
      Mana mana=new Mana();
switch (choice.getChoice()) {
case "Black":
        mana.setBlack(count);
      break;
case "Blue":
    mana.setBlue(count);
  break;
case "Red":
mana.setRed(count);
break;
case "Green":
mana.setGreen(count);
break;
case "White":
mana.setWhite(count);
break;
case "Colorless":
mana.setGeneric(count);
break;
}
checkToFirePossibleEvents(mana,game,source);
controller.getManaPool().addMana(mana,game,source);
}
return true;
}
return false;
}
