{
  Player targetPlayer=game.getPlayer(source.getFirstTarget());
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=game.getObject(source.getSourceId());
  if (targetPlayer != null && sourceObject != null && controller != null) {
    targetPlayer.revealCards(sourceObject.getIdName(),targetPlayer.getHand(),game);
    TargetCard target=new TargetCard(Zone.HAND,filter);
    target.setNotTarget(true);
    Card chosenCard=null;
    if (controller.chooseTarget(Outcome.Benefit,targetPlayer.getHand(),target,source,game)) {
      chosenCard=game.getCard(target.getFirstTarget());
    }
    FilterCard filterNamedCards=new FilterCard();
    if (chosenCard != null) {
      filterNamedCards.add(new NamePredicate(chosenCard.getName()));
      filterNamedCards.setMessage("cards named " + chosenCard.getName());
    }
 else {
      filterNamedCards.add(new NamePredicate("----"));
    }
    Cards cardsToExile=new CardsImpl();
    if (chosenCard != null) {
      for (      Card checkCard : targetPlayer.getGraveyard().getCards(game)) {
        if (checkCard.getName().equals(chosenCard.getName())) {
          cardsToExile.add(checkCard);
        }
      }
      TargetCard targetCardsHand=new TargetCard(0,Integer.MAX_VALUE,Zone.HAND,filterNamedCards);
      controller.chooseTarget(outcome,targetPlayer.getHand(),targetCardsHand,source,game);
      for (      UUID cardId : targetCardsHand.getTargets()) {
        Card card=game.getCard(cardId);
        if (card != null) {
          cardsToExile.add(card);
        }
      }
    }
    if (chosenCard != null || controller.chooseUse(outcome,"Search library anyway?",source,game)) {
      TargetCardInLibrary targetCardsLibrary=new TargetCardInLibrary(0,Integer.MAX_VALUE,filterNamedCards);
      controller.searchLibrary(targetCardsLibrary,game,targetPlayer.getId());
      for (      UUID cardId : targetCardsLibrary.getTargets()) {
        Card card=game.getCard(cardId);
        if (card != null) {
          cardsToExile.add(card);
        }
      }
    }
    if (!cardsToExile.isEmpty()) {
      controller.moveCards(cardsToExile,Zone.EXILED,source,game);
    }
    targetPlayer.shuffleLibrary(source,game);
    return true;
  }
  return false;
}
