{
  Player opponent=game.getPlayer(this.getTargetPointer().getFirst(game,source));
  if (opponent != null) {
    Target target=new TargetControlledCreaturePermanent(0,Integer.MAX_VALUE,new FilterControlledCreaturePermanent(),true);
    if (target.choose(Outcome.Neutral,opponent.getId(),source.getSourceId(),game)) {
      for (      Permanent permanent : game.getBattlefield().getActivePermanents(new FilterControlledCreaturePermanent(),opponent.getId(),source.getSourceId(),game)) {
        if (target.getTargets().contains(permanent.getId())) {
          RequirementEffect effect=new OracleEnVecMustAttackRequirementEffect();
          effect.setTargetPointer(new FixedTarget(permanent.getId()));
          game.addEffect(effect,source);
        }
 else {
          RestrictionEffect effect=new OracleEnVecCantAttackRestrictionEffect();
          effect.setTargetPointer(new FixedTarget(permanent.getId()));
          game.addEffect(effect,source);
        }
      }
      DelayedTriggeredAbility delayedAbility=new OracleEnVecDelayedTriggeredAbility(game.getTurnNum(),target.getTargets());
      delayedAbility.setSourceId(source.getSourceId());
      delayedAbility.setControllerId(source.getControllerId());
      delayedAbility.setSourceObject(source.getSourceObject(game));
      game.addDelayedTriggeredAbility(delayedAbility);
      return true;
    }
  }
  return false;
}
