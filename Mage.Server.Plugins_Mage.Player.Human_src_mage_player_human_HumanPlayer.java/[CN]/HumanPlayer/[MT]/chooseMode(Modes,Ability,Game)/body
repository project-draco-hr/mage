{
  updateGameStatePriority("chooseMode",game);
  if (modes.size() > 1) {
    MageObject obj=game.getObject(source.getSourceId());
    Map<UUID,String> modeMap=new LinkedHashMap<>();
    AvailableModes:     for (    Mode mode : modes.getAvailableModes(source,game)) {
      int timesSelected=0;
      for (      Mode selectedMode : modes.getSelectedModes()) {
        if (mode.getId().equals(selectedMode.getId())) {
          if (modes.isEachModeMoreThanOnce()) {
            timesSelected++;
          }
 else {
            continue AvailableModes;
          }
        }
      }
      if (mode.getTargets().canChoose(source.getSourceId(),source.getControllerId(),game)) {
        String modeText=mode.getEffects().getText(mode);
        if (obj != null) {
          modeText=modeText.replace("{source}",obj.getName()).replace("{this}",obj.getName());
        }
        if (modes.isEachModeMoreThanOnce()) {
          if (timesSelected > 0) {
            modeText="(selected " + timesSelected + "x) "+ modeText;
          }
        }
        modeMap.put(mode.getId(),modeText);
      }
    }
    if (modeMap.size() > 0) {
      boolean done=false;
      while (!done) {
        game.fireGetModeEvent(playerId,"Choose Mode",modeMap);
        waitForResponse(game);
        if (response.getUUID() != null) {
          for (          Mode mode : modes.getAvailableModes(source,game)) {
            if (mode.getId().equals(response.getUUID())) {
              return mode;
            }
          }
        }
        if (!source.getAbilityType().equals(AbilityType.TRIGGERED)) {
          done=true;
        }
        if (!canRespond()) {
          return null;
        }
      }
    }
    return null;
  }
  return modes.getMode();
}
