{
  updateGameStatePriority("selectAttackers",game);
  FilterCreatureForCombat filter=filterCreatureForCombat.copy();
  filter.add(new ControllerIdPredicate(attackingPlayerId));
  while (!abort) {
    if (passedAllTurns || passedUntilEndStepBeforeMyTurn || (!getUserData().getUserSkipPrioritySteps().isStopOnDeclareAttackersDuringSkipAction() && (passedTurn || passedUntilEndOfTurn || passedUntilNextMain))) {
      return;
    }
    Map<String,Serializable> options=new HashMap<>();
    List<UUID> possibleAttackers=new ArrayList<>();
    for (    Permanent possibleAttacker : game.getBattlefield().getActivePermanents(filter,attackingPlayerId,game)) {
      if (possibleAttacker.canAttack(game)) {
        possibleAttackers.add(possibleAttacker.getId());
      }
    }
    options.put(Constants.Option.POSSIBLE_ATTACKERS,(Serializable)possibleAttackers);
    if (possibleAttackers.size() > 0) {
      options.put(Constants.Option.SPECIAL_BUTTON,(Serializable)"All attack");
    }
    game.fireSelectEvent(playerId,"Select attackers",options);
    waitForResponse(game);
    if (response.getString() != null && response.getString().equals("special")) {
      setStoredBookmark(game.bookmarkState());
      UUID attackedDefender=null;
      if (game.getCombat().getDefenders().size() > 1) {
        attackedDefender=selectDefenderForAllAttack(game.getCombat().getDefenders(),game);
      }
 else       if (game.getCombat().getDefenders().size() == 1) {
        attackedDefender=game.getCombat().getDefenders().iterator().next();
      }
      for (      Permanent attacker : game.getBattlefield().getAllActivePermanents(filterCreatureForCombat,getId(),game)) {
        if (game.getContinuousEffects().checkIfThereArePayCostToAttackBlockEffects(GameEvent.getEvent(GameEvent.EventType.DECLARE_ATTACKER,attackedDefender,attacker.getId(),attacker.getControllerId()),game)) {
          continue;
        }
        if (game.getCombat().getCreaturesForcedToAttack().containsKey(attacker.getId())) {
          Set<UUID> possibleDefenders=game.getCombat().getCreaturesForcedToAttack().get(attacker.getId());
          if (!possibleDefenders.isEmpty() && !possibleDefenders.contains(attackedDefender)) {
            declareAttacker(attacker.getId(),possibleDefenders.iterator().next(),game,false);
            continue;
          }
        }
        declareAttacker(attacker.getId(),attackedDefender,game,false);
      }
    }
 else     if (response.getBoolean() != null) {
      if (!game.getCombat().getCreaturesForcedToAttack().isEmpty()) {
        if (!game.getCombat().getAttackers().containsAll(game.getCombat().getCreaturesForcedToAttack().keySet())) {
          int forcedAttackers=0;
          StringBuilder sb=new StringBuilder();
          for (          UUID creatureId : game.getCombat().getCreaturesForcedToAttack().keySet()) {
            boolean validForcedAttacker=false;
            if (game.getCombat().getAttackers().contains(creatureId)) {
              Set<UUID> possibleDefender=game.getCombat().getCreaturesForcedToAttack().get(creatureId);
              if (possibleDefender.isEmpty() || possibleDefender.contains(game.getCombat().getDefenderId(creatureId))) {
                validForcedAttacker=true;
              }
            }
            if (validForcedAttacker) {
              forcedAttackers++;
            }
 else {
              Permanent creature=game.getPermanent(creatureId);
              if (creature != null) {
                sb.append(creature.getIdName()).append(" ");
              }
            }
          }
          if (game.getCombat().getMaxAttackers() > forcedAttackers) {
            int requireToAttack=Math.min(game.getCombat().getMaxAttackers() - forcedAttackers,game.getCombat().getCreaturesForcedToAttack().size() - forcedAttackers);
            String message=(requireToAttack == 1 ? " more attacker that is " : " more attackers that are ") + "forced to attack.\nCreature" + (requireToAttack == 1 ? "" : "s")+ " forced to attack: ";
            game.informPlayer(this,sb.insert(0,message).insert(0,requireToAttack).insert(0,"You have to attack with ").toString());
            continue;
          }
        }
      }
      return;
    }
 else     if (response.getInteger() != null) {
      return;
    }
 else     if (response.getUUID() != null) {
      Permanent attacker=game.getPermanent(response.getUUID());
      if (attacker != null) {
        if (filterCreatureForCombat.match(attacker,null,playerId,game)) {
          selectDefender(game.getCombat().getDefenders(),attacker.getId(),game);
        }
 else         if (filterAttack.match(attacker,null,playerId,game) && game.getStack().isEmpty()) {
          removeAttackerIfPossible(game,attacker);
        }
      }
    }
  }
}
