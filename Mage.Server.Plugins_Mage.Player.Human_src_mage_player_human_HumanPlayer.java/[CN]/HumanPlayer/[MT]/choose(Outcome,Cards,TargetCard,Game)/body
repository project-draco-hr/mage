{
  updateGameStatePriority("choose(4)",game);
  while (!abort) {
    boolean required=target.isRequired();
    if (cards == null) {
      required=false;
    }
 else {
      int count=cards.count(target.getFilter(),game);
      if (count == 0)       required=false;
    }
    Map<String,Serializable> options=getOptions(target);
    if (target.getTargets().size() > 0) {
      if (options == null) {
        options=new HashMap<String,Serializable>(1);
      }
      List<UUID> chosen=(List<UUID>)target.getTargets();
      options.put("chosen",(Serializable)chosen);
    }
    game.fireSelectTargetEvent(playerId,target.getMessage(),cards,required,options);
    waitForResponse();
    if (response.getUUID() != null) {
      if (target.canTarget(response.getUUID(),cards,game)) {
        target.add(response.getUUID(),game);
        if (target.doneChosing()) {
          return true;
        }
      }
    }
 else {
      if (target.getTargets().size() >= target.getNumberOfTargets()) {
        return true;
      }
      if (!required) {
        return false;
      }
    }
  }
  return false;
}
