{
  passed=false;
  if (!abort) {
    if (passedAllTurns) {
      pass(game);
      return false;
    }
    if (game.getStack().isEmpty()) {
      passedUntilStackResolved=false;
      boolean dontCheckPassStep=false;
      if (passedTurn) {
        pass(game);
        return false;
      }
      if (passedUntilNextMain) {
        if (game.getTurn().getStepType().equals(PhaseStep.POSTCOMBAT_MAIN) || game.getTurn().getStepType().equals(PhaseStep.PRECOMBAT_MAIN)) {
          if (!skippedAtLeastOnce || (!playerId.equals(game.getActivePlayerId()) && !this.getUserData().getUserSkipPrioritySteps().isStopOnAllMainPhases())) {
            skippedAtLeastOnce=true;
            pass(game);
            return false;
          }
 else {
            dontCheckPassStep=true;
            passedUntilNextMain=false;
          }
        }
 else {
          skippedAtLeastOnce=true;
          pass(game);
          return false;
        }
      }
      if (passedUntilEndOfTurn) {
        if (game.getTurn().getStepType().equals(PhaseStep.END_TURN)) {
          if (!skippedAtLeastOnce || (playerId.equals(game.getActivePlayerId()) && !this.getUserData().getUserSkipPrioritySteps().isStopOnAllEndPhases())) {
            skippedAtLeastOnce=true;
            pass(game);
            return false;
          }
 else {
            dontCheckPassStep=true;
            passedUntilEndOfTurn=false;
          }
        }
 else {
          skippedAtLeastOnce=true;
          pass(game);
          return false;
        }
      }
      if (!dontCheckPassStep && checkPassStep(game)) {
        pass(game);
        return false;
      }
    }
 else     if (passedUntilStackResolved) {
      if (dateLastAddedToStack == game.getStack().getDateLastAdded()) {
        dateLastAddedToStack=game.getStack().getDateLastAdded();
        pass(game);
        return false;
      }
 else {
        passedUntilStackResolved=false;
      }
    }
    updateGameStatePriority("priority",game);
    game.firePriorityEvent(playerId);
    waitForResponse(game);
    if (response.getBoolean() != null) {
      pass(game);
      return false;
    }
 else     if (response.getInteger() != null) {
      pass(game);
      return false;
    }
 else     if (response.getString() != null && response.getString().equals("special")) {
      specialAction(game);
    }
 else     if (response.getUUID() != null) {
      boolean result=false;
      MageObject object=game.getObject(response.getUUID());
      if (object != null) {
        Zone zone=game.getState().getZone(object.getId());
        if (zone != null) {
          if (object instanceof Card && ((Card)object).isFaceDown()) {
            revealFaceDownCard((Card)object,game);
            result=true;
          }
          LinkedHashMap<UUID,ActivatedAbility> useableAbilities=getUseableActivatedAbilities(object,zone,game);
          if (useableAbilities != null && useableAbilities.size() > 0) {
            activateAbility(useableAbilities,object,game);
            result=true;
          }
        }
      }
      return result;
    }
 else     if (response.getManaType() != null) {
      return false;
    }
    return true;
  }
  return false;
}
