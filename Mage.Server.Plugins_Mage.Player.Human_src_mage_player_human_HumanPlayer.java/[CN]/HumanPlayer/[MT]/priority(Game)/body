{
  passed=false;
  if (!abort) {
    if (passedAllTurns) {
      pass(game);
      return false;
    }
    if (passedTurn && game.getStack().isEmpty()) {
      pass(game);
      return false;
    }
    if (passedUntilEndOfTurn && game.getStack().isEmpty() && (!game.getTurn().getStepType().equals(PhaseStep.END_TURN) || playerId.equals(game.getActivePlayerId()))) {
      pass(game);
      return false;
    }
    updateGameStatePriority("priority",game);
    game.firePriorityEvent(playerId);
    waitForResponse(game);
    if (response.getBoolean() != null) {
      pass(game);
      return false;
    }
 else     if (response.getInteger() != null) {
      pass(game);
      return false;
    }
 else     if (response.getString() != null && response.getString().equals("special")) {
      specialAction(game);
    }
 else     if (response.getUUID() != null) {
      boolean result=false;
      MageObject object=game.getObject(response.getUUID());
      if (object != null) {
        Zone zone=game.getState().getZone(object.getId());
        if (zone != null) {
          if (object instanceof Card && ((Card)object).isFaceDown()) {
            revealFaceDownCard((Card)object,game);
            result=true;
          }
          LinkedHashMap<UUID,ActivatedAbility> useableAbilities=getUseableActivatedAbilities(object,zone,game);
          if (useableAbilities != null && useableAbilities.size() > 0) {
            activateAbility(useableAbilities,object,game);
            result=true;
          }
        }
      }
      return result;
    }
 else     if (response.getManaType() != null) {
      return false;
    }
    return true;
  }
  return false;
}
