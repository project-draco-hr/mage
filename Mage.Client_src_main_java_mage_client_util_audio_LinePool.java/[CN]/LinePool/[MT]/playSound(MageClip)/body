{
  final SourceDataLine line;
synchronized (LinePool.this) {
    log.debug("Playing {}",mageClip.getFilename());
    logLineStats();
    if (activeLines.size() > 0) {
      line=activeLines.iterator().next();
    }
 else     if (freeLines.size() > 0) {
      line=freeLines.iterator().next();
    }
 else {
      queue.add(mageClip);
      log.debug("Sound {} queued.",mageClip.getFilename());
      return;
    }
    freeLines.remove(line);
    activeLines.remove(line);
    busyLines.add(line);
    logLineStats();
  }
  threadPool.submit(new Runnable(){
    @Override public void run(){
synchronized (LinePool.this) {
        try {
          if (!line.isOpen()) {
            line.open();
            line.addLineListener(new LineListener(){
              @Override public void update(              LineEvent event){
                log.debug("Event: {}",event);
                if (event.getType() != Type.STOP) {
                  return;
                }
synchronized (LinePool.this) {
                  log.debug("Before stop on line {}",line);
                  logLineStats();
                  busyLines.remove(line);
                  if (activeLines.size() < LinePool.this.alwaysActive) {
                    activeLines.add(line);
                  }
 else {
                    freeLines.add(line);
                  }
                  log.debug("After stop on line {}",line);
                  logLineStats();
                  if (queue.size() > 0) {
                    MageClip queuedSound=queue.poll();
                    log.debug("Playing queued sound {}",queuedSound);
                    playSound(queuedSound);
                  }
                }
              }
            }
);
          }
          line.start();
        }
 catch (        LineUnavailableException e) {
          e.printStackTrace();
        }
      }
      byte[] buffer=mageClip.getBuffer();
      log.debug("Before write to line {}",line);
      line.write(buffer,0,buffer.length);
      line.drain();
      line.stop();
      log.debug("Line completed: {}",line);
    }
  }
);
}
