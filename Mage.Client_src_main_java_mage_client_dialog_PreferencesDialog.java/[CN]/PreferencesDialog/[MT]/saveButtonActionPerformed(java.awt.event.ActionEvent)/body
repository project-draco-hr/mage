{
  Preferences prefs=MageFrame.getPreferences();
  save(prefs,dialog.tooltipDelay,KEY_SHOW_TOOLTIPS_DELAY,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.showCardName,KEY_SHOW_CARD_NAMES,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.nonLandPermanentsInOnePile,KEY_PERMANENTS_IN_ONE_PILE,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.showPlayerNamesPermanently,KEY_SHOW_PLAYER_NAMES_PERMANENTLY,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.showAbilityPickerForced,KEY_SHOW_ABILITY_PICKER_FORCED,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbAllowRequestToShowHandCards,KEY_GAME_ALLOW_REQUEST_SHOW_HAND_CARDS,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbShowStormCounter,KEY_GAME_SHOW_STORM_COUNTER,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbConfirmEmptyManaPool,KEY_GAME_CONFIRM_EMPTY_MANA_POOL,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbAskMoveToGraveOrder,KEY_GAME_ASK_MOVE_TO_GRAVE_ORDER,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbGameLogAutoSave,KEY_GAME_LOG_AUTO_SAVE,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbDraftLogAutoSave,KEY_DRAFT_LOG_AUTO_SAVE,"true","false",UPDATE_CACHE_POLICY);
  boolean sizeGUIChanged=false;
  if (getCachedValue(KEY_GUI_TABLE_FONT_SIZE,14) != dialog.sliderFontSize.getValue()) {
    save(prefs,dialog.sliderFontSize,KEY_GUI_TABLE_FONT_SIZE,"true","false",UPDATE_CACHE_POLICY);
    sizeGUIChanged=true;
  }
  if (getCachedValue(KEY_GUI_CHAT_FONT_SIZE,14) != dialog.sliderChatFontSize.getValue()) {
    save(prefs,dialog.sliderChatFontSize,KEY_GUI_CHAT_FONT_SIZE,"true","false",UPDATE_CACHE_POLICY);
    sizeGUIChanged=true;
  }
  if (getCachedValue(KEY_GUI_CARD_HAND_SIZE,14) != dialog.sliderCardSizeHand.getValue()) {
    save(prefs,dialog.sliderCardSizeHand,KEY_GUI_CARD_HAND_SIZE,"true","false",UPDATE_CACHE_POLICY);
    sizeGUIChanged=true;
  }
  if (getCachedValue(KEY_GUI_CARD_EDITOR_SIZE,14) != dialog.sliderEditorCardSize.getValue()) {
    save(prefs,dialog.sliderEditorCardSize,KEY_GUI_CARD_EDITOR_SIZE,"true","false",UPDATE_CACHE_POLICY);
    sizeGUIChanged=true;
  }
  if (getCachedValue(KEY_GUI_CARD_OFFSET_SIZE,14) != dialog.sliderEditorCardOffset.getValue()) {
    save(prefs,dialog.sliderEditorCardOffset,KEY_GUI_CARD_OFFSET_SIZE,"true","false",UPDATE_CACHE_POLICY);
    sizeGUIChanged=true;
  }
  if (getCachedValue(KEY_GUI_ENLARGED_IMAGE_SIZE,20) != dialog.sliderEnlargedImageSize.getValue()) {
    save(prefs,dialog.sliderEnlargedImageSize,KEY_GUI_ENLARGED_IMAGE_SIZE,"true","false",UPDATE_CACHE_POLICY);
    sizeGUIChanged=true;
  }
  if (getCachedValue(KEY_GUI_STACK_WIDTH,30) != dialog.sliderStackWidth.getValue()) {
    save(prefs,dialog.sliderStackWidth,KEY_GUI_STACK_WIDTH,"true","false",UPDATE_CACHE_POLICY);
    sizeGUIChanged=true;
  }
  if (getCachedValue(KEY_GUI_TOOLTIP_SIZE,14) != dialog.sliderTooltipSize.getValue()) {
    save(prefs,dialog.sliderTooltipSize,KEY_GUI_TOOLTIP_SIZE,"true","false",UPDATE_CACHE_POLICY);
    sizeGUIChanged=true;
  }
  if (getCachedValue(KEY_GUI_DIALOG_FONT_SIZE,14) != dialog.sliderDialogFont.getValue()) {
    save(prefs,dialog.sliderDialogFont,KEY_GUI_DIALOG_FONT_SIZE,"true","false",UPDATE_CACHE_POLICY);
    sizeGUIChanged=true;
  }
  if (getCachedValue(KEY_GUI_FEEDBACK_AREA_SIZE,14) != dialog.sliderGameFeedbackArea.getValue()) {
    save(prefs,dialog.sliderGameFeedbackArea,KEY_GUI_FEEDBACK_AREA_SIZE,"true","false",UPDATE_CACHE_POLICY);
    sizeGUIChanged=true;
  }
  if (getCachedValue(KEY_GUI_CARD_OTHER_ZONES_SIZE,14) != dialog.sliderCardSizeOtherZones.getValue()) {
    save(prefs,dialog.sliderCardSizeOtherZones,KEY_GUI_CARD_OTHER_ZONES_SIZE,"true","false",UPDATE_CACHE_POLICY);
    sizeGUIChanged=true;
  }
  if (getCachedValue(KEY_GUI_CARD_BATTLEFIELD_MIN_SIZE,10) != dialog.sliderCardSizeMaxBattlefield.getValue()) {
    save(prefs,dialog.sliderCardSizeMinBattlefield,KEY_GUI_CARD_BATTLEFIELD_MIN_SIZE,"true","false",UPDATE_CACHE_POLICY);
    sizeGUIChanged=true;
  }
  if (getCachedValue(KEY_GUI_CARD_BATTLEFIELD_MAX_SIZE,14) != dialog.sliderCardSizeMaxBattlefield.getValue()) {
    save(prefs,dialog.sliderCardSizeMaxBattlefield,KEY_GUI_CARD_BATTLEFIELD_MAX_SIZE,"true","false",UPDATE_CACHE_POLICY);
    sizeGUIChanged=true;
  }
  if (sizeGUIChanged) {
    GUISizeHelper.changeGUISize();
  }
  save(prefs,dialog.checkBoxUpkeepYou,UPKEEP_YOU);
  save(prefs,dialog.checkBoxDrawYou,DRAW_YOU);
  save(prefs,dialog.checkBoxMainYou,MAIN_YOU);
  save(prefs,dialog.checkBoxBeforeCYou,BEFORE_COMBAT_YOU);
  save(prefs,dialog.checkBoxEndOfCYou,END_OF_COMBAT_YOU);
  save(prefs,dialog.checkBoxMain2You,MAIN_TWO_YOU);
  save(prefs,dialog.checkBoxEndTurnYou,END_OF_TURN_YOU);
  save(prefs,dialog.checkBoxUpkeepOthers,UPKEEP_OTHERS);
  save(prefs,dialog.checkBoxDrawOthers,DRAW_OTHERS);
  save(prefs,dialog.checkBoxMainOthers,MAIN_OTHERS);
  save(prefs,dialog.checkBoxBeforeCOthers,BEFORE_COMBAT_OTHERS);
  save(prefs,dialog.checkBoxEndOfCOthers,END_OF_COMBAT_OTHERS);
  save(prefs,dialog.checkBoxMain2Others,MAIN_TWO_OTHERS);
  save(prefs,dialog.checkBoxEndTurnOthers,END_OF_TURN_OTHERS);
  save(prefs,dialog.cbStopAttack,KEY_STOP_ATTACK,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbStopBlock,KEY_STOP_BLOCK,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbStopOnAllMain,KEY_STOP_ALL_MAIN_PHASES,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbStopOnAllEnd,KEY_STOP_ALL_END_PHASES,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbPassPriorityCast,KEY_PASS_PRIORITY_CAST,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbPassPriorityActivation,KEY_PASS_PRIORITY_ACTIVATION,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbAutoOrderTrigger,KEY_AUTO_ORDER_TRIGGER,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbUseDefaultImageFolder,KEY_CARD_IMAGES_USE_DEFAULT,"true","false",UPDATE_CACHE_POLICY);
  saveImagesPath(prefs);
  save(prefs,dialog.cbCheckForNewImages,KEY_CARD_IMAGES_CHECK,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbSaveToZipFiles,KEY_CARD_IMAGES_SAVE_TO_ZIP,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbNumberOfDownloadThreads,KEY_CARD_IMAGES_THREADS);
  save(prefs,dialog.cbPreferedImageLanguage,KEY_CARD_IMAGES_PREF_LANGUAGE);
  save(prefs,dialog.cbUseDefaultBackground,KEY_BACKGROUND_IMAGE_DEFAULT,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbUseDefaultBattleImage,KEY_BATTLEFIELD_IMAGE_DEFAULT,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbUseRandomBattleImage,KEY_BATTLEFIELD_IMAGE_RANDOM,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbCardRenderImageFallback,KEY_CARD_RENDERING_FALLBACK,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbCardRenderHideSetSymbol,KEY_CARD_RENDERING_SET_SYMBOL,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbCardRenderShowReminderText,KEY_CARD_RENDERING_REMINDER_TEXT,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbEnableGameSounds,KEY_SOUNDS_GAME_ON,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbEnableDraftSounds,KEY_SOUNDS_DRAFT_ON,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbEnableSkipButtonsSounds,KEY_SOUNDS_SKIP_BUTTONS_ON,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbEnableOtherSounds,KEY_SOUNDS_OTHER_ON,"true","false",UPDATE_CACHE_POLICY);
  save(prefs,dialog.cbEnableBattlefieldBGM,KEY_SOUNDS_MATCH_MUSIC_ON,"true","false",UPDATE_CACHE_POLICY);
  saveSoundPath(prefs);
  save(prefs,dialog.cbProxyType,KEY_PROXY_TYPE);
  save(prefs,dialog.txtProxyServer,KEY_PROXY_ADDRESS);
  save(prefs,dialog.txtProxyPort,KEY_PROXY_PORT);
  save(prefs,dialog.txtProxyUserName,KEY_PROXY_USERNAME);
  save(prefs,dialog.rememberPswd,KEY_PROXY_REMEMBER,"true","false",UPDATE_CACHE_POLICY);
  if (dialog.rememberPswd.isSelected()) {
    char[] input=txtPasswordField.getPassword();
    prefs.put(KEY_PROXY_PSWD,new String(input));
  }
  save(prefs,dialog.txtURLServerList,KEY_CONNECTION_URL_SERVER_LIST);
  save(prefs,dialog.keyCancelSkip,KEY_CONTROL_CANCEL_SKIP);
  save(prefs,dialog.keyNextTurn,KEY_CONTROL_NEXT_TURN);
  save(prefs,dialog.keyEndStep,KEY_CONTROL_END_STEP);
  save(prefs,dialog.keyMainStep,KEY_CONTROL_MAIN_STEP);
  save(prefs,dialog.keyYourTurn,KEY_CONTROL_YOUR_TURN);
  save(prefs,dialog.keySkipStack,KEY_CONTROL_SKIP_STACK);
  save(prefs,dialog.keyPriorEnd,KEY_CONTROL_PRIOR_END);
  if (selectedAvatarId < MIN_AVATAR_ID || selectedAvatarId > MAX_AVATAR_ID) {
    selectedAvatarId=DEFAULT_AVATAR_ID;
  }
  prefs.put(KEY_AVATAR,String.valueOf(selectedAvatarId));
  updateCache(KEY_AVATAR,String.valueOf(selectedAvatarId));
  try {
    SessionHandler.updatePreferencesForServer(getUserData());
    prefs.flush();
  }
 catch (  BackingStoreException ex) {
    logger.error("Error: couldn't save preferences",ex);
    UserRequestMessage message=new UserRequestMessage("Error","Error: couldn't save preferences. Please try once again.");
    message.setButton1("OK",null);
    MageFrame.getInstance().showUserRequestDialog(message);
  }
  dialog.setVisible(false);
}
