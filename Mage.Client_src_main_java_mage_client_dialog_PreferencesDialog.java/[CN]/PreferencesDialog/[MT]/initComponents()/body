{
  java.awt.GridBagConstraints gridBagConstraints;
  tabsPanel=new javax.swing.JTabbedPane();
  tabMain=new javax.swing.JPanel();
  main_card=new javax.swing.JPanel();
  showCardName=new javax.swing.JCheckBox();
  tooltipDelayLabel=new javax.swing.JLabel();
  tooltipDelay=new javax.swing.JSlider();
  main_game=new javax.swing.JPanel();
  nonLandPermanentsInOnePile=new javax.swing.JCheckBox();
  showPlayerNamesPermanently=new javax.swing.JCheckBox();
  showAbilityPickerForced=new javax.swing.JCheckBox();
  cbAllowRequestToShowHandCards=new javax.swing.JCheckBox();
  cbShowStormCounter=new javax.swing.JCheckBox();
  cbConfirmEmptyManaPool=new javax.swing.JCheckBox();
  cbAskMoveToGraveOrder=new javax.swing.JCheckBox();
  main_gamelog=new javax.swing.JPanel();
  cbGameLogAutoSave=new javax.swing.JCheckBox();
  cbDraftLogAutoSave=new javax.swing.JCheckBox();
  tabGuiSize=new javax.swing.JPanel();
  guiSizeBasic=new javax.swing.JPanel();
  sliderFontSize=new javax.swing.JSlider();
  fontSizeLabel=new javax.swing.JLabel();
  sliderChatFontSize=new javax.swing.JSlider();
  chatFontSizeLabel=new javax.swing.JLabel();
  sliderDialogFont=new javax.swing.JSlider();
  labelDialogFont=new javax.swing.JLabel();
  sliderEditorCardSize=new javax.swing.JSlider();
  labelEditorCardSize=new javax.swing.JLabel();
  sliderEditorCardOffset=new javax.swing.JSlider();
  labelEditorCardOffset=new javax.swing.JLabel();
  sliderEnlargedImageSize=new javax.swing.JSlider();
  labelEnlargedImageSize=new javax.swing.JLabel();
  guiSizeGame=new javax.swing.JPanel();
  sliderCardSizeHand=new javax.swing.JSlider();
  labelCardSizeHand=new javax.swing.JLabel();
  sliderCardSizeOtherZones=new javax.swing.JSlider();
  labelCardSizeOtherZones=new javax.swing.JLabel();
  sliderCardSizeMinBattlefield=new javax.swing.JSlider();
  labelCardSizeMinBattlefield=new javax.swing.JLabel();
  sliderCardSizeMaxBattlefield=new javax.swing.JSlider();
  labelCardSizeMaxBattlefield=new javax.swing.JLabel();
  sliderStackWidth=new javax.swing.JSlider();
  labelStackWidth=new javax.swing.JLabel();
  sliderGameFeedbackArea=new javax.swing.JSlider();
  labelGameFeedback=new javax.swing.JLabel();
  sliderTooltipSize=new javax.swing.JSlider();
  labelTooltipSize=new javax.swing.JLabel();
  tabPhases=new javax.swing.JPanel();
  jLabelHeadLine=new javax.swing.JLabel();
  jLabelYourTurn=new javax.swing.JLabel();
  jLabelOpponentsTurn=new javax.swing.JLabel();
  jLabelUpkeep=new javax.swing.JLabel();
  checkBoxUpkeepYou=new javax.swing.JCheckBox();
  checkBoxUpkeepOthers=new javax.swing.JCheckBox();
  jLabelDraw=new javax.swing.JLabel();
  checkBoxDrawYou=new javax.swing.JCheckBox();
  checkBoxDrawOthers=new javax.swing.JCheckBox();
  jLabelMain1=new javax.swing.JLabel();
  checkBoxMainYou=new javax.swing.JCheckBox();
  checkBoxMainOthers=new javax.swing.JCheckBox();
  jLabelBeforeCombat=new javax.swing.JLabel();
  checkBoxBeforeCYou=new javax.swing.JCheckBox();
  checkBoxBeforeCOthers=new javax.swing.JCheckBox();
  jLabelEndofCombat=new javax.swing.JLabel();
  checkBoxEndOfCYou=new javax.swing.JCheckBox();
  checkBoxEndOfCOthers=new javax.swing.JCheckBox();
  jLabelMain2=new javax.swing.JLabel();
  checkBoxMain2You=new javax.swing.JCheckBox();
  checkBoxMain2Others=new javax.swing.JCheckBox();
  jLabelEndOfTurn=new javax.swing.JLabel();
  checkBoxEndTurnYou=new javax.swing.JCheckBox();
  checkBoxEndTurnOthers=new javax.swing.JCheckBox();
  phases_stopSettings=new javax.swing.JPanel();
  cbStopAttack=new javax.swing.JCheckBox();
  cbStopBlock=new javax.swing.JCheckBox();
  cbStopOnAllMain=new javax.swing.JCheckBox();
  cbStopOnAllEnd=new javax.swing.JCheckBox();
  cbPassPriorityCast=new javax.swing.JCheckBox();
  cbPassPriorityActivation=new javax.swing.JCheckBox();
  cbAutoOrderTrigger=new javax.swing.JCheckBox();
  tabImages=new javax.swing.JPanel();
  panelCardImages=new javax.swing.JPanel();
  cbUseDefaultImageFolder=new javax.swing.JCheckBox();
  txtImageFolderPath=new javax.swing.JTextField();
  btnBrowseImageLocation=new javax.swing.JButton();
  cbCheckForNewImages=new javax.swing.JCheckBox();
  cbSaveToZipFiles=new javax.swing.JCheckBox();
  cbPreferedImageLanguage=new javax.swing.JComboBox<>();
  labelPreferedImageLanguage=new javax.swing.JLabel();
  labelNumberOfDownloadThreads=new javax.swing.JLabel();
  cbNumberOfDownloadThreads=new javax.swing.JComboBox();
  panelBackgroundImages=new javax.swing.JPanel();
  cbUseDefaultBackground=new javax.swing.JCheckBox();
  txtBackgroundImagePath=new javax.swing.JTextField();
  btnBrowseBackgroundImage=new javax.swing.JButton();
  txtBattlefieldImagePath=new javax.swing.JTextField();
  btnBrowseBattlefieldImage=new javax.swing.JButton();
  cbUseDefaultBattleImage=new javax.swing.JCheckBox();
  cbUseRandomBattleImage=new javax.swing.JCheckBox();
  jLabel14=new javax.swing.JLabel();
  jLabel15=new javax.swing.JLabel();
  jPanel1=new javax.swing.JPanel();
  cbCardRenderImageFallback=new javax.swing.JCheckBox();
  cbCardRenderShowReminderText=new javax.swing.JCheckBox();
  cbCardRenderHideSetSymbol=new javax.swing.JCheckBox();
  tabSounds=new javax.swing.JPanel();
  sounds_clips=new javax.swing.JPanel();
  cbEnableGameSounds=new javax.swing.JCheckBox();
  cbEnableDraftSounds=new javax.swing.JCheckBox();
  cbEnableSkipButtonsSounds=new javax.swing.JCheckBox();
  cbEnableOtherSounds=new javax.swing.JCheckBox();
  sounds_backgroundMusic=new javax.swing.JPanel();
  cbEnableBattlefieldBGM=new javax.swing.JCheckBox();
  jLabel16=new javax.swing.JLabel();
  txtBattlefieldIBGMPath=new javax.swing.JTextField();
  btnBattlefieldBGMBrowse=new javax.swing.JButton();
  tabAvatars=new javax.swing.JPanel();
  avatarPane=new javax.swing.JScrollPane();
  avatarPanel=new javax.swing.JPanel();
  jPanel10=new javax.swing.JPanel();
  jPanel11=new javax.swing.JPanel();
  jPanel12=new javax.swing.JPanel();
  jPanel13=new javax.swing.JPanel();
  jPanel14=new javax.swing.JPanel();
  jPanel15=new javax.swing.JPanel();
  jPanel16=new javax.swing.JPanel();
  jPanel17=new javax.swing.JPanel();
  jPanel18=new javax.swing.JPanel();
  jPanel19=new javax.swing.JPanel();
  jPanel20=new javax.swing.JPanel();
  jPanel21=new javax.swing.JPanel();
  jPanel22=new javax.swing.JPanel();
  jPanel23=new javax.swing.JPanel();
  jPanel24=new javax.swing.JPanel();
  jPanel25=new javax.swing.JPanel();
  jPanel26=new javax.swing.JPanel();
  jPanel27=new javax.swing.JPanel();
  jPanel28=new javax.swing.JPanel();
  jPanel29=new javax.swing.JPanel();
  jPanel30=new javax.swing.JPanel();
  jPanel31=new javax.swing.JPanel();
  jPanel32=new javax.swing.JPanel();
  jPanel33=new javax.swing.JPanel();
  tabConnection=new javax.swing.JPanel();
  connection_servers=new javax.swing.JPanel();
  lblURLServerList=new javax.swing.JLabel();
  txtURLServerList=new javax.swing.JTextField();
  jLabel17=new javax.swing.JLabel();
  lblProxyType=new javax.swing.JLabel();
  cbProxyType=new javax.swing.JComboBox<>();
  pnlProxySettings=new javax.swing.JPanel();
  pnlProxy=new javax.swing.JPanel();
  lblProxyServer=new javax.swing.JLabel();
  txtProxyServer=new javax.swing.JTextField();
  lblProxyPort=new javax.swing.JLabel();
  txtProxyPort=new javax.swing.JTextField();
  lblProxyUserName=new javax.swing.JLabel();
  txtProxyUserName=new javax.swing.JTextField();
  lblProxyPassword=new javax.swing.JLabel();
  txtPasswordField=new javax.swing.JPasswordField();
  rememberPswd=new javax.swing.JCheckBox();
  jLabel11=new javax.swing.JLabel();
  tabControls=new javax.swing.JPanel();
  labelNextTurn=new javax.swing.JLabel();
  labelEndStep=new javax.swing.JLabel();
  labelMainStep=new javax.swing.JLabel();
  labelYourTurn=new javax.swing.JLabel();
  lebelSkip=new javax.swing.JLabel();
  labelPriorEnd=new javax.swing.JLabel();
  labelCancel=new javax.swing.JLabel();
  keyCancelSkip=new KeyBindButton(this,KEY_CONTROL_CANCEL_SKIP);
  keyNextTurn=new KeyBindButton(this,KEY_CONTROL_NEXT_TURN);
  keyMainStep=new KeyBindButton(this,KEY_CONTROL_MAIN_STEP);
  keyEndStep=new KeyBindButton(this,KEY_CONTROL_END_STEP);
  keyYourTurn=new KeyBindButton(this,KEY_CONTROL_YOUR_TURN);
  keySkipStack=new KeyBindButton(this,KEY_CONTROL_SKIP_STACK);
  keyPriorEnd=new KeyBindButton(this,KEY_CONTROL_PRIOR_END);
  keySkipStep=new KeyBindButton(this,KEY_CONTROL_SKIP_STEP);
  labelSkipStep=new javax.swing.JLabel();
  keyConfirm=new KeyBindButton(this,KEY_CONTROL_CONFIRM);
  labelConfirm=new javax.swing.JLabel();
  controlsDescriptionLabel=new javax.swing.JLabel();
  bttnResetControls=new javax.swing.JButton();
  saveButton=new javax.swing.JButton();
  exitButton=new javax.swing.JButton();
  setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
  setTitle("Preferences");
  tabsPanel.setMinimumSize(new java.awt.Dimension(532,451));
  main_card.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Card"));
  showCardName.setSelected(true);
  showCardName.setText("Show card name on card panel");
  showCardName.setToolTipText("Write the card's name on the card to make the card name more recognizable.");
  showCardName.setActionCommand("");
  showCardName.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
  showCardName.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      showCardNameActionPerformed(evt);
    }
  }
);
  tooltipDelayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  tooltipDelayLabel.setText("Delay in milliseconds for showing the card tooltip text");
  tooltipDelayLabel.setToolTipText("<HTML>The time the appearance of the tooltip window for a card is delayed.<br>\nIf set to zero, the tooltip window won't be shown at all.");
  tooltipDelay.setMajorTickSpacing(1000);
  tooltipDelay.setMaximum(5000);
  tooltipDelay.setMinorTickSpacing(100);
  tooltipDelay.setPaintLabels(true);
  tooltipDelay.setPaintTicks(true);
  tooltipDelay.setSnapToTicks(true);
  tooltipDelay.setToolTipText("<HTML>The time the appearance of the tooltip window for a card is delayed.<br>\nIf set to zero, the tooltip window won't be shown at all.");
  tooltipDelay.setValue(300);
  org.jdesktop.layout.GroupLayout main_cardLayout=new org.jdesktop.layout.GroupLayout(main_card);
  main_card.setLayout(main_cardLayout);
  main_cardLayout.setHorizontalGroup(main_cardLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(main_cardLayout.createSequentialGroup().add(6,6,6).add(main_cardLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING,false).add(tooltipDelayLabel,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,308,Short.MAX_VALUE).add(org.jdesktop.layout.GroupLayout.LEADING,showCardName).add(tooltipDelay,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  main_cardLayout.setVerticalGroup(main_cardLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(main_cardLayout.createSequentialGroup().add(showCardName).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(tooltipDelayLabel).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(tooltipDelay,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  main_game.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Game"));
  nonLandPermanentsInOnePile.setSelected(true);
  nonLandPermanentsInOnePile.setText("Put non-land permanents in same row as creatures");
  nonLandPermanentsInOnePile.setToolTipText("<html>If activated, all non land permanents are shown in one row.<br>\nFirst creatures than other permanents. If not activated, creatures are<br>\nshown in a separate row.");
  nonLandPermanentsInOnePile.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      nonLandPermanentsInOnePileActionPerformed(evt);
    }
  }
);
  showPlayerNamesPermanently.setSelected(true);
  showPlayerNamesPermanently.setText("Show player names on avatar permanently");
  showPlayerNamesPermanently.setToolTipText("Instead showing the names only if you hover over the avatar with the mouse, the name is shown all the time.");
  showPlayerNamesPermanently.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
  showPlayerNamesPermanently.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      showPlayerNamesPermanentlyActionPerformed(evt);
    }
  }
);
  showAbilityPickerForced.setSelected(true);
  showAbilityPickerForced.setText("Show ability picker for abilities or spells without costs");
  showAbilityPickerForced.setToolTipText("This prevents you from accidently activating abilities without other costs than tapping or casting spells with 0 mana costs.");
  showAbilityPickerForced.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
  showAbilityPickerForced.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      showAbilityPickerForcedActionPerformed(evt);
    }
  }
);
  cbAllowRequestToShowHandCards.setSelected(true);
  cbAllowRequestToShowHandCards.setText("Allow requests from players and spectators to show your hand cards");
  cbAllowRequestToShowHandCards.setToolTipText("<html>This is the default setting used for your matches. If activated other players or spectators<br>\nof your match can send a request so you can allow them to see your hand cards.");
  cbAllowRequestToShowHandCards.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
  cbAllowRequestToShowHandCards.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbAllowRequestToShowHandCardsActionPerformed(evt);
    }
  }
);
  cbShowStormCounter.setSelected(true);
  cbShowStormCounter.setText("Show the number of spell casts during the current turn");
  cbShowStormCounter.setToolTipText("<html>Adds a little box left to the short keys line with the number<br>\nof spells already cast during the current turn (storm counter).");
  cbShowStormCounter.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
  cbShowStormCounter.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbShowStormCounterActionPerformed(evt);
    }
  }
);
  cbConfirmEmptyManaPool.setSelected(true);
  cbConfirmEmptyManaPool.setText("Confirm if you want to pass a phase/step but there is still mana in your mana pool");
  cbConfirmEmptyManaPool.setToolTipText("<html>If activated you get a confirm message if you pass priority while stack is empty<br>\n and you still have mana in your mana pool.");
  cbConfirmEmptyManaPool.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
  cbConfirmEmptyManaPool.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbConfirmEmptyManaPoolActionPerformed(evt);
    }
  }
);
  cbAskMoveToGraveOrder.setSelected(true);
  cbAskMoveToGraveOrder.setText("Ask player for setting order cards go to graveyard");
  cbAskMoveToGraveOrder.setToolTipText("<html>If activated and multiple cards go to the graveyard at the same time<br>\nthe player is asked to set the order of the cards.");
  cbAskMoveToGraveOrder.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
  cbAskMoveToGraveOrder.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbAskMoveToGraveOrderActionPerformed(evt);
    }
  }
);
  org.jdesktop.layout.GroupLayout main_gameLayout=new org.jdesktop.layout.GroupLayout(main_game);
  main_game.setLayout(main_gameLayout);
  main_gameLayout.setHorizontalGroup(main_gameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(main_gameLayout.createSequentialGroup().addContainerGap().add(main_gameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING,false).add(showPlayerNamesPermanently,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(nonLandPermanentsInOnePile,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(showAbilityPickerForced).add(cbConfirmEmptyManaPool,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(cbAllowRequestToShowHandCards,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(cbShowStormCounter,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(cbAskMoveToGraveOrder,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  main_gameLayout.setVerticalGroup(main_gameLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(main_gameLayout.createSequentialGroup().add(nonLandPermanentsInOnePile).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(showPlayerNamesPermanently).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(showAbilityPickerForced).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(cbAllowRequestToShowHandCards).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(cbShowStormCounter).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(cbConfirmEmptyManaPool).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(cbAskMoveToGraveOrder).addContainerGap()));
  nonLandPermanentsInOnePile.getAccessibleContext().setAccessibleName("nonLandPermanentsInOnePile");
  main_gamelog.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Game log"));
  cbGameLogAutoSave.setSelected(true);
  cbGameLogAutoSave.setText("Auto save game logs     (to \"../Mage.Client/gamelogs/\" directory)");
  cbGameLogAutoSave.setToolTipText("The logs of all your games will be saved to the mentioned folder if this option is switched on.");
  cbGameLogAutoSave.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbGameLogAutoSaveActionPerformed(evt);
    }
  }
);
  cbDraftLogAutoSave.setSelected(true);
  cbDraftLogAutoSave.setText("Auto save draft logs     (to \"../Mage.Client/gamelogs/\" directory)");
  cbDraftLogAutoSave.setToolTipText("The logs of all your games will be saved to the mentioned folder if this option is switched on.");
  cbDraftLogAutoSave.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbDraftLogAutoSaveActionPerformed(evt);
    }
  }
);
  org.jdesktop.layout.GroupLayout main_gamelogLayout=new org.jdesktop.layout.GroupLayout(main_gamelog);
  main_gamelog.setLayout(main_gamelogLayout);
  main_gamelogLayout.setHorizontalGroup(main_gamelogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(main_gamelogLayout.createSequentialGroup().addContainerGap().add(main_gamelogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING,false).add(cbDraftLogAutoSave,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(cbGameLogAutoSave,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  main_gamelogLayout.setVerticalGroup(main_gamelogLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(main_gamelogLayout.createSequentialGroup().add(cbGameLogAutoSave).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(cbDraftLogAutoSave)));
  org.jdesktop.layout.GroupLayout tabMainLayout=new org.jdesktop.layout.GroupLayout(tabMain);
  tabMain.setLayout(tabMainLayout);
  tabMainLayout.setHorizontalGroup(tabMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabMainLayout.createSequentialGroup().addContainerGap().add(tabMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING,main_card,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(org.jdesktop.layout.GroupLayout.TRAILING,main_gamelog,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(main_game,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addContainerGap()));
  tabMainLayout.setVerticalGroup(tabMainLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabMainLayout.createSequentialGroup().addContainerGap().add(main_card,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(main_game,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(main_gamelog,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  main_card.getAccessibleContext().setAccessibleName("Game panel");
  tabsPanel.addTab("Main",tabMain);
  tabGuiSize.setMaximumSize(new java.awt.Dimension(527,423));
  tabGuiSize.setMinimumSize(new java.awt.Dimension(527,423));
  java.awt.GridBagLayout tabGuiSizeLayout=new java.awt.GridBagLayout();
  tabGuiSizeLayout.columnWidths=new int[]{0};
  tabGuiSizeLayout.rowHeights=new int[]{0,20,0};
  tabGuiSizeLayout.columnWeights=new double[]{1.0};
  tabGuiSizeLayout.rowWeights=new double[]{1.0,0.0,1.0};
  tabGuiSize.setLayout(tabGuiSizeLayout);
  guiSizeBasic.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Size basic elements"));
  guiSizeBasic.setMinimumSize(new java.awt.Dimension(600,180));
  guiSizeBasic.setPreferredSize(new java.awt.Dimension(600,180));
  java.awt.GridBagLayout guiSizeBasicLayout=new java.awt.GridBagLayout();
  guiSizeBasicLayout.columnWeights=new double[]{1.0,1.0,1.0};
  guiSizeBasicLayout.rowWeights=new double[]{1.0,0.2,1.0,0.2};
  guiSizeBasic.setLayout(guiSizeBasicLayout);
  sliderFontSize.setMajorTickSpacing(5);
  sliderFontSize.setMaximum(50);
  sliderFontSize.setMinimum(10);
  sliderFontSize.setMinorTickSpacing(1);
  sliderFontSize.setPaintLabels(true);
  sliderFontSize.setPaintTicks(true);
  sliderFontSize.setSnapToTicks(true);
  sliderFontSize.setToolTipText("<HTML>The size of the font used to display table text.");
  sliderFontSize.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  sliderFontSize.setMinimumSize(new java.awt.Dimension(150,40));
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=0;
  gridBagConstraints.gridy=0;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  gridBagConstraints.insets=new java.awt.Insets(2,2,2,2);
  guiSizeBasic.add(sliderFontSize,gridBagConstraints);
  fontSizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  fontSizeLabel.setText("Tables");
  fontSizeLabel.setToolTipText("<HTML>The size of the font used to display table text.");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=0;
  gridBagConstraints.gridy=1;
  gridBagConstraints.ipadx=3;
  gridBagConstraints.ipady=3;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  guiSizeBasic.add(fontSizeLabel,gridBagConstraints);
  sliderChatFontSize.setMajorTickSpacing(5);
  sliderChatFontSize.setMaximum(50);
  sliderChatFontSize.setMinimum(10);
  sliderChatFontSize.setMinorTickSpacing(1);
  sliderChatFontSize.setPaintLabels(true);
  sliderChatFontSize.setPaintTicks(true);
  sliderChatFontSize.setSnapToTicks(true);
  sliderChatFontSize.setToolTipText("<HTML>The size of the font used to display the chat text");
  sliderChatFontSize.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  sliderChatFontSize.setMinimumSize(new java.awt.Dimension(150,40));
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=2;
  gridBagConstraints.gridy=0;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  gridBagConstraints.insets=new java.awt.Insets(2,2,2,2);
  guiSizeBasic.add(sliderChatFontSize,gridBagConstraints);
  chatFontSizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  chatFontSizeLabel.setText("Chat");
  chatFontSizeLabel.setToolTipText("<HTML>The size of the font used to display the chat text");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=2;
  gridBagConstraints.gridy=1;
  gridBagConstraints.ipadx=3;
  gridBagConstraints.ipady=3;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  guiSizeBasic.add(chatFontSizeLabel,gridBagConstraints);
  sliderDialogFont.setMajorTickSpacing(5);
  sliderDialogFont.setMaximum(50);
  sliderDialogFont.setMinimum(10);
  sliderDialogFont.setMinorTickSpacing(1);
  sliderDialogFont.setPaintLabels(true);
  sliderDialogFont.setPaintTicks(true);
  sliderDialogFont.setSnapToTicks(true);
  sliderDialogFont.setToolTipText("<HTML>The size of the font of messages and menues");
  sliderDialogFont.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  sliderDialogFont.setMinimumSize(new java.awt.Dimension(150,40));
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=1;
  gridBagConstraints.gridy=0;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  gridBagConstraints.insets=new java.awt.Insets(2,2,2,2);
  guiSizeBasic.add(sliderDialogFont,gridBagConstraints);
  labelDialogFont.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  labelDialogFont.setText("Messages and menues");
  labelDialogFont.setToolTipText("<HTML>The size of the font of messages and menues");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=1;
  gridBagConstraints.gridy=1;
  gridBagConstraints.ipadx=3;
  gridBagConstraints.ipady=3;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  guiSizeBasic.add(labelDialogFont,gridBagConstraints);
  labelDialogFont.getAccessibleContext().setAccessibleDescription("<HTML>The size of the font used to display messages or menus.");
  sliderEditorCardSize.setMajorTickSpacing(5);
  sliderEditorCardSize.setMaximum(50);
  sliderEditorCardSize.setMinimum(10);
  sliderEditorCardSize.setMinorTickSpacing(1);
  sliderEditorCardSize.setPaintLabels(true);
  sliderEditorCardSize.setPaintTicks(true);
  sliderEditorCardSize.setSnapToTicks(true);
  sliderEditorCardSize.setToolTipText("<HTML>The size of the card in editor and the picked zone of the draft panel");
  sliderEditorCardSize.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  sliderEditorCardSize.setMinimumSize(new java.awt.Dimension(150,40));
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=0;
  gridBagConstraints.gridy=2;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  gridBagConstraints.insets=new java.awt.Insets(2,2,2,2);
  guiSizeBasic.add(sliderEditorCardSize,gridBagConstraints);
  labelEditorCardSize.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  labelEditorCardSize.setText("Cards in editor and draft panel");
  labelEditorCardSize.setToolTipText("<HTML>The size of the card in editor and the picked zone of the draft panel\n");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=0;
  gridBagConstraints.gridy=3;
  gridBagConstraints.ipadx=3;
  gridBagConstraints.ipady=3;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  guiSizeBasic.add(labelEditorCardSize,gridBagConstraints);
  sliderEditorCardOffset.setMajorTickSpacing(5);
  sliderEditorCardOffset.setMaximum(50);
  sliderEditorCardOffset.setMinimum(10);
  sliderEditorCardOffset.setMinorTickSpacing(1);
  sliderEditorCardOffset.setPaintLabels(true);
  sliderEditorCardOffset.setPaintTicks(true);
  sliderEditorCardOffset.setSnapToTicks(true);
  sliderEditorCardOffset.setToolTipText("<HTML>The size of the card in editor and the picked zone of the draft panel");
  sliderEditorCardOffset.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  sliderEditorCardOffset.setMinimumSize(new java.awt.Dimension(150,40));
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=1;
  gridBagConstraints.gridy=2;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  gridBagConstraints.insets=new java.awt.Insets(2,2,2,2);
  guiSizeBasic.add(sliderEditorCardOffset,gridBagConstraints);
  labelEditorCardOffset.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  labelEditorCardOffset.setText("Card offset editor and draft");
  labelEditorCardOffset.setToolTipText("<HTML>The vertical offset of card images in editor areas\n");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=1;
  gridBagConstraints.gridy=3;
  gridBagConstraints.ipadx=3;
  gridBagConstraints.ipady=3;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  guiSizeBasic.add(labelEditorCardOffset,gridBagConstraints);
  sliderEnlargedImageSize.setMajorTickSpacing(5);
  sliderEnlargedImageSize.setMaximum(50);
  sliderEnlargedImageSize.setMinimum(10);
  sliderEnlargedImageSize.setMinorTickSpacing(1);
  sliderEnlargedImageSize.setPaintLabels(true);
  sliderEnlargedImageSize.setPaintTicks(true);
  sliderEnlargedImageSize.setSnapToTicks(true);
  sliderEnlargedImageSize.setToolTipText("<HTML>The size of the image shown for the card your mouse pointer<br>is located over while you turn the mouse wheel ");
  sliderEnlargedImageSize.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  sliderEnlargedImageSize.setMinimumSize(new java.awt.Dimension(150,40));
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=2;
  gridBagConstraints.gridy=2;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  gridBagConstraints.insets=new java.awt.Insets(2,2,2,2);
  guiSizeBasic.add(sliderEnlargedImageSize,gridBagConstraints);
  labelEnlargedImageSize.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  labelEnlargedImageSize.setText("Enlarged image (mouse wheel)");
  labelEnlargedImageSize.setToolTipText("<HTML>The size of the image shown for the card your mouse pointer<br>is located over while you turn the mouse wheel\n");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=2;
  gridBagConstraints.gridy=3;
  gridBagConstraints.ipadx=3;
  gridBagConstraints.ipady=3;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  guiSizeBasic.add(labelEnlargedImageSize,gridBagConstraints);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=0;
  gridBagConstraints.gridy=0;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  tabGuiSize.add(guiSizeBasic,gridBagConstraints);
  guiSizeGame.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Size game elements"));
  guiSizeGame.setMinimumSize(new java.awt.Dimension(600,180));
  guiSizeGame.setPreferredSize(new java.awt.Dimension(600,180));
  java.awt.GridBagLayout guiSizeGameLayout=new java.awt.GridBagLayout();
  guiSizeGameLayout.columnWeights=new double[]{1.0,1.0,1.0,1.0};
  guiSizeGameLayout.rowWeights=new double[]{1.0,0.2,1.0,0.2};
  guiSizeGame.setLayout(guiSizeGameLayout);
  sliderCardSizeHand.setMajorTickSpacing(5);
  sliderCardSizeHand.setMaximum(50);
  sliderCardSizeHand.setMinimum(10);
  sliderCardSizeHand.setMinorTickSpacing(1);
  sliderCardSizeHand.setPaintLabels(true);
  sliderCardSizeHand.setPaintTicks(true);
  sliderCardSizeHand.setSnapToTicks(true);
  sliderCardSizeHand.setToolTipText("<HTML>The size of the card images in hand and on the stack");
  sliderCardSizeHand.setValue(14);
  sliderCardSizeHand.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  sliderCardSizeHand.setMinimumSize(new java.awt.Dimension(150,40));
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=0;
  gridBagConstraints.gridy=0;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  gridBagConstraints.insets=new java.awt.Insets(2,2,2,2);
  guiSizeGame.add(sliderCardSizeHand,gridBagConstraints);
  labelCardSizeHand.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  labelCardSizeHand.setText("Hand cards and stack objects");
  labelCardSizeHand.setToolTipText("<HTML>The size of the card images in hand and on the stack");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=0;
  gridBagConstraints.gridy=1;
  gridBagConstraints.ipadx=3;
  gridBagConstraints.ipady=3;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  guiSizeGame.add(labelCardSizeHand,gridBagConstraints);
  sliderCardSizeOtherZones.setMajorTickSpacing(5);
  sliderCardSizeOtherZones.setMaximum(50);
  sliderCardSizeOtherZones.setMinimum(10);
  sliderCardSizeOtherZones.setMinorTickSpacing(1);
  sliderCardSizeOtherZones.setPaintLabels(true);
  sliderCardSizeOtherZones.setPaintTicks(true);
  sliderCardSizeOtherZones.setSnapToTicks(true);
  sliderCardSizeOtherZones.setToolTipText("<HTML>The size of card in other game zone (e.g. graveyard, revealed cards etc.)");
  sliderCardSizeOtherZones.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  sliderCardSizeOtherZones.setMinimumSize(new java.awt.Dimension(150,40));
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=1;
  gridBagConstraints.gridy=0;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  gridBagConstraints.insets=new java.awt.Insets(2,2,2,2);
  guiSizeGame.add(sliderCardSizeOtherZones,gridBagConstraints);
  labelCardSizeOtherZones.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  labelCardSizeOtherZones.setText("Cards other zones");
  labelCardSizeOtherZones.setToolTipText("<HTML>The size of card in other game zone (e.g. graveyard, revealed cards etc.)");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=1;
  gridBagConstraints.gridy=1;
  gridBagConstraints.ipadx=3;
  gridBagConstraints.ipady=3;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  guiSizeGame.add(labelCardSizeOtherZones,gridBagConstraints);
  sliderCardSizeMinBattlefield.setMajorTickSpacing(5);
  sliderCardSizeMinBattlefield.setMaximum(50);
  sliderCardSizeMinBattlefield.setMinimum(10);
  sliderCardSizeMinBattlefield.setMinorTickSpacing(1);
  sliderCardSizeMinBattlefield.setPaintLabels(true);
  sliderCardSizeMinBattlefield.setPaintTicks(true);
  sliderCardSizeMinBattlefield.setSnapToTicks(true);
  sliderCardSizeMinBattlefield.setToolTipText("<HTML>The maximum size of permanents on the battlefield");
  sliderCardSizeMinBattlefield.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  sliderCardSizeMinBattlefield.setMinimumSize(new java.awt.Dimension(150,40));
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=2;
  gridBagConstraints.gridy=0;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  gridBagConstraints.insets=new java.awt.Insets(2,2,2,2);
  guiSizeGame.add(sliderCardSizeMinBattlefield,gridBagConstraints);
  labelCardSizeMinBattlefield.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  labelCardSizeMinBattlefield.setText("Permanents min size");
  labelCardSizeMinBattlefield.setToolTipText("<HTML>The minimum size of permanents on the battlefield");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=2;
  gridBagConstraints.gridy=1;
  gridBagConstraints.ipadx=3;
  gridBagConstraints.ipady=3;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  guiSizeGame.add(labelCardSizeMinBattlefield,gridBagConstraints);
  sliderCardSizeMaxBattlefield.setMajorTickSpacing(5);
  sliderCardSizeMaxBattlefield.setMaximum(50);
  sliderCardSizeMaxBattlefield.setMinimum(10);
  sliderCardSizeMaxBattlefield.setMinorTickSpacing(1);
  sliderCardSizeMaxBattlefield.setPaintLabels(true);
  sliderCardSizeMaxBattlefield.setPaintTicks(true);
  sliderCardSizeMaxBattlefield.setSnapToTicks(true);
  sliderCardSizeMaxBattlefield.setToolTipText("<HTML>The maximum size of permanents on the battlefield");
  sliderCardSizeMaxBattlefield.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  sliderCardSizeMaxBattlefield.setMinimumSize(new java.awt.Dimension(150,40));
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=3;
  gridBagConstraints.gridy=0;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  gridBagConstraints.insets=new java.awt.Insets(2,2,2,2);
  guiSizeGame.add(sliderCardSizeMaxBattlefield,gridBagConstraints);
  labelCardSizeMaxBattlefield.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  labelCardSizeMaxBattlefield.setText("Permanents max size");
  labelCardSizeMaxBattlefield.setToolTipText("<HTML>The maximum size of permanents on the battlefield");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=3;
  gridBagConstraints.gridy=1;
  gridBagConstraints.ipadx=3;
  gridBagConstraints.ipady=3;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  guiSizeGame.add(labelCardSizeMaxBattlefield,gridBagConstraints);
  sliderStackWidth.setMajorTickSpacing(20);
  sliderStackWidth.setMaximum(90);
  sliderStackWidth.setMinimum(10);
  sliderStackWidth.setMinorTickSpacing(5);
  sliderStackWidth.setPaintLabels(true);
  sliderStackWidth.setPaintTicks(true);
  sliderStackWidth.setSnapToTicks(true);
  sliderStackWidth.setToolTipText("<HTML>The % size of the stack object area in relation to the hand card area size.");
  sliderStackWidth.setValue(30);
  sliderStackWidth.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  sliderStackWidth.setMinimumSize(new java.awt.Dimension(150,40));
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=0;
  gridBagConstraints.gridy=2;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  gridBagConstraints.insets=new java.awt.Insets(2,2,2,2);
  guiSizeGame.add(sliderStackWidth,gridBagConstraints);
  sliderStackWidth.getAccessibleContext().setAccessibleDescription("<HTML>The stack width in relation to the hand area width");
  labelStackWidth.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  labelStackWidth.setText("Stack %width related to hand");
  labelStackWidth.setToolTipText("<HTML>The % size of the stack object area in relation to the hand card area size.");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=0;
  gridBagConstraints.gridy=3;
  gridBagConstraints.ipadx=3;
  gridBagConstraints.ipady=3;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  guiSizeGame.add(labelStackWidth,gridBagConstraints);
  labelStackWidth.getAccessibleContext().setAccessibleDescription("<HTML>The stack width in relation to the hand area width");
  sliderGameFeedbackArea.setMajorTickSpacing(5);
  sliderGameFeedbackArea.setMaximum(50);
  sliderGameFeedbackArea.setMinimum(10);
  sliderGameFeedbackArea.setMinorTickSpacing(1);
  sliderGameFeedbackArea.setPaintLabels(true);
  sliderGameFeedbackArea.setPaintTicks(true);
  sliderGameFeedbackArea.setSnapToTicks(true);
  sliderGameFeedbackArea.setToolTipText("<HTML>The size of the game feedback area (buttons and messages above the hand area)");
  sliderGameFeedbackArea.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  sliderGameFeedbackArea.setMinimumSize(new java.awt.Dimension(150,40));
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=1;
  gridBagConstraints.gridy=2;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  gridBagConstraints.insets=new java.awt.Insets(2,2,2,2);
  guiSizeGame.add(sliderGameFeedbackArea,gridBagConstraints);
  labelGameFeedback.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  labelGameFeedback.setText("Dialog area");
  labelGameFeedback.setToolTipText("<HTML>The size of the game feedback area (buttons and messages above the hand area)");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=1;
  gridBagConstraints.gridy=3;
  gridBagConstraints.ipadx=3;
  gridBagConstraints.ipady=3;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  guiSizeGame.add(labelGameFeedback,gridBagConstraints);
  labelGameFeedback.getAccessibleContext().setAccessibleName("");
  sliderTooltipSize.setMajorTickSpacing(5);
  sliderTooltipSize.setMaximum(50);
  sliderTooltipSize.setMinimum(10);
  sliderTooltipSize.setMinorTickSpacing(1);
  sliderTooltipSize.setPaintLabels(true);
  sliderTooltipSize.setPaintTicks(true);
  sliderTooltipSize.setSnapToTicks(true);
  sliderTooltipSize.setToolTipText("<HTML>The size of the tooltip window for cards or permanents");
  sliderTooltipSize.setValue(14);
  sliderTooltipSize.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  sliderTooltipSize.setMinimumSize(new java.awt.Dimension(150,40));
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=2;
  gridBagConstraints.gridy=2;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  gridBagConstraints.insets=new java.awt.Insets(2,2,2,2);
  guiSizeGame.add(sliderTooltipSize,gridBagConstraints);
  labelTooltipSize.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  labelTooltipSize.setText("Tooltip window");
  labelTooltipSize.setToolTipText("<HTML>The size of the tooltip window for cards or permanents");
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=2;
  gridBagConstraints.gridy=3;
  gridBagConstraints.ipadx=3;
  gridBagConstraints.ipady=3;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  guiSizeGame.add(labelTooltipSize,gridBagConstraints);
  gridBagConstraints=new java.awt.GridBagConstraints();
  gridBagConstraints.gridx=0;
  gridBagConstraints.gridy=2;
  gridBagConstraints.fill=java.awt.GridBagConstraints.BOTH;
  gridBagConstraints.anchor=java.awt.GridBagConstraints.NORTH;
  tabGuiSize.add(guiSizeGame,gridBagConstraints);
  tabsPanel.addTab("GUI Size",tabGuiSize);
  jLabelHeadLine.setText("Choose phases your game will stop on if not skipped by a skip action (e.g. F6):");
  jLabelYourTurn.setText("Your turn");
  jLabelOpponentsTurn.setText("Opponent(s) turn");
  jLabelUpkeep.setText("Upkeep:");
  jLabelDraw.setText("Draw:");
  jLabelMain1.setText("Main:");
  jLabelBeforeCombat.setText("Before combat:");
  jLabelEndofCombat.setText("End of combat:");
  jLabelMain2.setText("Main 2:");
  jLabelEndOfTurn.setText("End of turn:");
  phases_stopSettings.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Stop settings"));
  phases_stopSettings.setLayout(new java.awt.GridLayout(7,1));
  cbStopAttack.setSelected(true);
  cbStopAttack.setText("Stop on declare attackers step if you skip steps (F4/F5/F7) and attackers are available");
  cbStopAttack.setToolTipText("If you use F4, F5 or F7 to skip steps, you stop on declare attackers step if attackers are available. If this option is not activated, you also skip the declare attackers step with this actions. F9 does always skip the declare attackers step.");
  cbStopAttack.setActionCommand("");
  cbStopAttack.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbStopAttackActionPerformed(evt);
    }
  }
);
  phases_stopSettings.add(cbStopAttack);
  cbStopBlock.setText("Stop on your declare blockers step also if no blockers available");
  cbStopBlock.setToolTipText("Also if you have no blockers to declare, the game stops at the declare blockers step.");
  cbStopBlock.setActionCommand("");
  cbStopBlock.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbStopBlockActionPerformed(evt);
    }
  }
);
  phases_stopSettings.add(cbStopBlock);
  cbStopOnAllMain.setText("Skip with F7 to next main phase (if not activated skip always to your next main phase)");
  cbStopOnAllMain.setToolTipText("If activated F7 skips to next main phases (regardless of the active players).");
  cbStopOnAllMain.setActionCommand("");
  cbStopOnAllMain.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbStopOnAllMainActionPerformed(evt);
    }
  }
);
  phases_stopSettings.add(cbStopOnAllMain);
  cbStopOnAllEnd.setText("Skip with F5 to next end step (if not activated only to end steps of opponents)");
  cbStopOnAllEnd.setToolTipText("If activated - F5 skips to the next end step (regardless of the current player)");
  cbStopOnAllEnd.setActionCommand("");
  cbStopOnAllEnd.setPreferredSize(new java.awt.Dimension(300,25));
  cbStopOnAllEnd.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbStopOnAllEndActionPerformed(evt);
    }
  }
);
  phases_stopSettings.add(cbStopOnAllEnd);
  cbPassPriorityCast.setText("Pass priority automatically after you have put a spell on the stack");
  cbPassPriorityCast.setToolTipText("If activated the system passes priority automatically for you if you have put a spell on the stack.");
  cbPassPriorityCast.setActionCommand("");
  cbPassPriorityCast.setPreferredSize(new java.awt.Dimension(300,25));
  cbPassPriorityCast.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbPassPriorityCastActionPerformed(evt);
    }
  }
);
  phases_stopSettings.add(cbPassPriorityCast);
  cbPassPriorityActivation.setText("Pass priority automatically after you have put an activated ability on the stack");
  cbPassPriorityActivation.setToolTipText("If activated the system passes priority for you automatically after you have put an activated ability on the stack.");
  cbPassPriorityActivation.setActionCommand("");
  cbPassPriorityActivation.setPreferredSize(new java.awt.Dimension(300,25));
  cbPassPriorityActivation.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbPassPriorityActivationActionPerformed(evt);
    }
  }
);
  phases_stopSettings.add(cbPassPriorityActivation);
  cbAutoOrderTrigger.setText("Set order for your triggers automatically if all have the same text");
  cbAutoOrderTrigger.setToolTipText("<HTML>If activated the order to put on the stack your triggers that trigger at the same time<br/>\nis set automatically if all have the same text.");
  cbAutoOrderTrigger.setActionCommand("");
  cbAutoOrderTrigger.setPreferredSize(new java.awt.Dimension(300,25));
  cbAutoOrderTrigger.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbAutoOrderTriggerActionPerformed(evt);
    }
  }
);
  phases_stopSettings.add(cbAutoOrderTrigger);
  org.jdesktop.layout.GroupLayout tabPhasesLayout=new org.jdesktop.layout.GroupLayout(tabPhases);
  tabPhases.setLayout(tabPhasesLayout);
  tabPhasesLayout.setHorizontalGroup(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabPhasesLayout.createSequentialGroup().add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabPhasesLayout.createSequentialGroup().add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabPhasesLayout.createSequentialGroup().add(20,20,20).add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabPhasesLayout.createSequentialGroup().add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jLabelUpkeep).add(jLabelBeforeCombat).add(jLabelEndofCombat).add(jLabelMain2).add(jLabelEndOfTurn)).add(77,77,77).add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabPhasesLayout.createSequentialGroup().add(2,2,2).add(jLabelYourTurn).add(32,32,32).add(jLabelOpponentsTurn)).add(tabPhasesLayout.createSequentialGroup().add(13,13,13).add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(checkBoxDrawYou).add(checkBoxUpkeepYou).add(checkBoxMainYou).add(checkBoxBeforeCYou).add(checkBoxEndOfCYou).add(checkBoxMain2You).add(checkBoxEndTurnYou)).add(78,78,78).add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(checkBoxUpkeepOthers).add(checkBoxBeforeCOthers).add(checkBoxMainOthers).add(checkBoxEndOfCOthers).add(checkBoxDrawOthers).add(checkBoxMain2Others).add(checkBoxEndTurnOthers))))).add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING,false).add(org.jdesktop.layout.GroupLayout.LEADING,jLabelMain1,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(org.jdesktop.layout.GroupLayout.LEADING,jLabelDraw,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)))).add(tabPhasesLayout.createSequentialGroup().addContainerGap().add(jLabelHeadLine))).add(0,0,Short.MAX_VALUE)).add(tabPhasesLayout.createSequentialGroup().addContainerGap().add(phases_stopSettings,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE))).addContainerGap()));
  tabPhasesLayout.setVerticalGroup(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabPhasesLayout.createSequentialGroup().addContainerGap().add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(tabPhasesLayout.createSequentialGroup().add(jLabelOpponentsTurn).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(checkBoxUpkeepOthers)).add(tabPhasesLayout.createSequentialGroup().add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(tabPhasesLayout.createSequentialGroup().add(jLabelHeadLine).add(20,20,20)).add(jLabelYourTurn)).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(checkBoxUpkeepYou).add(jLabelUpkeep)))).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(jLabelDraw).add(checkBoxDrawYou).add(checkBoxDrawOthers)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(jLabelMain1).add(checkBoxMainYou).add(checkBoxMainOthers)).add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabPhasesLayout.createSequentialGroup().addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING,jLabelBeforeCombat).add(org.jdesktop.layout.GroupLayout.TRAILING,checkBoxBeforeCYou))).add(tabPhasesLayout.createSequentialGroup().add(6,6,6).add(checkBoxBeforeCOthers))).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(jLabelEndofCombat).add(checkBoxEndOfCYou).add(checkBoxEndOfCOthers)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(jLabelMain2).add(checkBoxMain2You).add(checkBoxMain2Others)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(tabPhasesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(checkBoxEndTurnYou).add(jLabelEndOfTurn).add(checkBoxEndTurnOthers)).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(phases_stopSettings,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap(170,Short.MAX_VALUE)));
  tabsPanel.addTab("Phases & Priority",tabPhases);
  panelCardImages.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Card images:"));
  cbUseDefaultImageFolder.setText("Use default location to save images");
  cbUseDefaultImageFolder.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbUseDefaultImageFolderActionPerformed(evt);
    }
  }
);
  txtImageFolderPath.setToolTipText("The selected image will be used as background picture. You have to restart MAGE to view a changed background image.");
  btnBrowseImageLocation.setText("Browse...");
  btnBrowseImageLocation.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnBrowseImageLocationActionPerformed(evt);
    }
  }
);
  cbCheckForNewImages.setText("Check for new images on startup");
  cbCheckForNewImages.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbCheckForNewImagesActionPerformed(evt);
    }
  }
);
  cbSaveToZipFiles.setText("Store images in zip files");
  cbSaveToZipFiles.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbSaveToZipFilesActionPerformed(evt);
    }
  }
);
  cbPreferedImageLanguage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Item 1","Item 2","Item 3","Item 4"}));
  labelPreferedImageLanguage.setText("Prefered image language:");
  labelPreferedImageLanguage.setFocusable(false);
  labelNumberOfDownloadThreads.setText("Number of download threads:");
  cbNumberOfDownloadThreads.setModel(new javax.swing.DefaultComboBoxModel(new String[]{"Item 1","Item 2","Item 3","Item 4"}));
  org.jdesktop.layout.GroupLayout panelCardImagesLayout=new org.jdesktop.layout.GroupLayout(panelCardImages);
  panelCardImages.setLayout(panelCardImagesLayout);
  panelCardImagesLayout.setHorizontalGroup(panelCardImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(panelCardImagesLayout.createSequentialGroup().add(panelCardImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(panelCardImagesLayout.createSequentialGroup().addContainerGap().add(txtImageFolderPath).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(btnBrowseImageLocation)).add(panelCardImagesLayout.createSequentialGroup().add(panelCardImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(panelCardImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING,false).add(panelCardImagesLayout.createSequentialGroup().add(cbCheckForNewImages).add(147,147,147)).add(org.jdesktop.layout.GroupLayout.LEADING,panelCardImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(panelCardImagesLayout.createSequentialGroup().add(panelCardImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING,false).add(org.jdesktop.layout.GroupLayout.LEADING,panelCardImagesLayout.createSequentialGroup().addContainerGap().add(labelPreferedImageLanguage)).add(org.jdesktop.layout.GroupLayout.LEADING,cbSaveToZipFiles)).add(20,20,20).add(cbPreferedImageLanguage,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,153,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(panelCardImagesLayout.createSequentialGroup().addContainerGap().add(labelNumberOfDownloadThreads).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(cbNumberOfDownloadThreads,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,153,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))).add(cbUseDefaultImageFolder)).add(0,270,Short.MAX_VALUE))).addContainerGap()));
  panelCardImagesLayout.setVerticalGroup(panelCardImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(panelCardImagesLayout.createSequentialGroup().add(cbUseDefaultImageFolder).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(panelCardImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(txtImageFolderPath,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(btnBrowseImageLocation)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(cbCheckForNewImages).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(cbSaveToZipFiles).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(panelCardImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(labelNumberOfDownloadThreads).add(cbNumberOfDownloadThreads,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(panelCardImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(cbPreferedImageLanguage,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(labelPreferedImageLanguage))));
  panelBackgroundImages.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Background images setting:"));
  cbUseDefaultBackground.setText("Use default image");
  cbUseDefaultBackground.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbUseDefaultBackgroundActionPerformed(evt);
    }
  }
);
  txtBackgroundImagePath.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      txtBackgroundImagePathActionPerformed(evt);
    }
  }
);
  btnBrowseBackgroundImage.setText("Browse...");
  btnBrowseBackgroundImage.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnBrowseBackgroundImageActionPerformed(evt);
    }
  }
);
  txtBattlefieldImagePath.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      txtBattlefieldImagePathActionPerformed(evt);
    }
  }
);
  btnBrowseBattlefieldImage.setText("Browse...");
  btnBrowseBattlefieldImage.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnBrowseBattlefieldImageActionPerformed(evt);
    }
  }
);
  cbUseDefaultBattleImage.setText("Use default battlefield image");
  cbUseDefaultBattleImage.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbUseDefaultBattleImageActionPerformed(evt);
    }
  }
);
  cbUseRandomBattleImage.setText("Select random battlefield image");
  cbUseRandomBattleImage.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbUseRandomBattleImageActionPerformed(evt);
    }
  }
);
  jLabel14.setText("Background:");
  jLabel15.setText("Battlefield:");
  org.jdesktop.layout.GroupLayout panelBackgroundImagesLayout=new org.jdesktop.layout.GroupLayout(panelBackgroundImages);
  panelBackgroundImages.setLayout(panelBackgroundImagesLayout);
  panelBackgroundImagesLayout.setHorizontalGroup(panelBackgroundImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(panelBackgroundImagesLayout.createSequentialGroup().add(panelBackgroundImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(panelBackgroundImagesLayout.createSequentialGroup().add(panelBackgroundImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(panelBackgroundImagesLayout.createSequentialGroup().add(19,19,19).add(jLabel14)).add(panelBackgroundImagesLayout.createSequentialGroup().add(25,25,25).add(jLabel15))).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(panelBackgroundImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(txtBackgroundImagePath).add(txtBattlefieldImagePath)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(panelBackgroundImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING,btnBrowseBackgroundImage).add(org.jdesktop.layout.GroupLayout.TRAILING,btnBrowseBattlefieldImage))).add(panelBackgroundImagesLayout.createSequentialGroup().add(panelBackgroundImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(cbUseRandomBattleImage).add(cbUseDefaultBattleImage).add(cbUseDefaultBackground)).add(0,0,Short.MAX_VALUE))).addContainerGap()));
  panelBackgroundImagesLayout.setVerticalGroup(panelBackgroundImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(panelBackgroundImagesLayout.createSequentialGroup().addContainerGap().add(cbUseDefaultBackground).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(panelBackgroundImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(txtBackgroundImagePath,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(btnBrowseBackgroundImage).add(jLabel14)).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(cbUseDefaultBattleImage).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(cbUseRandomBattleImage).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(panelBackgroundImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(txtBattlefieldImagePath,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(btnBrowseBattlefieldImage).add(jLabel15))));
  jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Card rendering:"));
  cbCardRenderImageFallback.setText("Fall back to plain image based rendering");
  cbCardRenderImageFallback.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbCardRenderImageFallbackActionPerformed(evt);
    }
  }
);
  cbCardRenderShowReminderText.setText("Show reminder text in rendered card textboxes");
  cbCardRenderShowReminderText.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbCardRenderShowReminderTextActionPerformed(evt);
    }
  }
);
  cbCardRenderHideSetSymbol.setText("Hide set symbols on cards (more space on the type line for card types)");
  cbCardRenderHideSetSymbol.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbCardRenderHideSetSymbolActionPerformed(evt);
    }
  }
);
  org.jdesktop.layout.GroupLayout jPanel1Layout=new org.jdesktop.layout.GroupLayout(jPanel1);
  jPanel1.setLayout(jPanel1Layout);
  jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jPanel1Layout.createSequentialGroup().add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(cbCardRenderImageFallback).add(cbCardRenderShowReminderText).add(cbCardRenderHideSetSymbol)).add(0,0,Short.MAX_VALUE)));
  jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(jPanel1Layout.createSequentialGroup().add(cbCardRenderImageFallback).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(cbCardRenderShowReminderText).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(cbCardRenderHideSetSymbol).add(0,0,Short.MAX_VALUE)));
  org.jdesktop.layout.GroupLayout tabImagesLayout=new org.jdesktop.layout.GroupLayout(tabImages);
  tabImages.setLayout(tabImagesLayout);
  tabImagesLayout.setHorizontalGroup(tabImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabImagesLayout.createSequentialGroup().addContainerGap().add(tabImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(panelCardImages,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(jPanel1,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(panelBackgroundImages,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addContainerGap()));
  tabImagesLayout.setVerticalGroup(tabImagesLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabImagesLayout.createSequentialGroup().addContainerGap().add(jPanel1,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(panelCardImages,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(panelBackgroundImages,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap(125,Short.MAX_VALUE)));
  tabsPanel.addTab("Images",tabImages);
  sounds_clips.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Clips"));
  sounds_clips.setLayout(new java.awt.GridLayout(4,0));
  cbEnableGameSounds.setText("Enable game sounds");
  cbEnableGameSounds.setToolTipText("Sounds that will be played for certain actions (e.g. play land, attack, etc.) during the game.");
  cbEnableGameSounds.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbEnableGameSoundsActionPerformed(evt);
    }
  }
);
  sounds_clips.add(cbEnableGameSounds);
  cbEnableDraftSounds.setText("Enable draft sounds");
  cbEnableDraftSounds.setToolTipText("Sounds that will be played during drafting for card picking or warining if time runs out.");
  cbEnableDraftSounds.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbEnableDraftSoundsActionPerformed(evt);
    }
  }
);
  sounds_clips.add(cbEnableDraftSounds);
  cbEnableSkipButtonsSounds.setText("Enable skip button sounds");
  cbEnableSkipButtonsSounds.setToolTipText("Sounds that will be played if a priority skip action (F4/F5/F7/F9) or cancel skip action (F3) is used.");
  cbEnableSkipButtonsSounds.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbEnableSkipButtonsSoundsActionPerformed(evt);
    }
  }
);
  sounds_clips.add(cbEnableSkipButtonsSounds);
  cbEnableOtherSounds.setText("Enable other sounds");
  cbEnableOtherSounds.setToolTipText("Sounds that will be played for actions outside of games (e.g. whisper, player joins your game, player submits a deck ...).");
  cbEnableOtherSounds.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbEnableOtherSoundsActionPerformed(evt);
    }
  }
);
  sounds_clips.add(cbEnableOtherSounds);
  sounds_backgroundMusic.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Music"));
  cbEnableBattlefieldBGM.setText("Play music during match");
  cbEnableBattlefieldBGM.setToolTipText("During your matches music will be played from the seleced folder.");
  cbEnableBattlefieldBGM.setActionCommand("Play automatically during matches");
  cbEnableBattlefieldBGM.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbEnableBattlefieldBGMActionPerformed(evt);
    }
  }
);
  jLabel16.setText("Playing from folder:");
  jLabel16.setToolTipText("");
  txtBattlefieldIBGMPath.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      txtBattlefieldIBGMPathActionPerformed(evt);
    }
  }
);
  btnBattlefieldBGMBrowse.setText("Browse...");
  btnBattlefieldBGMBrowse.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnBattlefieldBGMBrowseActionPerformed(evt);
    }
  }
);
  org.jdesktop.layout.GroupLayout sounds_backgroundMusicLayout=new org.jdesktop.layout.GroupLayout(sounds_backgroundMusic);
  sounds_backgroundMusic.setLayout(sounds_backgroundMusicLayout);
  sounds_backgroundMusicLayout.setHorizontalGroup(sounds_backgroundMusicLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(sounds_backgroundMusicLayout.createSequentialGroup().addContainerGap().add(jLabel16).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(txtBattlefieldIBGMPath).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(btnBattlefieldBGMBrowse)).add(sounds_backgroundMusicLayout.createSequentialGroup().add(cbEnableBattlefieldBGM).add(0,0,Short.MAX_VALUE)));
  sounds_backgroundMusicLayout.setVerticalGroup(sounds_backgroundMusicLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(sounds_backgroundMusicLayout.createSequentialGroup().add(cbEnableBattlefieldBGM).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(sounds_backgroundMusicLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(txtBattlefieldIBGMPath,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(btnBattlefieldBGMBrowse).add(jLabel16))));
  org.jdesktop.layout.GroupLayout tabSoundsLayout=new org.jdesktop.layout.GroupLayout(tabSounds);
  tabSounds.setLayout(tabSoundsLayout);
  tabSoundsLayout.setHorizontalGroup(tabSoundsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabSoundsLayout.createSequentialGroup().addContainerGap().add(tabSoundsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(sounds_clips,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(org.jdesktop.layout.GroupLayout.TRAILING,sounds_backgroundMusic,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addContainerGap()));
  tabSoundsLayout.setVerticalGroup(tabSoundsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabSoundsLayout.createSequentialGroup().addContainerGap().add(sounds_clips,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(sounds_backgroundMusic,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  sounds_clips.getAccessibleContext().setAccessibleDescription("");
  tabsPanel.addTab("Sounds",tabSounds);
  avatarPane.setMaximumSize(new java.awt.Dimension(508,772));
  avatarPane.setMinimumSize(new java.awt.Dimension(508,772));
  avatarPane.setPreferredSize(new java.awt.Dimension(508,772));
  avatarPanel.setMaximumSize(new java.awt.Dimension(508,772));
  avatarPanel.setMinimumSize(new java.awt.Dimension(508,772));
  avatarPanel.setPreferredSize(new java.awt.Dimension(508,772));
  avatarPanel.setLayout(new java.awt.GridLayout(6,4,20,20));
  jPanel10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel10.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel10.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel10.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel10Layout=new org.jdesktop.layout.GroupLayout(jPanel10);
  jPanel10.setLayout(jPanel10Layout);
  jPanel10Layout.setHorizontalGroup(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel10Layout.setVerticalGroup(jPanel10Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel10);
  jPanel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel11.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel11.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel11.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel11Layout=new org.jdesktop.layout.GroupLayout(jPanel11);
  jPanel11.setLayout(jPanel11Layout);
  jPanel11Layout.setHorizontalGroup(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel11Layout.setVerticalGroup(jPanel11Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel11);
  jPanel12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel12.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel12.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel12.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel12Layout=new org.jdesktop.layout.GroupLayout(jPanel12);
  jPanel12.setLayout(jPanel12Layout);
  jPanel12Layout.setHorizontalGroup(jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel12Layout.setVerticalGroup(jPanel12Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel12);
  jPanel13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel13.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel13.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel13.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel13Layout=new org.jdesktop.layout.GroupLayout(jPanel13);
  jPanel13.setLayout(jPanel13Layout);
  jPanel13Layout.setHorizontalGroup(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel13Layout.setVerticalGroup(jPanel13Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel13);
  jPanel14.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel14.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel14.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel14.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel14Layout=new org.jdesktop.layout.GroupLayout(jPanel14);
  jPanel14.setLayout(jPanel14Layout);
  jPanel14Layout.setHorizontalGroup(jPanel14Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel14Layout.setVerticalGroup(jPanel14Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel14);
  jPanel15.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel15.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel15.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel15.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel15Layout=new org.jdesktop.layout.GroupLayout(jPanel15);
  jPanel15.setLayout(jPanel15Layout);
  jPanel15Layout.setHorizontalGroup(jPanel15Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel15Layout.setVerticalGroup(jPanel15Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel15);
  jPanel16.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel16.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel16.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel16.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel16Layout=new org.jdesktop.layout.GroupLayout(jPanel16);
  jPanel16.setLayout(jPanel16Layout);
  jPanel16Layout.setHorizontalGroup(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel16Layout.setVerticalGroup(jPanel16Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel16);
  jPanel17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel17.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel17.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel17.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel17Layout=new org.jdesktop.layout.GroupLayout(jPanel17);
  jPanel17.setLayout(jPanel17Layout);
  jPanel17Layout.setHorizontalGroup(jPanel17Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel17Layout.setVerticalGroup(jPanel17Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel17);
  jPanel18.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel18.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel18.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel18.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel18Layout=new org.jdesktop.layout.GroupLayout(jPanel18);
  jPanel18.setLayout(jPanel18Layout);
  jPanel18Layout.setHorizontalGroup(jPanel18Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel18Layout.setVerticalGroup(jPanel18Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel18);
  jPanel19.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel19.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel19.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel19.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel19Layout=new org.jdesktop.layout.GroupLayout(jPanel19);
  jPanel19.setLayout(jPanel19Layout);
  jPanel19Layout.setHorizontalGroup(jPanel19Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel19Layout.setVerticalGroup(jPanel19Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel19);
  jPanel20.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel20.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel20.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel20.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel20Layout=new org.jdesktop.layout.GroupLayout(jPanel20);
  jPanel20.setLayout(jPanel20Layout);
  jPanel20Layout.setHorizontalGroup(jPanel20Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel20Layout.setVerticalGroup(jPanel20Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel20);
  jPanel21.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel21.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel21.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel21.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel21Layout=new org.jdesktop.layout.GroupLayout(jPanel21);
  jPanel21.setLayout(jPanel21Layout);
  jPanel21Layout.setHorizontalGroup(jPanel21Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel21Layout.setVerticalGroup(jPanel21Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel21);
  jPanel22.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel22.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel22.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel22.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel22Layout=new org.jdesktop.layout.GroupLayout(jPanel22);
  jPanel22.setLayout(jPanel22Layout);
  jPanel22Layout.setHorizontalGroup(jPanel22Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel22Layout.setVerticalGroup(jPanel22Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel22);
  jPanel23.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel23.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel23.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel23.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel23Layout=new org.jdesktop.layout.GroupLayout(jPanel23);
  jPanel23.setLayout(jPanel23Layout);
  jPanel23Layout.setHorizontalGroup(jPanel23Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel23Layout.setVerticalGroup(jPanel23Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel23);
  jPanel24.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel24.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel24.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel24.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel24Layout=new org.jdesktop.layout.GroupLayout(jPanel24);
  jPanel24.setLayout(jPanel24Layout);
  jPanel24Layout.setHorizontalGroup(jPanel24Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel24Layout.setVerticalGroup(jPanel24Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel24);
  jPanel25.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel25.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel25.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel25.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel25Layout=new org.jdesktop.layout.GroupLayout(jPanel25);
  jPanel25.setLayout(jPanel25Layout);
  jPanel25Layout.setHorizontalGroup(jPanel25Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel25Layout.setVerticalGroup(jPanel25Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel25);
  jPanel26.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel26.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel26.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel26.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel26Layout=new org.jdesktop.layout.GroupLayout(jPanel26);
  jPanel26.setLayout(jPanel26Layout);
  jPanel26Layout.setHorizontalGroup(jPanel26Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel26Layout.setVerticalGroup(jPanel26Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel26);
  jPanel27.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel27.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel27.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel27.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel27Layout=new org.jdesktop.layout.GroupLayout(jPanel27);
  jPanel27.setLayout(jPanel27Layout);
  jPanel27Layout.setHorizontalGroup(jPanel27Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel27Layout.setVerticalGroup(jPanel27Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel27);
  jPanel28.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel28.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel28.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel28.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel28Layout=new org.jdesktop.layout.GroupLayout(jPanel28);
  jPanel28.setLayout(jPanel28Layout);
  jPanel28Layout.setHorizontalGroup(jPanel28Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel28Layout.setVerticalGroup(jPanel28Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel28);
  jPanel29.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel29.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel29.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel29.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel29Layout=new org.jdesktop.layout.GroupLayout(jPanel29);
  jPanel29.setLayout(jPanel29Layout);
  jPanel29Layout.setHorizontalGroup(jPanel29Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel29Layout.setVerticalGroup(jPanel29Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel29);
  jPanel30.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel30.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel30.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel30.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel30Layout=new org.jdesktop.layout.GroupLayout(jPanel30);
  jPanel30.setLayout(jPanel30Layout);
  jPanel30Layout.setHorizontalGroup(jPanel30Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel30Layout.setVerticalGroup(jPanel30Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel30);
  jPanel31.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel31.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel31.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel31.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel31Layout=new org.jdesktop.layout.GroupLayout(jPanel31);
  jPanel31.setLayout(jPanel31Layout);
  jPanel31Layout.setHorizontalGroup(jPanel31Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel31Layout.setVerticalGroup(jPanel31Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel31);
  jPanel32.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel32.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel32.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel32.setPreferredSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel32Layout=new org.jdesktop.layout.GroupLayout(jPanel32);
  jPanel32.setLayout(jPanel32Layout);
  jPanel32Layout.setHorizontalGroup(jPanel32Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel32Layout.setVerticalGroup(jPanel32Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel32);
  jPanel33.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel33.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel33.setMinimumSize(new java.awt.Dimension(102,102));
  org.jdesktop.layout.GroupLayout jPanel33Layout=new org.jdesktop.layout.GroupLayout(jPanel33);
  jPanel33.setLayout(jPanel33Layout);
  jPanel33Layout.setHorizontalGroup(jPanel33Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  jPanel33Layout.setVerticalGroup(jPanel33Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel33);
  avatarPane.setViewportView(avatarPanel);
  org.jdesktop.layout.GroupLayout tabAvatarsLayout=new org.jdesktop.layout.GroupLayout(tabAvatars);
  tabAvatars.setLayout(tabAvatarsLayout);
  tabAvatarsLayout.setHorizontalGroup(tabAvatarsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabAvatarsLayout.createSequentialGroup().add(avatarPane,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,528,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(0,0,Short.MAX_VALUE)));
  tabAvatarsLayout.setVerticalGroup(tabAvatarsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabAvatarsLayout.createSequentialGroup().add(avatarPane,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,584,Short.MAX_VALUE).addContainerGap()));
  tabsPanel.addTab("Avatars",tabAvatars);
  connection_servers.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Servers"));
  lblURLServerList.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
  lblURLServerList.setText("URL server list:");
  lblURLServerList.setToolTipText("");
  lblURLServerList.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
  lblURLServerList.setPreferredSize(new java.awt.Dimension(110,16));
  lblURLServerList.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
  txtURLServerList.setToolTipText("The URL XMage tries to read a server list from.");
  txtURLServerList.setPreferredSize(new java.awt.Dimension(300,22));
  jLabel17.setFont(new java.awt.Font("Tahoma",2,10));
  jLabel17.setText("e.g.: http://XMage.de/files/server-list.txt");
  org.jdesktop.layout.GroupLayout connection_serversLayout=new org.jdesktop.layout.GroupLayout(connection_servers);
  connection_servers.setLayout(connection_serversLayout);
  connection_serversLayout.setHorizontalGroup(connection_serversLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(connection_serversLayout.createSequentialGroup().add(connection_serversLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(connection_serversLayout.createSequentialGroup().addContainerGap().add(lblURLServerList,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,96,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(txtURLServerList,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,370,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(connection_serversLayout.createSequentialGroup().add(141,141,141).add(jLabel17))).addContainerGap(198,Short.MAX_VALUE)));
  connection_serversLayout.setVerticalGroup(connection_serversLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(connection_serversLayout.createSequentialGroup().add(connection_serversLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING,false).add(lblURLServerList,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(txtURLServerList,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,28,Short.MAX_VALUE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(jLabel17)));
  lblProxyType.setText("Proxy:");
  cbProxyType.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbProxyTypeActionPerformed(evt);
    }
  }
);
  pnlProxySettings.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  lblProxyServer.setText("Server:");
  lblProxyPort.setText("Port:");
  txtProxyPort.addKeyListener(new java.awt.event.KeyAdapter(){
    public void keyTyped(    java.awt.event.KeyEvent evt){
      txtProxyPortkeyTyped(evt);
    }
  }
);
  lblProxyUserName.setText("User Name:");
  lblProxyPassword.setText("Password:");
  txtPasswordField.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      txtPasswordFieldActionPerformed(evt);
    }
  }
);
  rememberPswd.setText("Remember Password");
  rememberPswd.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      rememberPswdActionPerformed(evt);
    }
  }
);
  jLabel11.setFont(new java.awt.Font("Tahoma",2,10));
  jLabel11.setText("Note: password won't be encrypted!");
  org.jdesktop.layout.GroupLayout pnlProxyLayout=new org.jdesktop.layout.GroupLayout(pnlProxy);
  pnlProxy.setLayout(pnlProxyLayout);
  pnlProxyLayout.setHorizontalGroup(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(pnlProxyLayout.createSequentialGroup().addContainerGap().add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(pnlProxyLayout.createSequentialGroup().add(rememberPswd).add(47,47,47).add(jLabel11).add(34,34,34)).add(pnlProxyLayout.createSequentialGroup().add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(lblProxyPort).add(lblProxyPassword).add(lblProxyServer).add(lblProxyUserName)).add(19,19,19).add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(txtProxyPort,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,58,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING,false).add(org.jdesktop.layout.GroupLayout.LEADING,txtPasswordField).add(org.jdesktop.layout.GroupLayout.LEADING,txtProxyUserName,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,148,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(txtProxyServer)).addContainerGap()))));
  pnlProxyLayout.setVerticalGroup(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(pnlProxyLayout.createSequentialGroup().add(6,6,6).add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(txtProxyServer,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(lblProxyServer)).add(8,8,8).add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(lblProxyPort).add(txtProxyPort,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(txtProxyUserName,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(lblProxyUserName)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(txtPasswordField,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(lblProxyPassword)).add(18,18,18).add(pnlProxyLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(rememberPswd).add(jLabel11)).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  org.jdesktop.layout.GroupLayout pnlProxySettingsLayout=new org.jdesktop.layout.GroupLayout(pnlProxySettings);
  pnlProxySettings.setLayout(pnlProxySettingsLayout);
  pnlProxySettingsLayout.setHorizontalGroup(pnlProxySettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(pnlProxySettingsLayout.createSequentialGroup().addContainerGap().add(pnlProxy,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  pnlProxySettingsLayout.setVerticalGroup(pnlProxySettingsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(pnlProxySettingsLayout.createSequentialGroup().add(pnlProxy,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  org.jdesktop.layout.GroupLayout tabConnectionLayout=new org.jdesktop.layout.GroupLayout(tabConnection);
  tabConnection.setLayout(tabConnectionLayout);
  tabConnectionLayout.setHorizontalGroup(tabConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING,tabConnectionLayout.createSequentialGroup().addContainerGap().add(tabConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING).add(pnlProxySettings,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(org.jdesktop.layout.GroupLayout.LEADING,tabConnectionLayout.createSequentialGroup().add(lblProxyType).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(cbProxyType,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,126,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(connection_servers,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addContainerGap()));
  tabConnectionLayout.setVerticalGroup(tabConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabConnectionLayout.createSequentialGroup().addContainerGap().add(connection_servers,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(tabConnectionLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(lblProxyType).add(cbProxyType,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).add(18,18,18).add(pnlProxySettings,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  pnlProxySettings.getAccessibleContext().setAccessibleDescription("");
  tabsPanel.addTab("Connection",tabConnection);
  labelNextTurn.setText("Next Turn");
  labelEndStep.setText("End Step");
  labelMainStep.setText("Main Step");
  labelYourTurn.setText("Your Turn");
  lebelSkip.setText("Skip Stack");
  labelPriorEnd.setText("Prior End");
  labelCancel.setText("Cancel Skip");
  keyCancelSkip.setText("keyBindButton1");
  keyNextTurn.setText("keyBindButton1");
  keyMainStep.setText("keyBindButton1");
  keyEndStep.setText("keyBindButton1");
  keyYourTurn.setText("keyBindButton1");
  keySkipStack.setText("keyBindButton1");
  keyPriorEnd.setText("keyBindButton1");
  keySkipStep.setText("keyBindButton1");
  labelSkipStep.setText("Skip Step");
  keyConfirm.setText("keyBindButton1");
  labelConfirm.setText("Confirm");
  controlsDescriptionLabel.setText("<html>Click on a button and press a key to change a keybind.<br>Space and ESC are not available, and will set the keybind to nothing.<br>If you are currently playing a game, the changes will not take effect until you start a new game.");
  controlsDescriptionLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
  bttnResetControls.setText("Reset to default");
  bttnResetControls.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      bttnResetControlsActionPerformed(evt);
    }
  }
);
  org.jdesktop.layout.GroupLayout tabControlsLayout=new org.jdesktop.layout.GroupLayout(tabControls);
  tabControls.setLayout(tabControlsLayout);
  tabControlsLayout.setHorizontalGroup(tabControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabControlsLayout.createSequentialGroup().addContainerGap().add(tabControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabControlsLayout.createSequentialGroup().add(bttnResetControls).add(0,0,Short.MAX_VALUE)).add(tabControlsLayout.createSequentialGroup().add(tabControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(labelCancel).add(labelNextTurn).add(labelEndStep).add(labelMainStep).add(labelYourTurn).add(lebelSkip).add(labelPriorEnd).add(labelSkipStep).add(labelConfirm)).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(tabControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(keyConfirm,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(keyCancelSkip,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(keyNextTurn,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(keySkipStack,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(keyYourTurn,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(keyMainStep,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(keyPriorEnd,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(keySkipStep,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(keyEndStep,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(controlsDescriptionLabel,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,498,Short.MAX_VALUE))).addContainerGap()));
  tabControlsLayout.setVerticalGroup(tabControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(tabControlsLayout.createSequentialGroup().addContainerGap().add(tabControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING,false).add(org.jdesktop.layout.GroupLayout.LEADING,controlsDescriptionLabel).add(org.jdesktop.layout.GroupLayout.LEADING,tabControlsLayout.createSequentialGroup().add(tabControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(labelConfirm).add(keyConfirm,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(tabControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(labelCancel).add(keyCancelSkip,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(tabControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(labelNextTurn).add(keyNextTurn,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(tabControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(labelEndStep).add(keyEndStep,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(tabControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(labelSkipStep).add(keySkipStep,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(tabControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(labelMainStep).add(keyMainStep,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(tabControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(labelYourTurn).add(keyYourTurn,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(tabControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(lebelSkip).add(keySkipStack,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(tabControlsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(labelPriorEnd).add(keyPriorEnd,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))).addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED).add(bttnResetControls).addContainerGap()));
  tabsPanel.addTab("Controls",tabControls);
  saveButton.setLabel("Save");
  saveButton.setMaximumSize(new java.awt.Dimension(100,30));
  saveButton.setMinimumSize(new java.awt.Dimension(100,30));
  saveButton.setPreferredSize(new java.awt.Dimension(100,30));
  saveButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
  saveButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      saveButtonActionPerformed(evt);
    }
  }
);
  exitButton.setLabel("Exit");
  exitButton.setMaximumSize(new java.awt.Dimension(100,30));
  exitButton.setMinimumSize(new java.awt.Dimension(100,30));
  exitButton.setPreferredSize(new java.awt.Dimension(100,30));
  exitButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
  exitButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      exitButtonActionPerformed(evt);
    }
  }
);
  org.jdesktop.layout.GroupLayout layout=new org.jdesktop.layout.GroupLayout(getContentPane());
  getContentPane().setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(org.jdesktop.layout.GroupLayout.TRAILING,layout.createSequentialGroup().addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(saveButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,100,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED).add(exitButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,100,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(6,6,6)).add(org.jdesktop.layout.GroupLayout.TRAILING,layout.createSequentialGroup().addContainerGap().add(tabsPanel,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  layout.setVerticalGroup(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING).add(layout.createSequentialGroup().add(tabsPanel,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED,org.jdesktop.layout.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE).add(saveButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,30,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE).add(exitButton,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE,30,org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)).addContainerGap()));
  pack();
}
