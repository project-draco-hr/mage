{
  tabsPanel=new javax.swing.JTabbedPane();
  tabMain=new javax.swing.JPanel();
  main_card=new javax.swing.JPanel();
  displayBigCardsInHand=new javax.swing.JCheckBox();
  showCardName=new javax.swing.JCheckBox();
  tooltipDelayLabel=new javax.swing.JLabel();
  tooltipDelay=new javax.swing.JSlider();
  main_game=new javax.swing.JPanel();
  nonLandPermanentsInOnePile=new javax.swing.JCheckBox();
  showPlayerNamesPermanently=new javax.swing.JCheckBox();
  showAbilityPickerForced=new javax.swing.JCheckBox();
  cbAllowRequestToShowHandCards=new javax.swing.JCheckBox();
  cbShowStormCounter=new javax.swing.JCheckBox();
  cbConfirmEmptyManaPool=new javax.swing.JCheckBox();
  cbAskMoveToGraveOrder=new javax.swing.JCheckBox();
  main_gamelog=new javax.swing.JPanel();
  cbGameLogAutoSave=new javax.swing.JCheckBox();
  cbDraftLogAutoSave=new javax.swing.JCheckBox();
  tabGuiSize=new javax.swing.JPanel();
  guiSize_font=new javax.swing.JPanel();
  fontSizeLabel=new javax.swing.JLabel();
  sliderFontSize=new javax.swing.JSlider();
  tabPhases=new javax.swing.JPanel();
  jLabelHeadLine=new javax.swing.JLabel();
  jLabelYourTurn=new javax.swing.JLabel();
  jLabelOpponentsTurn=new javax.swing.JLabel();
  jLabelUpkeep=new javax.swing.JLabel();
  checkBoxUpkeepYou=new javax.swing.JCheckBox();
  checkBoxUpkeepOthers=new javax.swing.JCheckBox();
  jLabelDraw=new javax.swing.JLabel();
  checkBoxDrawYou=new javax.swing.JCheckBox();
  checkBoxDrawOthers=new javax.swing.JCheckBox();
  jLabelMain1=new javax.swing.JLabel();
  checkBoxMainYou=new javax.swing.JCheckBox();
  checkBoxMainOthers=new javax.swing.JCheckBox();
  jLabelBeforeCombat=new javax.swing.JLabel();
  checkBoxBeforeCYou=new javax.swing.JCheckBox();
  checkBoxBeforeCOthers=new javax.swing.JCheckBox();
  jLabelEndofCombat=new javax.swing.JLabel();
  checkBoxEndOfCYou=new javax.swing.JCheckBox();
  checkBoxEndOfCOthers=new javax.swing.JCheckBox();
  jLabelMain2=new javax.swing.JLabel();
  checkBoxMain2You=new javax.swing.JCheckBox();
  checkBoxMain2Others=new javax.swing.JCheckBox();
  jLabelEndOfTurn=new javax.swing.JLabel();
  checkBoxEndTurnYou=new javax.swing.JCheckBox();
  checkBoxEndTurnOthers=new javax.swing.JCheckBox();
  phases_stopSettings=new javax.swing.JPanel();
  cbStopAttack=new javax.swing.JCheckBox();
  cbStopBlock=new javax.swing.JCheckBox();
  cbStopOnAllMain=new javax.swing.JCheckBox();
  cbStopOnAllEnd=new javax.swing.JCheckBox();
  cbPassPriorityCast=new javax.swing.JCheckBox();
  cbPassPriorityActivation=new javax.swing.JCheckBox();
  cbAutoOrderTrigger=new javax.swing.JCheckBox();
  tabImages=new javax.swing.JPanel();
  panelCardImages=new javax.swing.JPanel();
  cbUseDefaultImageFolder=new javax.swing.JCheckBox();
  txtImageFolderPath=new javax.swing.JTextField();
  btnBrowseImageLocation=new javax.swing.JButton();
  cbCheckForNewImages=new javax.swing.JCheckBox();
  cbSaveToZipFiles=new javax.swing.JCheckBox();
  cbPreferedImageLanguage=new javax.swing.JComboBox<>();
  labelPreferedImageLanguage=new javax.swing.JLabel();
  panelBackgroundImages=new javax.swing.JPanel();
  cbUseDefaultBackground=new javax.swing.JCheckBox();
  txtBackgroundImagePath=new javax.swing.JTextField();
  btnBrowseBackgroundImage=new javax.swing.JButton();
  txtBattlefieldImagePath=new javax.swing.JTextField();
  btnBrowseBattlefieldImage=new javax.swing.JButton();
  cbUseDefaultBattleImage=new javax.swing.JCheckBox();
  cbUseRandomBattleImage=new javax.swing.JCheckBox();
  jLabel14=new javax.swing.JLabel();
  jLabel15=new javax.swing.JLabel();
  tabSounds=new javax.swing.JPanel();
  sounds_clips=new javax.swing.JPanel();
  cbEnableGameSounds=new javax.swing.JCheckBox();
  cbEnableDraftSounds=new javax.swing.JCheckBox();
  cbEnableSkipButtonsSounds=new javax.swing.JCheckBox();
  cbEnableOtherSounds=new javax.swing.JCheckBox();
  sounds_backgroundMusic=new javax.swing.JPanel();
  cbEnableBattlefieldBGM=new javax.swing.JCheckBox();
  jLabel16=new javax.swing.JLabel();
  txtBattlefieldIBGMPath=new javax.swing.JTextField();
  btnBattlefieldBGMBrowse=new javax.swing.JButton();
  tabAvatars=new javax.swing.JPanel();
  avatarPane=new javax.swing.JScrollPane();
  avatarPanel=new javax.swing.JPanel();
  jPanel10=new javax.swing.JPanel();
  jPanel11=new javax.swing.JPanel();
  jPanel12=new javax.swing.JPanel();
  jPanel13=new javax.swing.JPanel();
  jPanel14=new javax.swing.JPanel();
  jPanel15=new javax.swing.JPanel();
  jPanel16=new javax.swing.JPanel();
  jPanel17=new javax.swing.JPanel();
  jPanel18=new javax.swing.JPanel();
  jPanel19=new javax.swing.JPanel();
  jPanel20=new javax.swing.JPanel();
  jPanel21=new javax.swing.JPanel();
  jPanel22=new javax.swing.JPanel();
  jPanel23=new javax.swing.JPanel();
  jPanel24=new javax.swing.JPanel();
  jPanel25=new javax.swing.JPanel();
  jPanel26=new javax.swing.JPanel();
  jPanel27=new javax.swing.JPanel();
  jPanel28=new javax.swing.JPanel();
  jPanel29=new javax.swing.JPanel();
  jPanel30=new javax.swing.JPanel();
  jPanel31=new javax.swing.JPanel();
  jPanel32=new javax.swing.JPanel();
  jPanel33=new javax.swing.JPanel();
  tabConnection=new javax.swing.JPanel();
  lblProxyType=new javax.swing.JLabel();
  cbProxyType=new javax.swing.JComboBox<>();
  pnlProxySettings=new javax.swing.JPanel();
  pnlProxy=new javax.swing.JPanel();
  lblProxyServer=new javax.swing.JLabel();
  txtProxyServer=new javax.swing.JTextField();
  lblProxyPort=new javax.swing.JLabel();
  txtProxyPort=new javax.swing.JTextField();
  lblProxyUserName=new javax.swing.JLabel();
  txtProxyUserName=new javax.swing.JTextField();
  lblProxyPassword=new javax.swing.JLabel();
  txtPasswordField=new javax.swing.JPasswordField();
  rememberPswd=new javax.swing.JCheckBox();
  jLabel11=new javax.swing.JLabel();
  connection_servers=new javax.swing.JPanel();
  lblURLServerList=new javax.swing.JLabel();
  txtURLServerList=new javax.swing.JTextField();
  jLabel17=new javax.swing.JLabel();
  saveButton=new javax.swing.JButton();
  exitButton=new javax.swing.JButton();
  setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
  setTitle("Preferences");
  main_card.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Card"));
  displayBigCardsInHand.setText("Use big images (for high resolution screens)");
  displayBigCardsInHand.setToolTipText("Changes the size of the cards shown in hand. Switch this option off if you have a small screen size.");
  displayBigCardsInHand.setActionCommand("");
  displayBigCardsInHand.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
  displayBigCardsInHand.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      displayBigCardsInHandActionPerformed(evt);
    }
  }
);
  showCardName.setSelected(true);
  showCardName.setText("Show card name on card panel");
  showCardName.setToolTipText("Write the card's name on the card to make the card name more recognizable.");
  showCardName.setActionCommand("");
  showCardName.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
  showCardName.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      showCardNameActionPerformed(evt);
    }
  }
);
  tooltipDelayLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  tooltipDelayLabel.setText("Delay in milliseconds for showing the card tooltip text");
  tooltipDelayLabel.setToolTipText("<HTML>The time the appearance of the tooltip window for a card is delayed.<br>\nIf set to zero, the tooltip window won't be shown at all.");
  tooltipDelay.setMajorTickSpacing(1000);
  tooltipDelay.setMaximum(5000);
  tooltipDelay.setMinorTickSpacing(100);
  tooltipDelay.setPaintLabels(true);
  tooltipDelay.setPaintTicks(true);
  tooltipDelay.setSnapToTicks(true);
  tooltipDelay.setToolTipText("<HTML>The time the appearance of the tooltip window for a card is delayed.<br>\nIf set to zero, the tooltip window won't be shown at all.");
  tooltipDelay.setValue(300);
  javax.swing.GroupLayout main_cardLayout=new javax.swing.GroupLayout(main_card);
  main_card.setLayout(main_cardLayout);
  main_cardLayout.setHorizontalGroup(main_cardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(main_cardLayout.createSequentialGroup().addGap(6,6,6).addGroup(main_cardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(tooltipDelayLabel,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(displayBigCardsInHand,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(tooltipDelay,javax.swing.GroupLayout.Alignment.TRAILING,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addGroup(main_cardLayout.createSequentialGroup().addComponent(showCardName).addGap(0,0,Short.MAX_VALUE))).addContainerGap()));
  main_cardLayout.setVerticalGroup(main_cardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(main_cardLayout.createSequentialGroup().addComponent(displayBigCardsInHand).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(showCardName).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(tooltipDelayLabel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(tooltipDelay,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  main_game.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Game"));
  nonLandPermanentsInOnePile.setSelected(true);
  nonLandPermanentsInOnePile.setLabel("Put non-land permanents in one pile");
  nonLandPermanentsInOnePile.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      nonLandPermanentsInOnePileActionPerformed(evt);
    }
  }
);
  showPlayerNamesPermanently.setSelected(true);
  showPlayerNamesPermanently.setText("Show player names on avatar permanently");
  showPlayerNamesPermanently.setToolTipText("Instead showing the names only if you hover over the avatar with the mouse, the name is shown all the time.");
  showPlayerNamesPermanently.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
  showPlayerNamesPermanently.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      showPlayerNamesPermanentlyActionPerformed(evt);
    }
  }
);
  showAbilityPickerForced.setSelected(true);
  showAbilityPickerForced.setText("Show ability picker for abilities or spells without costs");
  showAbilityPickerForced.setToolTipText("This prevents you from accidently activating abilities without other costs than tapping or casting spells with 0 mana costs.");
  showAbilityPickerForced.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
  showAbilityPickerForced.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      showAbilityPickerForcedActionPerformed(evt);
    }
  }
);
  cbAllowRequestToShowHandCards.setSelected(true);
  cbAllowRequestToShowHandCards.setText("Allow requests from players and spectators to show your hand cards");
  cbAllowRequestToShowHandCards.setToolTipText("<html>This is the default setting used for your matches. If activated other players or spectators<br>\nof your match can send a request so you can allow them to see your hand cards.");
  cbAllowRequestToShowHandCards.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
  cbAllowRequestToShowHandCards.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbAllowRequestToShowHandCardsActionPerformed(evt);
    }
  }
);
  cbShowStormCounter.setSelected(true);
  cbShowStormCounter.setText("Show the number of spell casts during the current turn");
  cbShowStormCounter.setToolTipText("<html>Adds a little box left to the short keys line with the number<br>\nof spells already cast during the current turn (storm counter).");
  cbShowStormCounter.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
  cbShowStormCounter.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbShowStormCounterActionPerformed(evt);
    }
  }
);
  cbConfirmEmptyManaPool.setSelected(true);
  cbConfirmEmptyManaPool.setText("Confirm if you want to pass a phase/step but there is still mana in your mana pool");
  cbConfirmEmptyManaPool.setToolTipText("<html>If activated you get a confirm message if you pass priority while stack is empty<br>\n and you still have mana in your mana pool.");
  cbConfirmEmptyManaPool.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
  cbConfirmEmptyManaPool.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbConfirmEmptyManaPoolActionPerformed(evt);
    }
  }
);
  cbAskMoveToGraveOrder.setSelected(true);
  cbAskMoveToGraveOrder.setText("Ask player for setting order cards go to graveyard");
  cbAskMoveToGraveOrder.setToolTipText("<html>If activated and multiple cards go to the graveyard at the same time<br>\nthe player is asked to set the order of the cards.");
  cbAskMoveToGraveOrder.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
  cbAskMoveToGraveOrder.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbAskMoveToGraveOrderActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout main_gameLayout=new javax.swing.GroupLayout(main_game);
  main_game.setLayout(main_gameLayout);
  main_gameLayout.setHorizontalGroup(main_gameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(main_gameLayout.createSequentialGroup().addContainerGap().addGroup(main_gameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,false).addComponent(showPlayerNamesPermanently,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(nonLandPermanentsInOnePile,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(showAbilityPickerForced).addComponent(cbConfirmEmptyManaPool,javax.swing.GroupLayout.DEFAULT_SIZE,485,Short.MAX_VALUE).addComponent(cbAllowRequestToShowHandCards,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(cbShowStormCounter,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(cbAskMoveToGraveOrder,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addContainerGap(7,Short.MAX_VALUE)));
  main_gameLayout.setVerticalGroup(main_gameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(main_gameLayout.createSequentialGroup().addComponent(nonLandPermanentsInOnePile).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(showPlayerNamesPermanently).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(showAbilityPickerForced).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cbAllowRequestToShowHandCards).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cbShowStormCounter).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cbConfirmEmptyManaPool).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cbAskMoveToGraveOrder).addContainerGap()));
  nonLandPermanentsInOnePile.getAccessibleContext().setAccessibleName("nonLandPermanentsInOnePile");
  main_gamelog.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Game log"));
  cbGameLogAutoSave.setSelected(true);
  cbGameLogAutoSave.setText("Auto save game logs     (to \"../Mage.Client/gamelogs/\" directory)");
  cbGameLogAutoSave.setToolTipText("The logs of all your games will be saved to the mentioned folder if this option is switched on.");
  cbGameLogAutoSave.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbGameLogAutoSaveActionPerformed(evt);
    }
  }
);
  cbDraftLogAutoSave.setSelected(true);
  cbDraftLogAutoSave.setText("Auto save draft logs     (to \"../Mage.Client/gamelogs/\" directory)");
  cbDraftLogAutoSave.setToolTipText("The logs of all your games will be saved to the mentioned folder if this option is switched on.");
  cbDraftLogAutoSave.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbDraftLogAutoSaveActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout main_gamelogLayout=new javax.swing.GroupLayout(main_gamelog);
  main_gamelog.setLayout(main_gamelogLayout);
  main_gamelogLayout.setHorizontalGroup(main_gamelogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(main_gamelogLayout.createSequentialGroup().addContainerGap().addGroup(main_gamelogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,false).addComponent(cbDraftLogAutoSave,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(cbGameLogAutoSave,javax.swing.GroupLayout.DEFAULT_SIZE,473,Short.MAX_VALUE)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  main_gamelogLayout.setVerticalGroup(main_gamelogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(main_gamelogLayout.createSequentialGroup().addComponent(cbGameLogAutoSave).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cbDraftLogAutoSave)));
  javax.swing.GroupLayout tabMainLayout=new javax.swing.GroupLayout(tabMain);
  tabMain.setLayout(tabMainLayout);
  tabMainLayout.setHorizontalGroup(tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabMainLayout.createSequentialGroup().addContainerGap().addGroup(tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(main_card,javax.swing.GroupLayout.Alignment.TRAILING,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(main_gamelog,javax.swing.GroupLayout.Alignment.TRAILING,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addGroup(tabMainLayout.createSequentialGroup().addComponent(main_game,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addGap(0,0,Short.MAX_VALUE))).addContainerGap()));
  tabMainLayout.setVerticalGroup(tabMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabMainLayout.createSequentialGroup().addContainerGap().addComponent(main_card,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(main_game,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(main_gamelog,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()));
  main_card.getAccessibleContext().setAccessibleName("Game panel");
  tabsPanel.addTab("Main",tabMain);
  guiSize_font.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Font"));
  guiSize_font.setLayout(new java.awt.BorderLayout());
  fontSizeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
  fontSizeLabel.setText("Font Size");
  fontSizeLabel.setToolTipText("<HTML>The size of the font used to display text.");
  guiSize_font.add(fontSizeLabel,java.awt.BorderLayout.CENTER);
  sliderFontSize.setMajorTickSpacing(1);
  sliderFontSize.setMaximum(30);
  sliderFontSize.setMinimum(10);
  sliderFontSize.setMinorTickSpacing(1);
  sliderFontSize.setPaintLabels(true);
  sliderFontSize.setPaintTicks(true);
  sliderFontSize.setSnapToTicks(true);
  sliderFontSize.setToolTipText("<HTML>The time the appearance of the tooltip window for a card is delayed.<br>\nIf set to zero, the tooltip window won't be shown at all.");
  guiSize_font.add(sliderFontSize,java.awt.BorderLayout.PAGE_START);
  javax.swing.GroupLayout tabGuiSizeLayout=new javax.swing.GroupLayout(tabGuiSize);
  tabGuiSize.setLayout(tabGuiSizeLayout);
  tabGuiSizeLayout.setHorizontalGroup(tabGuiSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabGuiSizeLayout.createSequentialGroup().addContainerGap().addComponent(guiSize_font,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  tabGuiSizeLayout.setVerticalGroup(tabGuiSizeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabGuiSizeLayout.createSequentialGroup().addContainerGap().addComponent(guiSize_font,javax.swing.GroupLayout.PREFERRED_SIZE,95,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(332,Short.MAX_VALUE)));
  tabsPanel.addTab("GUI Size",tabGuiSize);
  jLabelHeadLine.setText("Choose phases your game will stop on if not skipped by a skip action (e.g. F6):");
  jLabelYourTurn.setText("Your turn");
  jLabelOpponentsTurn.setText("Opponent(s) turn");
  jLabelUpkeep.setText("Upkeep:");
  jLabelDraw.setText("Draw:");
  jLabelMain1.setText("Main:");
  jLabelBeforeCombat.setText("Before combat:");
  jLabelEndofCombat.setText("End of combat:");
  jLabelMain2.setText("Main 2:");
  jLabelEndOfTurn.setText("End of turn:");
  phases_stopSettings.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Stop settings"));
  phases_stopSettings.setLayout(new java.awt.GridLayout(7,1));
  cbStopAttack.setSelected(true);
  cbStopAttack.setText("Stop on declare attackers step if you skip steps (F4/F5/F7) and attackers are available");
  cbStopAttack.setToolTipText("If you use F4, F5 or F7 to skip steps, you stop on declare attackers step if attackers are available. If this option is not activated, you also skip the declare attackers step with this actions. F9 does always skip the declare attackers step.");
  cbStopAttack.setActionCommand("");
  cbStopAttack.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbStopAttackActionPerformed(evt);
    }
  }
);
  phases_stopSettings.add(cbStopAttack);
  cbStopBlock.setText("Stop on your declare blockers step also if no blockers available");
  cbStopBlock.setToolTipText("Also if you have no blockers to declare, the game stops at the declare blockers step.");
  cbStopBlock.setActionCommand("");
  cbStopBlock.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbStopBlockActionPerformed(evt);
    }
  }
);
  phases_stopSettings.add(cbStopBlock);
  cbStopOnAllMain.setText("Skip with F7 to next main phase (if not activated skip always to your next main phase)");
  cbStopOnAllMain.setToolTipText("If activated F7 skips to next main phases (regardless of the active players).");
  cbStopOnAllMain.setActionCommand("");
  cbStopOnAllMain.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbStopOnAllMainActionPerformed(evt);
    }
  }
);
  phases_stopSettings.add(cbStopOnAllMain);
  cbStopOnAllEnd.setText("Skip with F5 to next end step (if not activated only to end steps of opponents)");
  cbStopOnAllEnd.setToolTipText("If activated - F5 skips to the next end step (regardless of the current player)");
  cbStopOnAllEnd.setActionCommand("");
  cbStopOnAllEnd.setPreferredSize(new java.awt.Dimension(300,25));
  cbStopOnAllEnd.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbStopOnAllEndActionPerformed(evt);
    }
  }
);
  phases_stopSettings.add(cbStopOnAllEnd);
  cbPassPriorityCast.setText("Pass priority automatically after you have put a spell on the stack");
  cbPassPriorityCast.setToolTipText("If activated the system passes priority automatically for you if you have put a spell on the stack.");
  cbPassPriorityCast.setActionCommand("");
  cbPassPriorityCast.setPreferredSize(new java.awt.Dimension(300,25));
  cbPassPriorityCast.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbPassPriorityCastActionPerformed(evt);
    }
  }
);
  phases_stopSettings.add(cbPassPriorityCast);
  cbPassPriorityActivation.setText("Pass priority automatically after you have put an activated ability on the stack");
  cbPassPriorityActivation.setToolTipText("If activated the system passes priority for you automatically after you have put an activated ability on the stack.");
  cbPassPriorityActivation.setActionCommand("");
  cbPassPriorityActivation.setPreferredSize(new java.awt.Dimension(300,25));
  cbPassPriorityActivation.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbPassPriorityActivationActionPerformed(evt);
    }
  }
);
  phases_stopSettings.add(cbPassPriorityActivation);
  cbAutoOrderTrigger.setText("Set order for your triggers automatically if all have the same text");
  cbAutoOrderTrigger.setToolTipText("<HTML>If activated the order to put on the stack your triggers that trigger at the same time<br/>\nis set automatically if all have the same text.");
  cbAutoOrderTrigger.setActionCommand("");
  cbAutoOrderTrigger.setPreferredSize(new java.awt.Dimension(300,25));
  cbAutoOrderTrigger.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbAutoOrderTriggerActionPerformed(evt);
    }
  }
);
  phases_stopSettings.add(cbAutoOrderTrigger);
  javax.swing.GroupLayout tabPhasesLayout=new javax.swing.GroupLayout(tabPhases);
  tabPhases.setLayout(tabPhasesLayout);
  tabPhasesLayout.setHorizontalGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabPhasesLayout.createSequentialGroup().addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabPhasesLayout.createSequentialGroup().addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabPhasesLayout.createSequentialGroup().addGap(20,20,20).addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabPhasesLayout.createSequentialGroup().addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabelUpkeep).addComponent(jLabelBeforeCombat).addComponent(jLabelEndofCombat).addComponent(jLabelMain2).addComponent(jLabelEndOfTurn)).addGap(77,77,77).addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabPhasesLayout.createSequentialGroup().addGap(2,2,2).addComponent(jLabelYourTurn).addGap(32,32,32).addComponent(jLabelOpponentsTurn)).addGroup(tabPhasesLayout.createSequentialGroup().addGap(13,13,13).addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(checkBoxDrawYou).addComponent(checkBoxUpkeepYou).addComponent(checkBoxMainYou).addComponent(checkBoxBeforeCYou).addComponent(checkBoxEndOfCYou).addComponent(checkBoxMain2You).addComponent(checkBoxEndTurnYou)).addGap(78,78,78).addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(checkBoxUpkeepOthers).addComponent(checkBoxBeforeCOthers).addComponent(checkBoxMainOthers).addComponent(checkBoxEndOfCOthers).addComponent(checkBoxDrawOthers).addComponent(checkBoxMain2Others).addComponent(checkBoxEndTurnOthers))))).addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING,false).addComponent(jLabelMain1,javax.swing.GroupLayout.Alignment.LEADING,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(jLabelDraw,javax.swing.GroupLayout.Alignment.LEADING,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)))).addGroup(tabPhasesLayout.createSequentialGroup().addContainerGap().addComponent(jLabelHeadLine))).addGap(0,0,Short.MAX_VALUE)).addGroup(tabPhasesLayout.createSequentialGroup().addContainerGap().addComponent(phases_stopSettings,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE))).addContainerGap()));
  tabPhasesLayout.setVerticalGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabPhasesLayout.createSequentialGroup().addContainerGap().addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(tabPhasesLayout.createSequentialGroup().addComponent(jLabelOpponentsTurn).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(checkBoxUpkeepOthers)).addGroup(tabPhasesLayout.createSequentialGroup().addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addGroup(tabPhasesLayout.createSequentialGroup().addComponent(jLabelHeadLine).addGap(20,20,20)).addComponent(jLabelYourTurn)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(checkBoxUpkeepYou).addComponent(jLabelUpkeep)))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jLabelDraw).addComponent(checkBoxDrawYou).addComponent(checkBoxDrawOthers)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jLabelMain1).addComponent(checkBoxMainYou).addComponent(checkBoxMainOthers)).addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabPhasesLayout.createSequentialGroup().addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jLabelBeforeCombat,javax.swing.GroupLayout.Alignment.TRAILING).addComponent(checkBoxBeforeCYou,javax.swing.GroupLayout.Alignment.TRAILING))).addGroup(tabPhasesLayout.createSequentialGroup().addGap(6,6,6).addComponent(checkBoxBeforeCOthers))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jLabelEndofCombat).addComponent(checkBoxEndOfCYou).addComponent(checkBoxEndOfCOthers)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(jLabelMain2).addComponent(checkBoxMain2You).addComponent(checkBoxMain2Others)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(tabPhasesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(checkBoxEndTurnYou).addComponent(jLabelEndOfTurn).addComponent(checkBoxEndTurnOthers)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(phases_stopSettings,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  tabsPanel.addTab("Phases & Priority",tabPhases);
  panelCardImages.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Card images:"));
  cbUseDefaultImageFolder.setText("Use default location to save images");
  cbUseDefaultImageFolder.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbUseDefaultImageFolderActionPerformed(evt);
    }
  }
);
  txtImageFolderPath.setToolTipText("The selected image will be used as background picture. You have to restart MAGE to view a changed background image.");
  btnBrowseImageLocation.setText("Browse...");
  btnBrowseImageLocation.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnBrowseImageLocationActionPerformed(evt);
    }
  }
);
  cbCheckForNewImages.setText("Check for new images on startup");
  cbCheckForNewImages.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbCheckForNewImagesActionPerformed(evt);
    }
  }
);
  cbSaveToZipFiles.setText("Store images in zip files");
  cbSaveToZipFiles.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbSaveToZipFilesActionPerformed(evt);
    }
  }
);
  cbPreferedImageLanguage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Item 1","Item 2","Item 3","Item 4"}));
  labelPreferedImageLanguage.setText("Prefered image language:");
  labelPreferedImageLanguage.setFocusable(false);
  javax.swing.GroupLayout panelCardImagesLayout=new javax.swing.GroupLayout(panelCardImages);
  panelCardImages.setLayout(panelCardImagesLayout);
  panelCardImagesLayout.setHorizontalGroup(panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(panelCardImagesLayout.createSequentialGroup().addGroup(panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(panelCardImagesLayout.createSequentialGroup().addGroup(panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(cbUseDefaultImageFolder).addComponent(cbCheckForNewImages).addGroup(panelCardImagesLayout.createSequentialGroup().addGroup(panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING,false).addGroup(javax.swing.GroupLayout.Alignment.LEADING,panelCardImagesLayout.createSequentialGroup().addContainerGap().addComponent(labelPreferedImageLanguage)).addComponent(cbSaveToZipFiles,javax.swing.GroupLayout.Alignment.LEADING)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(cbPreferedImageLanguage,javax.swing.GroupLayout.PREFERRED_SIZE,153,javax.swing.GroupLayout.PREFERRED_SIZE))).addGap(0,190,Short.MAX_VALUE)).addGroup(panelCardImagesLayout.createSequentialGroup().addGap(24,24,24).addComponent(txtImageFolderPath).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnBrowseImageLocation))).addContainerGap()));
  panelCardImagesLayout.setVerticalGroup(panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(panelCardImagesLayout.createSequentialGroup().addContainerGap().addComponent(cbUseDefaultImageFolder).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(txtImageFolderPath,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(btnBrowseImageLocation)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(cbCheckForNewImages).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(cbSaveToZipFiles).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(panelCardImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(cbPreferedImageLanguage,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(labelPreferedImageLanguage)).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  panelBackgroundImages.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Background images setting:"));
  cbUseDefaultBackground.setText("Use default image");
  cbUseDefaultBackground.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbUseDefaultBackgroundActionPerformed(evt);
    }
  }
);
  txtBackgroundImagePath.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      txtBackgroundImagePathActionPerformed(evt);
    }
  }
);
  btnBrowseBackgroundImage.setText("Browse...");
  btnBrowseBackgroundImage.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnBrowseBackgroundImageActionPerformed(evt);
    }
  }
);
  txtBattlefieldImagePath.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      txtBattlefieldImagePathActionPerformed(evt);
    }
  }
);
  btnBrowseBattlefieldImage.setText("Browse...");
  btnBrowseBattlefieldImage.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnBrowseBattlefieldImageActionPerformed(evt);
    }
  }
);
  cbUseDefaultBattleImage.setText("Use default battlefield image");
  cbUseDefaultBattleImage.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbUseDefaultBattleImageActionPerformed(evt);
    }
  }
);
  cbUseRandomBattleImage.setText("Select random battlefield image");
  cbUseRandomBattleImage.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbUseRandomBattleImageActionPerformed(evt);
    }
  }
);
  jLabel14.setText("Background:");
  jLabel15.setText("Battlefield:");
  javax.swing.GroupLayout panelBackgroundImagesLayout=new javax.swing.GroupLayout(panelBackgroundImages);
  panelBackgroundImages.setLayout(panelBackgroundImagesLayout);
  panelBackgroundImagesLayout.setHorizontalGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(panelBackgroundImagesLayout.createSequentialGroup().addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(panelBackgroundImagesLayout.createSequentialGroup().addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(panelBackgroundImagesLayout.createSequentialGroup().addGap(19,19,19).addComponent(jLabel14)).addGroup(panelBackgroundImagesLayout.createSequentialGroup().addGap(25,25,25).addComponent(jLabel15))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(txtBackgroundImagePath).addComponent(txtBattlefieldImagePath)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(btnBrowseBackgroundImage,javax.swing.GroupLayout.Alignment.TRAILING).addComponent(btnBrowseBattlefieldImage,javax.swing.GroupLayout.Alignment.TRAILING))).addGroup(panelBackgroundImagesLayout.createSequentialGroup().addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(cbUseRandomBattleImage).addComponent(cbUseDefaultBattleImage).addComponent(cbUseDefaultBackground)).addGap(0,0,Short.MAX_VALUE))).addContainerGap()));
  panelBackgroundImagesLayout.setVerticalGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(panelBackgroundImagesLayout.createSequentialGroup().addContainerGap().addComponent(cbUseDefaultBackground).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(txtBackgroundImagePath,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(btnBrowseBackgroundImage).addComponent(jLabel14)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(cbUseDefaultBattleImage).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(cbUseRandomBattleImage).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addGroup(panelBackgroundImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(txtBattlefieldImagePath,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(btnBrowseBattlefieldImage).addComponent(jLabel15))));
  javax.swing.GroupLayout tabImagesLayout=new javax.swing.GroupLayout(tabImages);
  tabImages.setLayout(tabImagesLayout);
  tabImagesLayout.setHorizontalGroup(tabImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabImagesLayout.createSequentialGroup().addContainerGap().addGroup(tabImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(panelCardImages,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(panelBackgroundImages,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addContainerGap()));
  tabImagesLayout.setVerticalGroup(tabImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabImagesLayout.createSequentialGroup().addContainerGap().addComponent(panelCardImages,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(panelBackgroundImages,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  tabsPanel.addTab("Images",tabImages);
  sounds_clips.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Clips"));
  sounds_clips.setLayout(new java.awt.GridLayout(4,0));
  cbEnableGameSounds.setText("Enable game sounds");
  cbEnableGameSounds.setToolTipText("Sounds that will be played for certain actions (e.g. play land, attack, etc.) during the game.");
  cbEnableGameSounds.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbEnableGameSoundsActionPerformed(evt);
    }
  }
);
  sounds_clips.add(cbEnableGameSounds);
  cbEnableDraftSounds.setText("Enable draft sounds");
  cbEnableDraftSounds.setToolTipText("Sounds that will be played during drafting for card picking or warining if time runs out.");
  cbEnableDraftSounds.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbEnableDraftSoundsActionPerformed(evt);
    }
  }
);
  sounds_clips.add(cbEnableDraftSounds);
  cbEnableSkipButtonsSounds.setText("Enable skip button sounds");
  cbEnableSkipButtonsSounds.setToolTipText("Sounds that will be played if a priority skip action (F4/F5/F7/F9) or cancel skip action (F3) is used.");
  cbEnableSkipButtonsSounds.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbEnableSkipButtonsSoundsActionPerformed(evt);
    }
  }
);
  sounds_clips.add(cbEnableSkipButtonsSounds);
  cbEnableOtherSounds.setText("Enable other sounds");
  cbEnableOtherSounds.setToolTipText("Sounds that will be played for actions outside of games (e.g. whisper, player joins your game, player submits a deck ...).");
  cbEnableOtherSounds.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbEnableOtherSoundsActionPerformed(evt);
    }
  }
);
  sounds_clips.add(cbEnableOtherSounds);
  sounds_backgroundMusic.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Music"));
  cbEnableBattlefieldBGM.setText("Play music during match");
  cbEnableBattlefieldBGM.setToolTipText("During your matches music will be played from the seleced folder.");
  cbEnableBattlefieldBGM.setActionCommand("Play automatically during matches");
  cbEnableBattlefieldBGM.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbEnableBattlefieldBGMActionPerformed(evt);
    }
  }
);
  jLabel16.setText("Playing from folder:");
  jLabel16.setToolTipText("");
  txtBattlefieldIBGMPath.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      txtBattlefieldIBGMPathActionPerformed(evt);
    }
  }
);
  btnBattlefieldBGMBrowse.setText("Browse...");
  btnBattlefieldBGMBrowse.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      btnBattlefieldBGMBrowseActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout sounds_backgroundMusicLayout=new javax.swing.GroupLayout(sounds_backgroundMusic);
  sounds_backgroundMusic.setLayout(sounds_backgroundMusicLayout);
  sounds_backgroundMusicLayout.setHorizontalGroup(sounds_backgroundMusicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(sounds_backgroundMusicLayout.createSequentialGroup().addContainerGap().addComponent(jLabel16).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(txtBattlefieldIBGMPath).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(btnBattlefieldBGMBrowse)).addGroup(sounds_backgroundMusicLayout.createSequentialGroup().addComponent(cbEnableBattlefieldBGM).addGap(0,0,Short.MAX_VALUE)));
  sounds_backgroundMusicLayout.setVerticalGroup(sounds_backgroundMusicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(sounds_backgroundMusicLayout.createSequentialGroup().addComponent(cbEnableBattlefieldBGM).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(sounds_backgroundMusicLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(txtBattlefieldIBGMPath,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(btnBattlefieldBGMBrowse).addComponent(jLabel16))));
  javax.swing.GroupLayout tabSoundsLayout=new javax.swing.GroupLayout(tabSounds);
  tabSounds.setLayout(tabSoundsLayout);
  tabSoundsLayout.setHorizontalGroup(tabSoundsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabSoundsLayout.createSequentialGroup().addContainerGap().addGroup(tabSoundsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(sounds_clips,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(sounds_backgroundMusic,javax.swing.GroupLayout.Alignment.TRAILING,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addContainerGap()));
  tabSoundsLayout.setVerticalGroup(tabSoundsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabSoundsLayout.createSequentialGroup().addContainerGap().addComponent(sounds_clips,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(sounds_backgroundMusic,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  sounds_clips.getAccessibleContext().setAccessibleDescription("");
  tabsPanel.addTab("Sounds",tabSounds);
  avatarPane.setMaximumSize(new java.awt.Dimension(508,772));
  avatarPane.setMinimumSize(new java.awt.Dimension(508,772));
  avatarPane.setPreferredSize(new java.awt.Dimension(508,772));
  avatarPanel.setMaximumSize(new java.awt.Dimension(508,772));
  avatarPanel.setMinimumSize(new java.awt.Dimension(508,772));
  avatarPanel.setPreferredSize(new java.awt.Dimension(508,772));
  avatarPanel.setLayout(new java.awt.GridLayout(6,4,20,20));
  jPanel10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel10.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel10.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel10.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel10Layout=new javax.swing.GroupLayout(jPanel10);
  jPanel10.setLayout(jPanel10Layout);
  jPanel10Layout.setHorizontalGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel10Layout.setVerticalGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel10);
  jPanel11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel11.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel11.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel11.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel11Layout=new javax.swing.GroupLayout(jPanel11);
  jPanel11.setLayout(jPanel11Layout);
  jPanel11Layout.setHorizontalGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel11Layout.setVerticalGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel11);
  jPanel12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel12.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel12.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel12.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel12Layout=new javax.swing.GroupLayout(jPanel12);
  jPanel12.setLayout(jPanel12Layout);
  jPanel12Layout.setHorizontalGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel12Layout.setVerticalGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel12);
  jPanel13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel13.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel13.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel13.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel13Layout=new javax.swing.GroupLayout(jPanel13);
  jPanel13.setLayout(jPanel13Layout);
  jPanel13Layout.setHorizontalGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel13Layout.setVerticalGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,0,Short.MAX_VALUE));
  avatarPanel.add(jPanel13);
  jPanel14.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel14.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel14.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel14.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel14Layout=new javax.swing.GroupLayout(jPanel14);
  jPanel14.setLayout(jPanel14Layout);
  jPanel14Layout.setHorizontalGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel14Layout.setVerticalGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel14);
  jPanel15.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel15.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel15.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel15.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel15Layout=new javax.swing.GroupLayout(jPanel15);
  jPanel15.setLayout(jPanel15Layout);
  jPanel15Layout.setHorizontalGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel15Layout.setVerticalGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel15);
  jPanel16.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel16.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel16.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel16.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel16Layout=new javax.swing.GroupLayout(jPanel16);
  jPanel16.setLayout(jPanel16Layout);
  jPanel16Layout.setHorizontalGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel16Layout.setVerticalGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel16);
  jPanel17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel17.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel17.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel17.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel17Layout=new javax.swing.GroupLayout(jPanel17);
  jPanel17.setLayout(jPanel17Layout);
  jPanel17Layout.setHorizontalGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel17Layout.setVerticalGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel17);
  jPanel18.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel18.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel18.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel18.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel18Layout=new javax.swing.GroupLayout(jPanel18);
  jPanel18.setLayout(jPanel18Layout);
  jPanel18Layout.setHorizontalGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel18Layout.setVerticalGroup(jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel18);
  jPanel19.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel19.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel19.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel19.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel19Layout=new javax.swing.GroupLayout(jPanel19);
  jPanel19.setLayout(jPanel19Layout);
  jPanel19Layout.setHorizontalGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel19Layout.setVerticalGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel19);
  jPanel20.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel20.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel20.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel20.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel20Layout=new javax.swing.GroupLayout(jPanel20);
  jPanel20.setLayout(jPanel20Layout);
  jPanel20Layout.setHorizontalGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel20Layout.setVerticalGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel20);
  jPanel21.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel21.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel21.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel21.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel21Layout=new javax.swing.GroupLayout(jPanel21);
  jPanel21.setLayout(jPanel21Layout);
  jPanel21Layout.setHorizontalGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel21Layout.setVerticalGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel21);
  jPanel22.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel22.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel22.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel22.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel22Layout=new javax.swing.GroupLayout(jPanel22);
  jPanel22.setLayout(jPanel22Layout);
  jPanel22Layout.setHorizontalGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel22Layout.setVerticalGroup(jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel22);
  jPanel23.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel23.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel23.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel23.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel23Layout=new javax.swing.GroupLayout(jPanel23);
  jPanel23.setLayout(jPanel23Layout);
  jPanel23Layout.setHorizontalGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel23Layout.setVerticalGroup(jPanel23Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel23);
  jPanel24.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel24.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel24.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel24.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel24Layout=new javax.swing.GroupLayout(jPanel24);
  jPanel24.setLayout(jPanel24Layout);
  jPanel24Layout.setHorizontalGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel24Layout.setVerticalGroup(jPanel24Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel24);
  jPanel25.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel25.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel25.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel25.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel25Layout=new javax.swing.GroupLayout(jPanel25);
  jPanel25.setLayout(jPanel25Layout);
  jPanel25Layout.setHorizontalGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel25Layout.setVerticalGroup(jPanel25Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel25);
  jPanel26.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel26.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel26.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel26.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel26Layout=new javax.swing.GroupLayout(jPanel26);
  jPanel26.setLayout(jPanel26Layout);
  jPanel26Layout.setHorizontalGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel26Layout.setVerticalGroup(jPanel26Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel26);
  jPanel27.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel27.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel27.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel27.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel27Layout=new javax.swing.GroupLayout(jPanel27);
  jPanel27.setLayout(jPanel27Layout);
  jPanel27Layout.setHorizontalGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel27Layout.setVerticalGroup(jPanel27Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel27);
  jPanel28.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel28.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel28.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel28.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel28Layout=new javax.swing.GroupLayout(jPanel28);
  jPanel28.setLayout(jPanel28Layout);
  jPanel28Layout.setHorizontalGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel28Layout.setVerticalGroup(jPanel28Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel28);
  jPanel29.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel29.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel29.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel29.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel29Layout=new javax.swing.GroupLayout(jPanel29);
  jPanel29.setLayout(jPanel29Layout);
  jPanel29Layout.setHorizontalGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel29Layout.setVerticalGroup(jPanel29Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel29);
  jPanel30.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel30.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel30.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel30.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel30Layout=new javax.swing.GroupLayout(jPanel30);
  jPanel30.setLayout(jPanel30Layout);
  jPanel30Layout.setHorizontalGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel30Layout.setVerticalGroup(jPanel30Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel30);
  jPanel31.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel31.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel31.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel31.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel31Layout=new javax.swing.GroupLayout(jPanel31);
  jPanel31.setLayout(jPanel31Layout);
  jPanel31Layout.setHorizontalGroup(jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel31Layout.setVerticalGroup(jPanel31Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel31);
  jPanel32.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel32.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel32.setMinimumSize(new java.awt.Dimension(102,102));
  jPanel32.setPreferredSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel32Layout=new javax.swing.GroupLayout(jPanel32);
  jPanel32.setLayout(jPanel32Layout);
  jPanel32Layout.setHorizontalGroup(jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel32Layout.setVerticalGroup(jPanel32Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel32);
  jPanel33.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204,204,204),1,true));
  jPanel33.setMaximumSize(new java.awt.Dimension(102,102));
  jPanel33.setMinimumSize(new java.awt.Dimension(102,102));
  javax.swing.GroupLayout jPanel33Layout=new javax.swing.GroupLayout(jPanel33);
  jPanel33.setLayout(jPanel33Layout);
  jPanel33Layout.setHorizontalGroup(jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  jPanel33Layout.setVerticalGroup(jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0,110,Short.MAX_VALUE));
  avatarPanel.add(jPanel33);
  avatarPane.setViewportView(avatarPanel);
  javax.swing.GroupLayout tabAvatarsLayout=new javax.swing.GroupLayout(tabAvatars);
  tabAvatars.setLayout(tabAvatarsLayout);
  tabAvatarsLayout.setHorizontalGroup(tabAvatarsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabAvatarsLayout.createSequentialGroup().addComponent(avatarPane,javax.swing.GroupLayout.PREFERRED_SIZE,527,javax.swing.GroupLayout.PREFERRED_SIZE).addGap(0,0,Short.MAX_VALUE)));
  tabAvatarsLayout.setVerticalGroup(tabAvatarsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(avatarPane,javax.swing.GroupLayout.PREFERRED_SIZE,438,Short.MAX_VALUE));
  tabsPanel.addTab("Avatars",tabAvatars);
  lblProxyType.setText("Proxy:");
  cbProxyType.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      cbProxyTypeActionPerformed(evt);
    }
  }
);
  pnlProxySettings.setBorder(javax.swing.BorderFactory.createEtchedBorder());
  lblProxyServer.setText("Server:");
  lblProxyPort.setText("Port:");
  txtProxyPort.addKeyListener(new java.awt.event.KeyAdapter(){
    public void keyTyped(    java.awt.event.KeyEvent evt){
      txtProxyPortkeyTyped(evt);
    }
  }
);
  lblProxyUserName.setText("User Name:");
  lblProxyPassword.setText("Password:");
  txtPasswordField.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      txtPasswordFieldActionPerformed(evt);
    }
  }
);
  rememberPswd.setText("Remember Password");
  rememberPswd.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      rememberPswdActionPerformed(evt);
    }
  }
);
  jLabel11.setFont(new java.awt.Font("Tahoma",2,10));
  jLabel11.setText("Note: password won't be encrypted!");
  javax.swing.GroupLayout pnlProxyLayout=new javax.swing.GroupLayout(pnlProxy);
  pnlProxy.setLayout(pnlProxyLayout);
  pnlProxyLayout.setHorizontalGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlProxyLayout.createSequentialGroup().addContainerGap().addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlProxyLayout.createSequentialGroup().addComponent(rememberPswd).addGap(47,47,47).addComponent(jLabel11).addGap(34,34,34)).addGroup(pnlProxyLayout.createSequentialGroup().addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(lblProxyPort).addComponent(lblProxyPassword).addComponent(lblProxyServer).addComponent(lblProxyUserName)).addGap(19,19,19).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(txtProxyPort,javax.swing.GroupLayout.PREFERRED_SIZE,58,javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING,false).addComponent(txtPasswordField,javax.swing.GroupLayout.Alignment.LEADING).addComponent(txtProxyUserName,javax.swing.GroupLayout.Alignment.LEADING,javax.swing.GroupLayout.PREFERRED_SIZE,148,javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(txtProxyServer)).addContainerGap()))));
  pnlProxyLayout.setVerticalGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlProxyLayout.createSequentialGroup().addGap(6,6,6).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(txtProxyServer,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(lblProxyServer)).addGap(8,8,8).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(lblProxyPort).addComponent(txtProxyPort,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(txtProxyUserName,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(lblProxyUserName)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(txtPasswordField,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addComponent(lblProxyPassword)).addGap(18,18,18).addGroup(pnlProxyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(rememberPswd).addComponent(jLabel11)).addContainerGap(25,Short.MAX_VALUE)));
  javax.swing.GroupLayout pnlProxySettingsLayout=new javax.swing.GroupLayout(pnlProxySettings);
  pnlProxySettings.setLayout(pnlProxySettingsLayout);
  pnlProxySettingsLayout.setHorizontalGroup(pnlProxySettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlProxySettingsLayout.createSequentialGroup().addContainerGap().addComponent(pnlProxy,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  pnlProxySettingsLayout.setVerticalGroup(pnlProxySettingsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(pnlProxySettingsLayout.createSequentialGroup().addComponent(pnlProxy,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addContainerGap()));
  connection_servers.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(),"Servers"));
  lblURLServerList.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
  lblURLServerList.setText("URL server list:");
  lblURLServerList.setToolTipText("");
  lblURLServerList.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
  lblURLServerList.setPreferredSize(new java.awt.Dimension(110,16));
  lblURLServerList.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
  txtURLServerList.setToolTipText("The URL XMage tries to read a server list from.");
  txtURLServerList.setPreferredSize(new java.awt.Dimension(300,22));
  jLabel17.setFont(new java.awt.Font("Tahoma",2,10));
  jLabel17.setText("e.g.: http://XMage.de/files/server-list.txt");
  javax.swing.GroupLayout connection_serversLayout=new javax.swing.GroupLayout(connection_servers);
  connection_servers.setLayout(connection_serversLayout);
  connection_serversLayout.setHorizontalGroup(connection_serversLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(connection_serversLayout.createSequentialGroup().addGroup(connection_serversLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(connection_serversLayout.createSequentialGroup().addContainerGap().addComponent(lblURLServerList,javax.swing.GroupLayout.PREFERRED_SIZE,96,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(txtURLServerList,javax.swing.GroupLayout.PREFERRED_SIZE,370,javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(connection_serversLayout.createSequentialGroup().addGap(141,141,141).addComponent(jLabel17))).addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)));
  connection_serversLayout.setVerticalGroup(connection_serversLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(connection_serversLayout.createSequentialGroup().addGroup(connection_serversLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING,false).addComponent(lblURLServerList,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addComponent(txtURLServerList,javax.swing.GroupLayout.DEFAULT_SIZE,28,Short.MAX_VALUE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jLabel17)));
  javax.swing.GroupLayout tabConnectionLayout=new javax.swing.GroupLayout(tabConnection);
  tabConnection.setLayout(tabConnectionLayout);
  tabConnectionLayout.setHorizontalGroup(tabConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabConnectionLayout.createSequentialGroup().addContainerGap().addGroup(tabConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING,false).addComponent(pnlProxySettings,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE).addGroup(javax.swing.GroupLayout.Alignment.LEADING,tabConnectionLayout.createSequentialGroup().addComponent(lblProxyType).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(cbProxyType,javax.swing.GroupLayout.PREFERRED_SIZE,126,javax.swing.GroupLayout.PREFERRED_SIZE)).addComponent(connection_servers,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,Short.MAX_VALUE)).addContainerGap(16,Short.MAX_VALUE)));
  tabConnectionLayout.setVerticalGroup(tabConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(tabConnectionLayout.createSequentialGroup().addContainerGap().addComponent(connection_servers,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(tabConnectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(lblProxyType).addComponent(cbProxyType,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE)).addGap(18,18,18).addComponent(pnlProxySettings,javax.swing.GroupLayout.PREFERRED_SIZE,javax.swing.GroupLayout.DEFAULT_SIZE,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap(127,Short.MAX_VALUE)));
  pnlProxySettings.getAccessibleContext().setAccessibleDescription("");
  tabsPanel.addTab("Connection",tabConnection);
  saveButton.setLabel("Save");
  saveButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
  saveButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      saveButtonActionPerformed(evt);
    }
  }
);
  exitButton.setLabel("Exit");
  exitButton.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
  exitButton.addActionListener(new java.awt.event.ActionListener(){
    public void actionPerformed(    java.awt.event.ActionEvent evt){
      exitButtonActionPerformed(evt);
    }
  }
);
  javax.swing.GroupLayout layout=new javax.swing.GroupLayout(getContentPane());
  getContentPane().setLayout(layout);
  layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING,layout.createSequentialGroup().addContainerGap(405,Short.MAX_VALUE).addComponent(saveButton).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(exitButton,javax.swing.GroupLayout.PREFERRED_SIZE,55,javax.swing.GroupLayout.PREFERRED_SIZE).addContainerGap()).addComponent(tabsPanel,javax.swing.GroupLayout.PREFERRED_SIZE,0,Short.MAX_VALUE));
  layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(tabsPanel).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(exitButton).addComponent(saveButton)).addContainerGap()));
  pack();
}
