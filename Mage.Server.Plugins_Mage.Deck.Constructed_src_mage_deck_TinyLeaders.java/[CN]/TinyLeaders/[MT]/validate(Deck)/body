{
  boolean valid=true;
  for (  Card card : deck.getCards()) {
    if (card.getManaCost().convertedManaCost() > 3) {
      invalid.put("Mana Cost","Converted Mana Cost of " + card.getName() + " is too high");
      valid=false;
    }
  }
  for (  Card card : deck.getSideboard()) {
    if (card.getManaCost().convertedManaCost() > 3) {
      invalid.put("Commander Mana Cost","Converted Mana Cost of " + card.getName() + " is too high");
    }
  }
  if (deck.getCards().size() != 50) {
    invalid.put("Deck","Main deck must contain 50 cards including your commander: has " + deck.getCards().size() + " cards");
    valid=false;
  }
  if (deck.getSideboard().size() != 10) {
    invalid.put("Sideboard","Sideboard must contain 10 cards: has " + deck.getSideboard().size() + " cards");
    valid=false;
  }
  List<String> basicLandNames=new ArrayList<>(Arrays.asList("Forest","Island","Mountain","Swamp","Plains","Snow-Covered Forest","Snow-Covered Island","Snow-Covered Mountain","Snow-Covered Swamp","Snow-Covered Plains"));
  Map<String,Integer> counts=new HashMap<>();
  countCards(counts,deck.getCards());
  countCards(counts,deck.getSideboard());
  for (  Map.Entry<String,Integer> entry : counts.entrySet()) {
    if (entry.getValue() > 1) {
      if (!basicLandNames.contains(entry.getKey()) && !entry.getKey().equals("Relentless Rats") && !entry.getKey().equals("Shadowborn Apostle")) {
        invalid.put(entry.getKey(),"Too many: " + entry.getValue());
        valid=false;
      }
    }
  }
  for (  String bannedCard : banned) {
    if (counts.containsKey(bannedCard)) {
      invalid.put(bannedCard,"Banned");
      valid=false;
    }
  }
  Card commander=null;
  for (  Card card : deck.getCards()) {
    if (card.getName().equals(deck.getName())) {
      commander=card.copy();
    }
  }
  if (commander != null) {
    if (commander.getCardType().contains(CardType.CREATURE) && commander.getSupertype().contains("Legendary")) {
      if (!bannedCommander.contains(commander.getName())) {
        FilterMana color=CardUtil.getColorIdentity(commander);
        for (        Card card : deck.getCards()) {
          if (!cardHasValidColor(color,card)) {
            invalid.put(card.getName(),"Invalid color (" + commander.getName() + ")");
            valid=false;
          }
        }
        for (        Card card : deck.getSideboard()) {
          if (!cardHasValidColor(color,card)) {
            invalid.put(card.getName(),"Invalid color (" + commander.getName() + ")");
            valid=false;
          }
        }
      }
 else {
        invalid.put("Commander","Commander banned (" + commander.getName() + ")");
        valid=false;
      }
    }
 else {
      invalid.put("Commander","Commander invalid (" + commander.getName() + ")");
      valid=false;
    }
  }
 else {
    invalid.put("Commander",deck.getName() + " not found in main board");
    valid=false;
  }
  return valid;
}
