{
  Player player=game.getPlayer(source.getControllerId());
  Player targetPlayer=game.getPlayer(targetPointer.getFirst(game,source));
  Permanent sourcePermanent=game.getPermanentOrLKIBattlefield(source.getSourceId());
  if (player != null && targetPlayer != null && sourcePermanent != null) {
    TargetCardInLibrary target=new TargetCardInLibrary();
    player.searchLibrary(target,game,targetPlayer.getId());
    Card card=game.getCard(target.getFirstTarget());
    if (card != null) {
      TreeSet<String> choices=new TreeSet<String>();
      Collection<Card> cards=game.getCards();
      for (      Card gameCard : cards) {
        if (gameCard.getOwnerId().equals(targetPlayer.getId())) {
          choices.add(gameCard.getName());
        }
      }
      Choice cardChoice=new ChoiceImpl();
      cardChoice.setChoices(choices);
      cardChoice.clearChoice();
      while (!targetPlayer.choose(Outcome.Benefit,cardChoice,game)) {
        if (!targetPlayer.isInGame()) {
          return false;
        }
      }
      String cardName=cardChoice.getChoice();
      game.informPlayers(new StringBuilder(sourcePermanent.getName()).append(", named card: [").append(cardName).append("]").toString());
      if (!card.getName().equals(cardName) && card.getCardType().contains(CardType.CREATURE)) {
        if (player.chooseUse(outcome,new StringBuilder("Put ").append(card.getName()).append(" onto the battlefield?").toString(),source,game)) {
          player.putOntoBattlefieldWithInfo(card,game,Zone.LIBRARY,source.getSourceId());
        }
      }
    }
    targetPlayer.shuffleLibrary(game);
    return true;
  }
  return false;
}
