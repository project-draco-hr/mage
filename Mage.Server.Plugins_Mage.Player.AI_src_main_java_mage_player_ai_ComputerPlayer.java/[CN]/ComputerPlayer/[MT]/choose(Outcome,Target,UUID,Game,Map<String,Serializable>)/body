{
  if (log.isDebugEnabled())   log.debug("chooseTarget: " + outcome.toString() + ":"+ target.toString());
  UUID opponentId=game.getOpponents(playerId).iterator().next();
  if (target instanceof TargetPlayer) {
    if (outcome.isGood()) {
      if (target.canTarget(playerId,game)) {
        target.add(playerId,game);
        return true;
      }
      if (target.isRequired()) {
        if (target.canTarget(opponentId,game)) {
          target.add(opponentId,game);
          return true;
        }
      }
    }
 else {
      if (target.canTarget(opponentId,game)) {
        target.add(opponentId,game);
        return true;
      }
      if (target.isRequired()) {
        if (target.canTarget(playerId,game)) {
          target.add(playerId,game);
          return true;
        }
      }
    }
    return false;
  }
  if (target instanceof TargetDiscard) {
    findPlayables(game);
    if (unplayable.size() > 0) {
      for (int i=unplayable.size() - 1; i >= 0; i--) {
        if (target.canTarget(unplayable.values().toArray(new Card[0])[i].getId(),game)) {
          target.add(unplayable.values().toArray(new Card[0])[i].getId(),game);
          return true;
        }
      }
    }
    if (hand.size() > 0) {
      for (int i=0; i < hand.size(); i++) {
        if (target.canTarget(hand.toArray(new UUID[0])[i],game)) {
          target.add(hand.toArray(new UUID[0])[i],game);
          return true;
        }
      }
    }
    return false;
  }
  if (target instanceof TargetControlledPermanent) {
    List<Permanent> targets;
    targets=threats(playerId,((TargetControlledPermanent)target).getFilter(),game,target.getTargets());
    if (!outcome.isGood())     Collections.reverse(targets);
    for (    Permanent permanent : targets) {
      if (((TargetControlledPermanent)target).canTarget(playerId,permanent.getId(),null,game) && !target.getTargets().contains(permanent.getId())) {
        target.add(permanent.getId(),game);
        return true;
      }
    }
  }
  if (target instanceof TargetPermanent) {
    List<Permanent> targets;
    if (outcome.isGood()) {
      targets=threats(playerId,((TargetPermanent)target).getFilter(),game,target.getTargets());
    }
 else {
      targets=threats(opponentId,((TargetPermanent)target).getFilter(),game,target.getTargets());
    }
    for (    Permanent permanent : targets) {
      if (((TargetPermanent)target).canTarget(playerId,permanent.getId(),null,game) && !target.getTargets().contains(permanent.getId())) {
        target.add(permanent.getId(),game);
        return true;
      }
    }
  }
  if (target instanceof TargetCardInHand) {
    List<Card> cards=new ArrayList<Card>();
    cards.addAll(this.hand.getCards(game));
    Card pick=pickTarget(cards,outcome,target,null,game);
    if (pick != null) {
      target.add(pick.getId(),game);
      return true;
    }
  }
  if (target instanceof TargetCreatureOrPlayer) {
    List<Permanent> targets;
    TargetCreatureOrPlayer t=((TargetCreatureOrPlayer)target);
    if (outcome.isGood()) {
      targets=threats(playerId,((FilterCreatureOrPlayer)t.getFilter()).getCreatureFilter(),game,target.getTargets());
    }
 else {
      targets=threats(opponentId,((FilterCreatureOrPlayer)t.getFilter()).getCreatureFilter(),game,target.getTargets());
    }
    for (    Permanent permanent : targets) {
      List<UUID> alreadyTargetted=target.getTargets();
      if (t.canTarget(playerId,permanent.getId(),null,game)) {
        if (alreadyTargetted != null && !alreadyTargetted.contains(permanent.getId())) {
          target.add(permanent.getId(),game);
          return true;
        }
      }
    }
    if (outcome.isGood()) {
      if (target.canTarget(playerId,null,game)) {
        target.add(playerId,game);
        return true;
      }
    }
 else {
      if (target.canTarget(opponentId,null,game)) {
        target.add(opponentId,game);
        return true;
      }
    }
    if (!target.isRequired())     return false;
  }
  if (target instanceof TargetPermanentOrPlayer) {
    List<Permanent> targets;
    TargetPermanentOrPlayer t=((TargetPermanentOrPlayer)target);
    if (outcome.isGood()) {
      targets=threats(playerId,((FilterPermanentOrPlayer)t.getFilter()).getPermanentFilter(),game,target.getTargets());
    }
 else {
      targets=threats(opponentId,((FilterPermanentOrPlayer)t.getFilter()).getPermanentFilter(),game,target.getTargets());
    }
    for (    Permanent permanent : targets) {
      List<UUID> alreadyTargetted=target.getTargets();
      if (t.canTarget(permanent.getId(),game)) {
        if (alreadyTargetted != null && !alreadyTargetted.contains(permanent.getId())) {
          target.add(permanent.getId(),game);
          return true;
        }
      }
    }
    if (outcome.isGood()) {
      if (target.canTarget(playerId,null,game)) {
        target.add(playerId,game);
        return true;
      }
    }
 else {
      if (target.canTarget(opponentId,null,game)) {
        target.add(opponentId,game);
        return true;
      }
    }
    if (!target.isRequired())     return false;
  }
  return false;
}
