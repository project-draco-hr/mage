{
  if (log.isDebugEnabled()) {
    log.debug("chooseTarget: " + outcome.toString() + ":"+ target.toString());
  }
  UUID abilityControllerId=playerId;
  if (target.getTargetController() != null && target.getAbilityController() != null) {
    abilityControllerId=target.getAbilityController();
  }
  UUID opponentId=game.getOpponents(abilityControllerId).iterator().next();
  if (target instanceof TargetPlayer) {
    if (outcome.isGood()) {
      if (target.canTarget(abilityControllerId,game)) {
        target.add(abilityControllerId,game);
        return true;
      }
      if (target.isRequired(sourceId,game)) {
        if (target.canTarget(opponentId,game)) {
          target.add(opponentId,game);
          return true;
        }
      }
    }
 else {
      if (target.canTarget(opponentId,game)) {
        target.add(opponentId,game);
        return true;
      }
      if (target.isRequired(sourceId,game)) {
        if (target.canTarget(abilityControllerId,game)) {
          target.add(abilityControllerId,game);
          return true;
        }
      }
    }
    return false;
  }
  if (target instanceof TargetDiscard) {
    findPlayables(game);
    if (unplayable.size() > 0) {
      for (int i=unplayable.size() - 1; i >= 0; i--) {
        if (target.canTarget(unplayable.values().toArray(new Card[0])[i].getId(),game)) {
          target.add(unplayable.values().toArray(new Card[0])[i].getId(),game);
          if (target.isChosen()) {
            return true;
          }
        }
      }
    }
    if (hand.size() > 0) {
      for (int i=0; i < hand.size(); i++) {
        if (target.canTarget(hand.toArray(new UUID[0])[i],game)) {
          target.add(hand.toArray(new UUID[0])[i],game);
          if (target.isChosen()) {
            return true;
          }
        }
      }
    }
    return false;
  }
  if (target instanceof TargetControlledPermanent) {
    List<Permanent> targets;
    targets=threats(abilityControllerId,sourceId,((TargetControlledPermanent)target).getFilter(),game,target.getTargets());
    if (!outcome.isGood()) {
      Collections.reverse(targets);
    }
    for (    Permanent permanent : targets) {
      if (((TargetControlledPermanent)target).canTarget(abilityControllerId,permanent.getId(),sourceId,game,false) && !target.getTargets().contains(permanent.getId())) {
        target.add(permanent.getId(),game);
        return true;
      }
    }
    return false;
  }
  if (target instanceof TargetPermanent) {
    List<Permanent> targets;
    if (outcome.isCanTargetAll()) {
      targets=threats(null,sourceId,((TargetPermanent)target).getFilter(),game,target.getTargets());
    }
 else {
      if (outcome.isGood()) {
        targets=threats(abilityControllerId,sourceId,((TargetPermanent)target).getFilter(),game,target.getTargets());
      }
 else {
        targets=threats(opponentId,sourceId,((TargetPermanent)target).getFilter(),game,target.getTargets());
      }
      if (targets.isEmpty() && target.isRequired()) {
        if (!outcome.isGood()) {
          targets=threats(abilityControllerId,sourceId,((TargetPermanent)target).getFilter(),game,target.getTargets());
        }
 else {
          targets=threats(opponentId,sourceId,((TargetPermanent)target).getFilter(),game,target.getTargets());
        }
      }
    }
    for (    Permanent permanent : targets) {
      if (((TargetPermanent)target).canTarget(abilityControllerId,permanent.getId(),null,game) && !target.getTargets().contains(permanent.getId())) {
        if (target.getNumberOfTargets() == target.getTargets().size()) {
          if (outcome.isGood() && hasOpponent(permanent.getControllerId(),game)) {
            return true;
          }
          if (!outcome.isGood() && !hasOpponent(permanent.getControllerId(),game)) {
            return true;
          }
        }
        target.add(permanent.getId(),game);
        if (target.doneChosing()) {
          return true;
        }
      }
    }
    return target.isChosen();
  }
  if (target instanceof TargetCardInHand) {
    List<Card> cards=new ArrayList<>();
    for (    UUID cardId : ((TargetCardInHand)target).possibleTargets(sourceId,this.getId(),game)) {
      Card card=game.getCard(cardId);
      if (card != null) {
        cards.add(card);
      }
    }
    while ((outcome.isGood() ? target.getTargets().size() < target.getMaxNumberOfTargets() : !target.isChosen()) && !cards.isEmpty()) {
      Card pick=pickTarget(cards,outcome,target,null,game);
      if (pick != null) {
        target.addTarget(pick.getId(),null,game);
        cards.remove(pick);
      }
    }
    return target.isChosen();
  }
  if (target instanceof TargetCreatureOrPlayer) {
    List<Permanent> targets;
    TargetCreatureOrPlayer t=((TargetCreatureOrPlayer)target);
    if (outcome.isGood()) {
      targets=threats(abilityControllerId,sourceId,((FilterCreatureOrPlayer)t.getFilter()).getCreatureFilter(),game,target.getTargets());
    }
 else {
      targets=threats(opponentId,sourceId,((FilterCreatureOrPlayer)t.getFilter()).getCreatureFilter(),game,target.getTargets());
    }
    for (    Permanent permanent : targets) {
      List<UUID> alreadyTargetted=target.getTargets();
      if (t.canTarget(abilityControllerId,permanent.getId(),null,game)) {
        if (alreadyTargetted != null && !alreadyTargetted.contains(permanent.getId())) {
          target.add(permanent.getId(),game);
          return true;
        }
      }
    }
    if (outcome.isGood()) {
      if (target.canTarget(abilityControllerId,null,game)) {
        target.add(abilityControllerId,game);
        return true;
      }
    }
 else {
      if (target.canTarget(opponentId,null,game)) {
        target.add(opponentId,game);
        return true;
      }
    }
    if (!target.isRequired(sourceId,game)) {
      return false;
    }
  }
  if (target instanceof TargetPermanentOrPlayer) {
    List<Permanent> targets;
    TargetPermanentOrPlayer t=((TargetPermanentOrPlayer)target);
    List<Permanent> ownedTargets=threats(abilityControllerId,sourceId,((FilterPermanentOrPlayer)t.getFilter()).getPermanentFilter(),game,target.getTargets());
    ;
    List<Permanent> opponentTargets=threats(opponentId,sourceId,((FilterPermanentOrPlayer)t.getFilter()).getPermanentFilter(),game,target.getTargets());
    if (outcome.isGood()) {
      targets=ownedTargets;
    }
 else {
      targets=opponentTargets;
    }
    for (    Permanent permanent : targets) {
      List<UUID> alreadyTargetted=target.getTargets();
      if (t.canTarget(permanent.getId(),game)) {
        if (alreadyTargetted != null && !alreadyTargetted.contains(permanent.getId())) {
          target.add(permanent.getId(),game);
          return true;
        }
      }
    }
    if (outcome.isGood()) {
      if (target.canTarget(abilityControllerId,null,game)) {
        target.add(abilityControllerId,game);
        return true;
      }
    }
 else {
      if (target.canTarget(opponentId,null,game)) {
        target.add(opponentId,game);
        return true;
      }
    }
    if (!target.isRequired(sourceId,game) || target.getNumberOfTargets() == 0) {
      return false;
    }
    if (target.canTarget(opponentId,null,game)) {
      target.add(opponentId,game);
      return true;
    }
    if (target.canTarget(abilityControllerId,null,game)) {
      target.add(abilityControllerId,game);
      return true;
    }
    if (outcome.isGood()) {
      targets=opponentTargets;
    }
 else {
      targets=ownedTargets;
    }
    for (    Permanent permanent : targets) {
      List<UUID> alreadyTargetted=target.getTargets();
      if (t.canTarget(permanent.getId(),game)) {
        if (alreadyTargetted != null && !alreadyTargetted.contains(permanent.getId())) {
          target.add(permanent.getId(),game);
          return true;
        }
      }
    }
    return false;
  }
  if (target instanceof TargetCardInGraveyard) {
    List<Card> cards=new ArrayList<>();
    for (    Player player : game.getPlayers().values()) {
      for (      Card card : player.getGraveyard().getCards(game)) {
        if (target.canTarget(card.getId(),game)) {
          cards.add(card);
        }
      }
    }
    for (    Card card : cards) {
      target.add(card.getId(),game);
      if (target.isChosen()) {
        return true;
      }
    }
    return target.isChosen();
  }
  if (target instanceof TargetCardInYourGraveyard) {
    List<UUID> alreadyTargetted=target.getTargets();
    List<Card> cards=new ArrayList<>(game.getPlayer(abilityControllerId).getGraveyard().getCards(game));
    while (!cards.isEmpty()) {
      Card card=pickTarget(cards,outcome,target,null,game);
      if (card != null && alreadyTargetted != null && !alreadyTargetted.contains(card.getId())) {
        target.add(card.getId(),game);
        return true;
      }
    }
    return false;
  }
  if (target instanceof TargetSource) {
    Set<UUID> targets;
    TargetSource t=((TargetSource)target);
    targets=t.possibleTargets(sourceId,abilityControllerId,game);
    for (    UUID targetId : targets) {
      MageObject targetObject=game.getObject(targetId);
      if (targetObject != null) {
        List<UUID> alreadyTargetted=target.getTargets();
        if (t.canTarget(targetObject.getId(),game)) {
          if (alreadyTargetted != null && !alreadyTargetted.contains(targetObject.getId())) {
            target.add(targetObject.getId(),game);
            return true;
          }
        }
      }
    }
    if (!target.isRequired(sourceId,game)) {
      return false;
    }
    throw new IllegalStateException("TargetSource wasn't handled. class:" + target.getClass().toString());
  }
  throw new IllegalStateException("Target wasn't handled. class:" + target.getClass().toString());
}
