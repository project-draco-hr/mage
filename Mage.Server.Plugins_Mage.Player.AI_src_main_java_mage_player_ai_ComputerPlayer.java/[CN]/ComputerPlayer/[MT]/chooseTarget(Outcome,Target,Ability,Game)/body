{
  if (log.isDebugEnabled())   log.debug("chooseTarget: " + outcome.toString() + ":"+ target.toString());
  UUID opponentId=game.getOpponents(playerId).iterator().next();
  if (target instanceof TargetPlayer) {
    if (outcome.isGood()) {
      if (target.canTarget(playerId,source,game)) {
        target.addTarget(playerId,source,game);
        return true;
      }
      if (target.isRequired()) {
        if (target.canTarget(opponentId,source,game)) {
          target.addTarget(opponentId,source,game);
          return true;
        }
      }
    }
 else {
      if (target.canTarget(opponentId,source,game)) {
        target.addTarget(opponentId,source,game);
        return true;
      }
      if (target.isRequired()) {
        if (target.canTarget(playerId,source,game)) {
          target.addTarget(playerId,source,game);
          return true;
        }
      }
    }
    return false;
  }
  if (target instanceof TargetDiscard || target instanceof TargetCardInHand) {
    if (outcome.isGood()) {
      Card card=pickBestCard(new ArrayList<Card>(hand.getCards(game)),null,target,source,game);
      if (card != null) {
        if (target.canTarget(card.getId(),source,game)) {
          target.addTarget(card.getId(),source,game);
          return true;
        }
      }
    }
 else {
      findPlayables(game);
      if (unplayable.size() > 0) {
        for (int i=unplayable.size() - 1; i >= 0; i--) {
          if (target.canTarget(unplayable.values().toArray(new Card[0])[i].getId(),source,game)) {
            target.addTarget(unplayable.values().toArray(new Card[0])[i].getId(),source,game);
            return true;
          }
        }
      }
      if (hand.size() > 0) {
        for (int i=0; i < hand.size(); i++) {
          if (target.canTarget(hand.toArray(new UUID[0])[i],source,game)) {
            target.addTarget(hand.toArray(new UUID[0])[i],source,game);
            return true;
          }
        }
      }
    }
    return false;
  }
  if (target instanceof TargetControlledPermanent) {
    List<Permanent> targets;
    targets=threats(playerId,((TargetControlledPermanent)target).getFilter(),game,target.getTargets());
    if (!outcome.isGood())     Collections.reverse(targets);
    for (    Permanent permanent : targets) {
      if (((TargetControlledPermanent)target).canTarget(playerId,permanent.getId(),source,game)) {
        target.addTarget(permanent.getId(),source,game);
        return true;
      }
    }
    return false;
  }
  if (target instanceof TargetPermanent) {
    List<Permanent> targets;
    if (outcome.isGood()) {
      targets=threats(playerId,((TargetPermanent)target).getFilter(),game,target.getTargets());
    }
 else {
      targets=threats(opponentId,((TargetPermanent)target).getFilter(),game,target.getTargets());
    }
    for (    Permanent permanent : targets) {
      if (((TargetPermanent)target).canTarget(playerId,permanent.getId(),source,game)) {
        target.addTarget(permanent.getId(),source,game);
        return true;
      }
    }
    return false;
  }
  if (target instanceof TargetCreatureOrPlayer) {
    List<Permanent> targets;
    TargetCreatureOrPlayer t=((TargetCreatureOrPlayer)target);
    if (outcome.isGood()) {
      targets=threats(playerId,((FilterCreatureOrPlayer)t.getFilter()).getCreatureFilter(),game,target.getTargets());
    }
 else {
      targets=threats(opponentId,((FilterCreatureOrPlayer)t.getFilter()).getCreatureFilter(),game,target.getTargets());
    }
    for (    Permanent permanent : targets) {
      List<UUID> alreadyTargetted=target.getTargets();
      if (t.canTarget(playerId,permanent.getId(),source,game)) {
        if (alreadyTargetted != null && !alreadyTargetted.contains(permanent.getId())) {
          target.addTarget(permanent.getId(),source,game);
          return true;
        }
      }
    }
    if (outcome.isGood()) {
      if (target.canTarget(playerId,source,game)) {
        target.addTarget(playerId,source,game);
        return true;
      }
    }
 else {
      if (target.canTarget(opponentId,source,game)) {
        target.addTarget(opponentId,source,game);
        return true;
      }
    }
    if (!target.isRequired())     return false;
  }
  if (target instanceof TargetCardInGraveyard) {
    List<Card> cards=new ArrayList<Card>();
    for (    Player player : game.getPlayers().values()) {
      cards.addAll(player.getGraveyard().getCards(game));
    }
    Card card=pickTarget(cards,outcome,target,source,game);
    if (card != null) {
      target.addTarget(card.getId(),source,game);
      return true;
    }
    if (!target.isRequired())     return false;
  }
  if (target instanceof TargetCardInLibrary) {
    List<Card> cards=new ArrayList<Card>(game.getPlayer(playerId).getLibrary().getCards(game));
    Card card=pickTarget(cards,outcome,target,source,game);
    if (card != null) {
      target.addTarget(card.getId(),source,game);
      return true;
    }
    return false;
  }
  if (target instanceof TargetCardInYourGraveyard) {
    List<Card> cards=new ArrayList<Card>(game.getPlayer(playerId).getGraveyard().getCards(game));
    Card card=pickTarget(cards,outcome,target,source,game);
    if (card != null) {
      target.addTarget(card.getId(),source,game);
      return true;
    }
    return false;
  }
  throw new IllegalStateException("Target wasn't handled. class:" + target.getClass().toString());
}
