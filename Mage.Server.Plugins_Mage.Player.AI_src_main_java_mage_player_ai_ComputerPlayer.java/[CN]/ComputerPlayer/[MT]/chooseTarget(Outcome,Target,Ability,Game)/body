{
  if (log.isDebugEnabled()) {
    log.debug("chooseTarget: " + outcome.toString() + ":"+ target.toString());
  }
  UUID opponentId=game.getOpponents(playerId).iterator().next();
  if (target instanceof TargetPlayer) {
    if (outcome.isGood()) {
      if (target.canTarget(playerId,source,game)) {
        target.addTarget(playerId,source,game);
        return true;
      }
      if (target.isRequired(source)) {
        if (target.canTarget(opponentId,source,game)) {
          target.addTarget(opponentId,source,game);
          return true;
        }
      }
    }
 else {
      if (target.canTarget(opponentId,source,game)) {
        target.addTarget(opponentId,source,game);
        return true;
      }
      if (target.isRequired(source)) {
        if (target.canTarget(playerId,source,game)) {
          target.addTarget(playerId,source,game);
          return true;
        }
      }
    }
    return false;
  }
  if (target instanceof TargetDiscard || target instanceof TargetCardInHand) {
    if (outcome.isGood()) {
      ArrayList<Card> cardsInHand=new ArrayList<>(hand.getCards(game));
      while (!target.isChosen() && !cardsInHand.isEmpty() && target.getMaxNumberOfTargets() < target.getTargets().size()) {
        Card card=pickBestCard(cardsInHand,null,target,source,game);
        if (card != null) {
          if (target.canTarget(card.getId(),source,game)) {
            target.addTarget(card.getId(),source,game);
            cardsInHand.remove(card);
            if (target.isChosen()) {
              return true;
            }
          }
        }
      }
    }
 else {
      findPlayables(game);
      if (unplayable.size() > 0) {
        for (int i=unplayable.size() - 1; i >= 0; i--) {
          if (target.canTarget(unplayable.values().toArray(new Card[0])[i].getId(),source,game)) {
            target.addTarget(unplayable.values().toArray(new Card[0])[i].getId(),source,game);
            if (target.isChosen()) {
              return true;
            }
          }
        }
      }
      if (hand.size() > 0) {
        for (int i=0; i < hand.size(); i++) {
          if (target.canTarget(hand.toArray(new UUID[0])[i],source,game)) {
            target.addTarget(hand.toArray(new UUID[0])[i],source,game);
            if (target.isChosen()) {
              return true;
            }
          }
        }
      }
    }
    return false;
  }
  if (target instanceof TargetControlledPermanent) {
    List<Permanent> targets;
    targets=threats(playerId,source.getSourceId(),((TargetControlledPermanent)target).getFilter(),game,target.getTargets());
    if (!outcome.isGood()) {
      Collections.reverse(targets);
    }
    for (    Permanent permanent : targets) {
      if (((TargetControlledPermanent)target).canTarget(playerId,permanent.getId(),source,game)) {
        target.addTarget(permanent.getId(),source,game);
        if (target.getNumberOfTargets() <= target.getTargets().size() && (!outcome.isGood() || target.getMaxNumberOfTargets() <= target.getTargets().size())) {
          return true;
        }
      }
    }
    return target.isChosen();
  }
  if (target instanceof TargetPermanent) {
    List<Permanent> targets;
    boolean outcomeTargets=true;
    if (outcome.isGood()) {
      targets=threats(playerId,source == null ? null : source.getSourceId(),((TargetPermanent)target).getFilter(),game,target.getTargets());
    }
 else {
      targets=threats(opponentId,source == null ? null : source.getSourceId(),((TargetPermanent)target).getFilter(),game,target.getTargets());
    }
    if (targets.isEmpty() && target.isRequired(source)) {
      targets=threats(null,source == null ? null : source.getSourceId(),((TargetPermanent)target).getFilter(),game,target.getTargets());
      Collections.reverse(targets);
      outcomeTargets=false;
    }
    for (    Permanent permanent : targets) {
      if (((TargetPermanent)target).canTarget(playerId,permanent.getId(),source,game)) {
        target.addTarget(permanent.getId(),source,game);
        if (!outcomeTargets || target.getMaxNumberOfTargets() <= target.getTargets().size()) {
          return true;
        }
      }
    }
    return target.isChosen();
  }
  if (target instanceof TargetCreatureOrPlayer) {
    List<Permanent> targets;
    TargetCreatureOrPlayer t=((TargetCreatureOrPlayer)target);
    if (outcome.isGood()) {
      targets=threats(playerId,source.getSourceId(),((FilterCreatureOrPlayer)t.getFilter()).getCreatureFilter(),game,target.getTargets());
    }
 else {
      targets=threats(opponentId,source.getSourceId(),((FilterCreatureOrPlayer)t.getFilter()).getCreatureFilter(),game,target.getTargets());
    }
    if (targets.isEmpty()) {
      if (outcome.isGood()) {
        if (target.canTarget(playerId,source,game)) {
          target.addTarget(playerId,source,game);
          return true;
        }
      }
 else {
        if (target.canTarget(opponentId,source,game)) {
          target.addTarget(opponentId,source,game);
          return true;
        }
      }
    }
    if (targets.isEmpty() && target.isRequired(source)) {
      targets=game.getBattlefield().getActivePermanents(((FilterCreatureOrPlayer)t.getFilter()).getCreatureFilter(),playerId,game);
    }
    for (    Permanent permanent : targets) {
      List<UUID> alreadyTargetted=target.getTargets();
      if (t.canTarget(playerId,permanent.getId(),source,game)) {
        if (alreadyTargetted != null && !alreadyTargetted.contains(permanent.getId())) {
          target.addTarget(permanent.getId(),source,game);
          return true;
        }
      }
    }
    if (outcome.isGood()) {
      if (target.canTarget(playerId,source,game)) {
        target.addTarget(playerId,source,game);
        return true;
      }
    }
 else {
      if (target.canTarget(opponentId,source,game)) {
        target.addTarget(opponentId,source,game);
        return true;
      }
    }
    return false;
  }
  if (target instanceof TargetCardInGraveyard) {
    List<Card> cards=new ArrayList<>();
    for (    Player player : game.getPlayers().values()) {
      cards.addAll(player.getGraveyard().getCards(game));
    }
    Card card=pickTarget(cards,outcome,target,source,game);
    if (card != null) {
      target.addTarget(card.getId(),source,game);
      return true;
    }
    return false;
  }
  if (target instanceof TargetCardInLibrary) {
    List<Card> cards=new ArrayList<>(game.getPlayer(playerId).getLibrary().getCards(game));
    Card card=pickTarget(cards,outcome,target,source,game);
    if (card != null) {
      target.addTarget(card.getId(),source,game);
      return true;
    }
    return false;
  }
  if (target instanceof TargetCardInYourGraveyard) {
    List<Card> cards=new ArrayList<>(game.getPlayer(playerId).getGraveyard().getCards(game));
    while (!target.isChosen() && !cards.isEmpty()) {
      Card card=pickTarget(cards,outcome,target,source,game);
      if (card != null) {
        target.addTarget(card.getId(),source,game);
      }
    }
    return target.isChosen();
  }
  if (target instanceof TargetCardInHand) {
    List<Card> cards=new ArrayList<>();
    cards.addAll(this.hand.getCards(game));
    while (!target.isChosen() && !cards.isEmpty()) {
      Card pick=pickTarget(cards,outcome,target,source,game);
      if (pick != null) {
        target.addTarget(pick.getId(),source,game);
      }
    }
    return target.isChosen();
  }
  if (target instanceof TargetSpell) {
    if (game.getStack().size() > 0) {
      Iterator<StackObject> it=game.getStack().iterator();
      while (it.hasNext()) {
        StackObject o=it.next();
        if (o instanceof Spell && !source.getId().equals(o.getStackAbility().getId())) {
          target.addTarget(o.getId(),source,game);
          return true;
        }
      }
    }
    return false;
  }
  if (target instanceof TargetSpellOrPermanent) {
    List<Permanent> targets;
    boolean outcomeTargets=true;
    if (outcome.isGood()) {
      targets=threats(playerId,source == null ? null : source.getSourceId(),((TargetSpellOrPermanent)target).getPermanentFilter(),game,target.getTargets());
    }
 else {
      targets=threats(opponentId,source == null ? null : source.getSourceId(),((TargetSpellOrPermanent)target).getPermanentFilter(),game,target.getTargets());
    }
    if (targets.isEmpty() && target.isRequired(source)) {
      targets=threats(null,source == null ? null : source.getSourceId(),((TargetSpellOrPermanent)target).getPermanentFilter(),game,target.getTargets());
      Collections.reverse(targets);
      outcomeTargets=false;
    }
    for (    Permanent permanent : targets) {
      if (((TargetPermanent)target).canTarget(playerId,permanent.getId(),source,game)) {
        target.addTarget(permanent.getId(),source,game);
        if (!outcomeTargets || target.getMaxNumberOfTargets() <= target.getTargets().size()) {
          return true;
        }
      }
    }
    if (game.getStack().size() > 0) {
      Iterator<StackObject> it=game.getStack().iterator();
      while (it.hasNext()) {
        StackObject stackObject=it.next();
        if (stackObject instanceof Spell && source != null && !source.getId().equals(stackObject.getStackAbility().getId())) {
          if (((TargetSpellOrPermanent)target).getFilter().match(stackObject,game)) {
            target.addTarget(stackObject.getId(),source,game);
            return true;
          }
        }
      }
    }
    return false;
  }
  if (target instanceof TargetCardInOpponentsGraveyard) {
    List<Card> cards=new ArrayList<>();
    for (    UUID uuid : game.getOpponents(playerId)) {
      Player player=game.getPlayer(uuid);
      if (player != null) {
        cards.addAll(player.getGraveyard().getCards(game));
      }
    }
    Card card=pickTarget(cards,outcome,target,source,game);
    if (card != null) {
      target.addTarget(card.getId(),source,game);
      return true;
    }
    return false;
  }
  if (target instanceof TargetDefender) {
    List<Permanent> targets;
    targets=game.getBattlefield().getActivePermanents(new FilterPlaneswalkerPermanent(),opponentId,game);
    if (targets != null && !targets.isEmpty()) {
      for (      Permanent planeswalker : targets) {
        if (target.canTarget(planeswalker.getId(),source,game)) {
          target.addTarget(planeswalker.getId(),source,game);
        }
        if (target.isChosen()) {
          return true;
        }
      }
    }
    if (!target.isChosen()) {
      if (target.canTarget(opponentId,source,game)) {
        target.addTarget(opponentId,source,game);
      }
    }
    return target.isChosen();
  }
  if (target instanceof TargetCardInASingleGraveyard) {
    List<Card> cards=new ArrayList<>();
    for (    Player player : game.getPlayers().values()) {
      cards.addAll(player.getGraveyard().getCards(game));
    }
    while (!target.isChosen() && !cards.isEmpty()) {
      Card pick=pickTarget(cards,outcome,target,source,game);
      if (pick != null) {
        target.addTarget(pick.getId(),source,game);
      }
    }
    return target.isChosen();
  }
  if (target instanceof TargetCardInExile) {
    List<Card> cards=new ArrayList<>();
    for (    UUID uuid : ((TargetCardInExile)target).possibleTargets(source.getSourceId(),source.getControllerId(),game)) {
      Card card=game.getCard(uuid);
      if (card != null) {
        cards.add(card);
      }
    }
    while (!target.isChosen() && !cards.isEmpty()) {
      Card pick=pickTarget(cards,outcome,target,source,game);
      if (pick != null) {
        target.addTarget(pick.getId(),source,game);
      }
    }
    return target.isChosen();
  }
  throw new IllegalStateException("Target wasn't handled. class:" + target.getClass().toString());
}
