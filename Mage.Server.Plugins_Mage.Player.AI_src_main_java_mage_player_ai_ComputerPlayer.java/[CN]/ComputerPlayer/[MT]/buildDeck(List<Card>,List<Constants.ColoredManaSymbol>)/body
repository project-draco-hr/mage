{
  Deck deck=new Deck();
  List<Card> sortedCards=new ArrayList<Card>(cardPool);
  Collections.sort(sortedCards,new Comparator<Card>(){
    @Override public int compare(    Card o1,    Card o2){
      Integer score1=RateCard.rateCard(o1,colors);
      Integer score2=RateCard.rateCard(o2,colors);
      return score2.compareTo(score1);
    }
  }
);
  int cardNum=0;
  while (deck.getCards().size() < 23 && sortedCards.size() > cardNum) {
    Card card=sortedCards.get(cardNum);
    if (!card.getSupertype().contains("Basic")) {
      deck.getCards().add(card);
      deck.getSideboard().remove(card);
    }
    cardNum++;
  }
  Mana mana=new Mana();
  for (  Card card : deck.getCards()) {
    mana.add(card.getManaCost().getMana());
  }
  double total=mana.getBlack() + mana.getBlue() + mana.getGreen()+ mana.getRed()+ mana.getWhite();
  if (mana.getGreen() > 0) {
    int number=(int)Math.round(mana.getGreen() / total * 17);
    addBasicLands(deck,"Forest",number);
  }
  if (mana.getBlack() > 0) {
    int number=(int)Math.round(mana.getBlack() / total * 17);
    addBasicLands(deck,"Swamp",number);
  }
  if (mana.getBlue() > 0) {
    int number=(int)Math.round(mana.getBlue() / total * 17);
    addBasicLands(deck,"Island",number);
  }
  if (mana.getWhite() > 0) {
    int number=(int)Math.round(mana.getWhite() / total * 17);
    addBasicLands(deck,"Plains",number);
  }
  if (mana.getRed() > 0) {
    int number=(int)Math.round(mana.getRed() / total * 17);
    addBasicLands(deck,"Mountain",number);
  }
  addBasicLands(deck,"Forest",40 - deck.getCards().size());
  return deck;
}
