{
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    int minLand=Integer.MAX_VALUE;
    Cards landsToSacrifice=new CardsImpl();
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        int count=game.getBattlefield().countAll(new FilterControlledLandPermanent(),player.getId(),game);
        if (count < minLand) {
          minLand=count;
        }
      }
    }
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        TargetControlledPermanent target=new TargetControlledPermanent(minLand,minLand,new FilterControlledLandPermanent(),true);
        if (target.choose(Outcome.Sacrifice,player.getId(),source.getSourceId(),game)) {
          for (          Permanent permanent : game.getBattlefield().getActivePermanents(new FilterControlledLandPermanent(),player.getId(),source.getSourceId(),game)) {
            if (permanent != null && !target.getTargets().contains(permanent.getId())) {
              landsToSacrifice.add(permanent);
            }
          }
        }
      }
    }
    for (    UUID cardId : landsToSacrifice) {
      Permanent permanent=game.getPermanent(cardId);
      if (permanent != null) {
        permanent.sacrifice(source.getSourceId(),game);
      }
    }
    int minCreature=Integer.MAX_VALUE;
    Cards creaturesToSacrifice=new CardsImpl();
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        int count=game.getBattlefield().countAll(new FilterControlledCreaturePermanent(),player.getId(),game);
        if (count < minCreature) {
          minCreature=count;
        }
      }
    }
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        TargetControlledPermanent target=new TargetControlledPermanent(minCreature,minCreature,new FilterControlledCreaturePermanent(),true);
        if (target.choose(Outcome.Sacrifice,player.getId(),source.getSourceId(),game)) {
          for (          Permanent permanent : game.getBattlefield().getActivePermanents(new FilterControlledCreaturePermanent(),player.getId(),source.getSourceId(),game)) {
            if (permanent != null && !target.getTargets().contains(permanent.getId())) {
              creaturesToSacrifice.add(permanent);
            }
          }
        }
      }
    }
    for (    UUID cardId : creaturesToSacrifice) {
      Permanent permanent=game.getPermanent(cardId);
      if (permanent != null) {
        permanent.sacrifice(source.getSourceId(),game);
      }
    }
    int minCard=Integer.MAX_VALUE;
    HashMap<UUID,Cards> cardsToDiscard=new HashMap<>(2);
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        int count=player.getHand().size();
        if (count < minCard) {
          minCard=count;
        }
      }
    }
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        Cards cards=new CardsImpl();
        TargetCardInHand target=new TargetCardInHand(minCard,new FilterCard());
        if (target.choose(Outcome.Discard,player.getId(),source.getSourceId(),game)) {
          for (          Card card : player.getHand().getCards(game)) {
            if (card != null && !target.getTargets().contains(card.getId())) {
              cards.add(card);
            }
          }
          cardsToDiscard.put(playerId,cards);
        }
      }
    }
    for (    UUID playerId : game.getState().getPlayersInRange(controller.getId(),game)) {
      Player player=game.getPlayer(playerId);
      if (player != null && cardsToDiscard.get(playerId) != null) {
        for (        UUID cardId : cardsToDiscard.get(playerId)) {
          Card card=game.getCard(cardId);
          if (card != null) {
            player.discard(card,source,game);
          }
        }
      }
    }
    return true;
  }
  return false;
}
