{
  Player controller=game.getPlayer(source.getControllerId());
  if (controller != null) {
    Map<Player,Integer> sacrificedLands=new HashMap<>();
    for (    UUID playerId : controller.getInRange()) {
      Player player=game.getPlayer(playerId);
      if (player != null) {
        int count=0;
        for (        Permanent permanent : game.getBattlefield().getAllActivePermanents(filter,playerId,game)) {
          if (permanent.sacrifice(source.getSourceId(),game) && permanent.getCardType().contains(CardType.LAND)) {
            count++;
          }
        }
        if (count > 0) {
          sacrificedLands.put(player,count);
        }
      }
    }
    game.getState().handleSimultaneousEvent(game);
    for (    Map.Entry<Player,Integer> entry : sacrificedLands.entrySet()) {
      if (entry.getKey().chooseUse(Outcome.PutLandInPlay,"Search your library for up to " + entry.getValue() + " basic lands?",game)) {
        Target target=new TargetCardInLibrary(0,entry.getValue(),new FilterBasicLandCard());
        entry.getKey().chooseTarget(outcome,target,source,game);
        for (        UUID targetId : target.getTargets()) {
          Card card=game.getCard(targetId);
          if (card != null) {
            entry.getKey().putOntoBattlefieldWithInfo(card,game,Zone.LIBRARY,source.getSourceId(),true);
          }
        }
        entry.getKey().shuffleLibrary(game);
      }
 else {
        entry.setValue(0);
      }
    }
    for (    Map.Entry<Player,Integer> entry : sacrificedLands.entrySet()) {
      if (entry.getValue() > 0) {
        entry.getKey().shuffleLibrary(game);
      }
    }
    return true;
  }
  return false;
}
