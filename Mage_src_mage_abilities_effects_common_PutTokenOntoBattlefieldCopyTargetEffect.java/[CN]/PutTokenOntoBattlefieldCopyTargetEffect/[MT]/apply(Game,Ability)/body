{
  Permanent permanent=game.getPermanentOrLKIBattlefield(getTargetPointer().getFirst(game,source));
  if (permanent != null) {
    Permanent copyFromPermanent=permanent;
    ApplyToPermanent applier=new EmptyApplyToPermanent();
    for (    Effect effect : game.getState().getContinuousEffects().getLayeredEffects(game)) {
      if (effect instanceof CopyEffect) {
        CopyEffect copyEffect=(CopyEffect)effect;
        if (copyEffect.getSourceId().equals(permanent.getId())) {
          MageObject object=((CopyEffect)effect).getTarget();
          if (object instanceof Permanent) {
            copyFromPermanent=(Permanent)object;
            if (copyEffect.getApplier() != null) {
              applier=copyEffect.getApplier();
            }
          }
        }
      }
    }
    EmptyToken token=new EmptyToken();
    CardUtil.copyTo(token).from(copyFromPermanent);
    if (additionalCardType != null && !token.getCardType().contains(additionalCardType)) {
      token.getCardType().add(additionalCardType);
    }
    if (gainsHaste) {
      token.addAbility(HasteAbility.getInstance());
    }
    token.putOntoBattlefield(1,game,source.getSourceId(),playerId == null ? source.getControllerId() : playerId);
    for (    UUID tokenId : token.getLastAddedTokenIds()) {
      Permanent tokenPermanent=game.getPermanent(tokenId);
      if (tokenPermanent != null) {
        addedTokenPermanents.add(tokenPermanent);
        game.copyPermanent(copyFromPermanent,tokenPermanent,source,applier);
        if (additionalCardType != null) {
          ContinuousEffect effect=new AddCardTypeTargetEffect(additionalCardType,Duration.Custom);
          effect.setTargetPointer(new FixedTarget(tokenPermanent,game));
          game.addEffect(effect,source);
        }
        if (gainsHaste) {
          ContinuousEffect effect=new GainAbilityTargetEffect(HasteAbility.getInstance(),Duration.Custom);
          effect.setTargetPointer(new FixedTarget(tokenPermanent,game));
          game.addEffect(effect,source);
        }
      }
    }
    return true;
  }
  return false;
}
