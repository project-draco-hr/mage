{
  Player controller=game.getPlayer(source.getControllerId());
  MageObject sourceObject=(Permanent)getValue(EntersBattlefieldEffect.ENTERING_PERMANENT);
  if (sourceObject == null) {
    game.getObject(source.getSourceId());
  }
  if (controller != null && sourceObject != null) {
    Choice cardChoice=new ChoiceImpl();
switch (typeOfName) {
case ALL:
      cardChoice.setChoices(CardRepository.instance.getNames());
    cardChoice.setMessage("Name a card");
  break;
case NON_LAND_AND_NON_CREATURE_NAME:
cardChoice.setChoices(CardRepository.instance.getNonLandAndNonCreatureNames());
cardChoice.setMessage("Name a non land and non creature card");
break;
case NON_LAND_NAME:
cardChoice.setChoices(CardRepository.instance.getNonLandNames());
cardChoice.setMessage("Name a non land card");
break;
case CREATURE_NAME:
cardChoice.setChoices(CardRepository.instance.getCreatureNames());
cardChoice.setMessage("Name a creature card");
break;
}
cardChoice.clearChoice();
while (!controller.choose(Outcome.Detriment,cardChoice,game)) {
if (!controller.canRespond()) {
return false;
}
}
String cardName=cardChoice.getChoice();
if (!game.isSimulation()) {
game.informPlayers(sourceObject.getLogName() + ", named card: [" + cardName+ "]");
}
game.getState().setValue(source.getSourceId().toString() + INFO_KEY,cardName);
if (sourceObject instanceof Permanent) {
((Permanent)sourceObject).addInfo(INFO_KEY,CardUtil.addToolTipMarkTags("Named card: " + cardName),game);
}
return true;
}
return false;
}
