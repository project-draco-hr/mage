{
  StringBuilder playersInfo=new StringBuilder();
  int counter=0;
  Player currentPlayer=null;
  PlayerList playerList=game.getPlayerList();
  if (game.getStartingPlayerId() != null) {
    playerList.setCurrent(game.getStartingPlayerId());
    currentPlayer=game.getPlayer(game.getStartingPlayerId());
  }
  if (currentPlayer == null) {
    currentPlayer=playerList.getCurrent(game);
  }
  if (currentPlayer != null) {
    do {
      if (counter > 0) {
        playersInfo.append(" - ");
      }
      playersInfo.append(currentPlayer.getName());
      counter++;
      currentPlayer=game.getPlayer(playerList.getNext());
      if (counter > 10) {
        logger.error("Can't get no correct player info from game");
        logger.debug("- matchId: " + this.getId());
        logger.debug("- gameId: " + game.getId());
        StringBuilder sb=new StringBuilder();
        for (        MatchPlayer matchPlayer : this.getPlayers()) {
          sb.append(matchPlayer.getName()).append(" - ");
        }
        logger.debug("- players: " + sb.toString());
        break;
      }
    }
 while (!currentPlayer.getId().equals(game.getStartingPlayerId()));
  }
 else {
    playersInfo.append("[got no players]");
  }
  String state;
  String result;
  String duelingTime="";
  if (game.hasEnded()) {
    if (game.getEndTime() != null) {
      duelingTime=" (" + DateFormat.getDuration((game.getEndTime().getTime() - game.getStartTime().getTime()) / 1000) + ")";
    }
    state="Finished" + duelingTime;
    result=game.getWinner();
  }
 else {
    if (game.getStartTime() != null) {
      duelingTime=" (" + DateFormat.getDuration((new Date().getTime() - game.getStartTime().getTime()) / 1000) + ")";
    }
    state="Dueling" + duelingTime;
    result="";
  }
  return new GameInfo(0,this.getId(),game.getId(),state,result,playersInfo.toString(),tableId);
}
