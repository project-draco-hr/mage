{
  sessionState=SessionState.CONNECTING;
  try {
    System.setProperty("http.nonProxyHosts","code.google.com");
    System.setProperty("socksNonProxyHosts","code.google.com");
    System.clearProperty("socksProxyHost");
    System.clearProperty("socksProxyPort");
    System.clearProperty("http.proxyHost");
    System.clearProperty("http.proxyPort");
switch (connection.getProxyType()) {
case SOCKS:
      System.setProperty("socksProxyHost",connection.getProxyHost());
    System.setProperty("socksProxyPort",Integer.toString(connection.getProxyPort()));
  break;
case HTTP:
System.setProperty("http.proxyHost",connection.getProxyHost());
System.setProperty("http.proxyPort",Integer.toString(connection.getProxyPort()));
Authenticator.setDefault(new MageAuthenticator(connection.getProxyUsername(),connection.getProxyPassword()));
break;
}
InvokerLocator clientLocator=new InvokerLocator(connection.getURI());
Map<String,String> metadata=new HashMap<String,String>();
metadata.put(SocketWrapper.WRITE_TIMEOUT,"2000");
metadata.put("generalizeSocketException","true");
server=(MageServer)TransporterClient.createTransporterClient(clientLocator.getLocatorURI(),MageServer.class,metadata);
Map<String,String> clientMetadata=new HashMap<String,String>();
clientMetadata.put(SocketWrapper.WRITE_TIMEOUT,"2000");
clientMetadata.put("generalizeSocketException","true");
clientMetadata.put(Client.ENABLE_LEASE,"true");
clientMetadata.put(Remoting.USE_CLIENT_CONNECTION_IDENTITY,"true");
callbackClient=new Client(clientLocator,"callback",clientMetadata);
Map<String,String> listenerMetadata=new HashMap<String,String>();
if (debugMode) {
listenerMetadata.put(ConnectionValidator.VALIDATOR_PING_PERIOD,"1000000");
listenerMetadata.put(ConnectionValidator.VALIDATOR_PING_TIMEOUT,"900000");
}
 else {
listenerMetadata.put(ConnectionValidator.VALIDATOR_PING_PERIOD,"10000");
listenerMetadata.put(ConnectionValidator.VALIDATOR_PING_TIMEOUT,"9000");
}
callbackClient.connect(new ClientConnectionListener(),listenerMetadata);
Map<String,String> callbackMetadata=new HashMap<String,String>();
callbackMetadata.put(Bisocket.IS_CALLBACK_SERVER,"true");
CallbackHandler callbackHandler=new CallbackHandler();
callbackClient.addListener(callbackHandler,callbackMetadata);
callbackClient.invoke("");
this.sessionId=callbackClient.getSessionId();
boolean registerResult=false;
if (connection.getPassword() == null) {
UserDataView userDataView=new UserDataView(connection.getAvatarId());
registerResult=server.registerClient(connection.getUsername(),sessionId,client.getVersion());
server.setUserData(connection.getUsername(),sessionId,userDataView);
}
 else {
registerResult=server.registerAdmin(connection.getPassword(),sessionId,client.getVersion());
}
if (registerResult) {
sessionState=SessionState.CONNECTED;
serverState=server.getServerState();
logger.info("Connected to MAGE server at " + connection.getHost() + ":"+ connection.getPort());
client.connected("Connected to " + connection.getHost() + ":"+ connection.getPort()+ " ");
return true;
}
disconnect(false);
client.showMessage("Unable to connect to server.");
}
 catch (MalformedURLException ex) {
logger.fatal("",ex);
client.showMessage("Unable to connect to server. " + ex.getMessage());
}
catch (MageVersionException ex) {
client.showMessage("Unable to connect to server. " + ex.getMessage());
}
catch (Throwable t) {
logger.fatal("Unable to connect to server - ",t);
disconnect(false);
client.showMessage("Unable to connect to server. " + t.getMessage());
}
return false;
}
