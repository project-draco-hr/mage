{
  List<Mana> payCombinations=new ArrayList<>();
  List<String> payCombinationsStrings=new ArrayList<>();
  if (manaAvailable.countColored() > 0) {
    for (int i=0; i < number; i++) {
      List<Mana> existingManas=new ArrayList<>();
      if (i > 0) {
        existingManas.addAll(payCombinations);
        payCombinations.clear();
        payCombinationsStrings.clear();
      }
 else {
        existingManas.add(new Mana());
      }
      for (      Mana existingMana : existingManas) {
        Mana manaToPay=manaAvailable.copy();
        manaToPay.subtract(existingMana);
        if (manaToPay.getBlack() > 0 && !payCombinationsStrings.contains(existingMana.toString() + Mana.BlackMana.toString())) {
          manaToPay.subtract(Mana.BlackMana);
          addManaCombination(Mana.BlackMana,existingMana,payCombinations,payCombinationsStrings);
        }
        if (manaToPay.getBlue() > 0 && !payCombinationsStrings.contains(existingMana.toString() + Mana.BlueMana.toString())) {
          manaToPay.subtract(Mana.BlueMana);
          addManaCombination(Mana.BlueMana,existingMana,payCombinations,payCombinationsStrings);
        }
        if (manaToPay.getGreen() > 0 && !payCombinationsStrings.contains(existingMana.toString() + Mana.GreenMana.toString())) {
          manaToPay.subtract(Mana.GreenMana);
          addManaCombination(Mana.GreenMana,existingMana,payCombinations,payCombinationsStrings);
        }
        if (manaToPay.getRed() > 0 && !payCombinationsStrings.contains(existingMana.toString() + Mana.RedMana.toString())) {
          manaToPay.subtract(Mana.RedMana);
          addManaCombination(Mana.RedMana,existingMana,payCombinations,payCombinationsStrings);
        }
        if (manaToPay.getWhite() > 0 && !payCombinationsStrings.contains(existingMana.toString() + Mana.WhiteMana.toString())) {
          manaToPay.subtract(Mana.WhiteMana);
          addManaCombination(Mana.WhiteMana,existingMana,payCombinations,payCombinationsStrings);
        }
      }
    }
  }
 else {
    payCombinations.add(new Mana(0,0,0,0,0,number,0));
  }
  return payCombinations;
}
