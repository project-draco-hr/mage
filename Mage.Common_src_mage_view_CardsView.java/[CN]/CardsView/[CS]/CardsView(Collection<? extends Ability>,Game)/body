{
  for (  Ability ability : abilities) {
    MageObject sourceObject=null;
    AbilityView abilityView=null;
    boolean isCard=false;
    boolean isPermanent=false;
switch (ability.getZone()) {
case ALL:
case EXILED:
case GRAVEYARD:
      sourceObject=game.getCard(ability.getSourceId());
    if (sourceObject == null) {
      sourceObject=game.getPermanent(ability.getSourceId());
    }
  if (sourceObject == null) {
    sourceObject=game.getObject(ability.getSourceId());
    if (sourceObject instanceof PermanentToken) {
      isPermanent=true;
    }
  }
 else {
    isCard=true;
  }
break;
case BATTLEFIELD:
sourceObject=game.getPermanent(ability.getSourceId());
if (sourceObject == null) {
sourceObject=(Permanent)game.getLastKnownInformation(ability.getSourceId(),Zone.BATTLEFIELD);
}
isPermanent=true;
break;
case STACK:
sourceObject=game.getObject(ability.getSourceId());
if (sourceObject instanceof Card) {
isCard=true;
}
break;
case COMMAND:
sourceObject=game.getObject(ability.getSourceId());
if (sourceObject instanceof Emblem) {
Card planeswalkerCard=game.getCard(((Emblem)sourceObject).getSourceId());
if (planeswalkerCard != null) {
if (!planeswalkerCard.getCardType().contains(CardType.PLANESWALKER)) {
if (planeswalkerCard.getSecondCardFace() != null) {
planeswalkerCard=planeswalkerCard.getSecondCardFace();
}
}
abilityView=new AbilityView(ability,"Emblem " + planeswalkerCard.getName(),new CardView(new EmblemView((Emblem)sourceObject,planeswalkerCard)));
abilityView.setName("Emblem " + planeswalkerCard.getName());
abilityView.setExpansionSetCode(planeswalkerCard.getExpansionSetCode());
}
 else {
throw new IllegalArgumentException("Source card for emblem not found.");
}
}
break;
}
if (sourceObject != null) {
if (abilityView == null) {
CardView sourceCardView;
if (isPermanent) {
sourceCardView=new CardView((Permanent)sourceObject);
}
 else if (isCard) {
sourceCardView=new CardView((Card)sourceObject);
}
 else {
sourceCardView=new CardView(sourceObject);
}
abilityView=new AbilityView(ability,sourceObject.getName(),sourceCardView);
}
if (ability.getTargets().size() > 0) {
abilityView.setTargets(ability.getTargets());
}
 else {
List<UUID> abilityTargets=new ArrayList<>();
for (Effect effect : ability.getEffects()) {
TargetPointer targetPointer=effect.getTargetPointer();
if (targetPointer != null) {
List<UUID> targetList=targetPointer.getTargets(game,ability);
abilityTargets.addAll(targetList);
}
}
if (!abilityTargets.isEmpty()) {
abilityView.overrideTargets(abilityTargets);
List<String> names=new ArrayList<>();
for (UUID uuid : abilityTargets) {
MageObject mageObject=game.getObject(uuid);
if (mageObject != null) {
if ((mageObject instanceof Card) && ((Card)mageObject).isFaceDown(game)) {
continue;
}
names.add(GameLog.getColoredObjectIdNameForTooltip(mageObject));
}
}
if (!names.isEmpty()) {
abilityView.getRules().add("<i>Related objects: " + names.toString() + "</i>");
}
}
}
this.put(ability.getId(),abilityView);
}
}
}
