{
  for (  Ability ability : abilities) {
    MageObject sourceObject=null;
    AbilityView abilityView=null;
switch (ability.getZone()) {
case ALL:
case EXILED:
case GRAVEYARD:
      sourceObject=game.getCard(ability.getSourceId());
    break;
case BATTLEFIELD:
  sourceObject=game.getPermanent(ability.getSourceId());
if (sourceObject == null) {
  sourceObject=(Permanent)game.getLastKnownInformation(ability.getSourceId(),Zone.BATTLEFIELD);
}
break;
case STACK:
sourceObject=game.getObject(ability.getSourceId());
break;
case COMMAND:
sourceObject=game.getObject(ability.getSourceId());
if (sourceObject instanceof Emblem) {
Card planeswalkerCard=game.getCard(((Emblem)sourceObject).getSourceId());
if (planeswalkerCard != null) {
abilityView=new AbilityView(ability,"Emblem " + planeswalkerCard.getName(),new CardView(sourceObject));
abilityView.setName("Emblem " + planeswalkerCard.getName());
abilityView.setExpansionSetCode(planeswalkerCard.getExpansionSetCode());
}
 else {
throw new IllegalArgumentException("Source card for emblem not found.");
}
}
break;
}
if (sourceObject != null) {
if (abilityView == null) {
abilityView=new AbilityView(ability,sourceObject.getLogName(),new CardView(sourceObject));
}
if (ability.getTargets().size() > 0) {
abilityView.setTargets(ability.getTargets());
}
 else {
List<UUID> abilityTargets=new ArrayList<>();
for (Effect effect : ability.getEffects()) {
TargetPointer targetPointer=effect.getTargetPointer();
if (targetPointer != null) {
List<UUID> targetList=targetPointer.getTargets(game,ability);
abilityTargets.addAll(targetList);
}
}
if (!abilityTargets.isEmpty()) {
abilityView.overrideTargets(abilityTargets);
List<String> names=new ArrayList<>();
for (UUID uuid : abilityTargets) {
MageObject mageObject=game.getObject(uuid);
if (mageObject != null) {
names.add(mageObject.getLogName());
}
}
if (!names.isEmpty()) {
abilityView.getRules().add("<i>Related to: " + names.toString() + "</i>");
}
}
}
this.put(ability.getId(),abilityView);
}
}
}
