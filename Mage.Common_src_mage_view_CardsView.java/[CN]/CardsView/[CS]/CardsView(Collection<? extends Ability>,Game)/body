{
  for (  Ability ability : abilities) {
    Card sourceCard=null;
switch (ability.getZone()) {
case ALL:
case EXILED:
case GRAVEYARD:
      sourceCard=game.getCard(ability.getSourceId());
    break;
case BATTLEFIELD:
  sourceCard=game.getPermanent(ability.getSourceId());
if (sourceCard == null) {
  sourceCard=(Permanent)game.getLastKnownInformation(ability.getSourceId(),Zone.BATTLEFIELD);
}
break;
case STACK:
sourceCard=game.getCard(ability.getSourceId());
break;
case COMMAND:
ability.newId();
this.put(ability.getId(),new AbilityView(ability,"Emblem",new CardView("Emblem")));
break;
}
if (sourceCard != null) {
AbilityView abilityView=new AbilityView(ability,sourceCard.getName(),new CardView(sourceCard));
if (ability.getTargets().size() > 0) {
abilityView.setTargets(ability.getTargets());
}
 else {
List<UUID> abilityTargets=new ArrayList<UUID>();
for (Effect effect : ability.getEffects()) {
TargetPointer targetPointer=effect.getTargetPointer();
if (targetPointer != null) {
List<UUID> targetList=targetPointer.getTargets(game,ability);
abilityTargets.addAll(targetList);
}
}
if (!abilityTargets.isEmpty()) {
abilityView.overrideTargets(abilityTargets);
List<String> names=new ArrayList<String>();
for (UUID uuid : abilityTargets) {
MageObject mageObject=game.getObject(uuid);
if (mageObject != null) {
names.add(mageObject.getName());
}
}
if (!names.isEmpty()) {
abilityView.getRules().add("<i>Targets: " + names.toString() + "</i>");
}
}
}
this.put(ability.getId(),abilityView);
}
}
}
