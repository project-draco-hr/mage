{
  Player controller=game.getPlayer(this.getControllerId());
  if (controller == null) {
    return false;
  }
  game.applyEffects();
  if (!getModes().choose(game,this)) {
    return false;
  }
  if (controller.isTestMode()) {
    if (!controller.addTargets(this,game)) {
      return false;
    }
  }
  getSourceObject(game);
  if (this.abilityType.equals(AbilityType.SPELL)) {
    game.getContinuousEffects().applySpliceEffects(this,game);
  }
  if (sourceObject != null) {
    sourceObject.adjustChoices(this,game);
  }
  for (  Mode mode : this.getModes().getSelectedModes()) {
    if (mode.getChoices().size() > 0 && mode.getChoices().choose(game,this) == false) {
      logger.debug("activate failed - choice");
      return false;
    }
  }
  if (noMana) {
    if (this.getManaCostsToPay().getVariableCosts().size() > 0) {
      int xValue=this.getManaCostsToPay().getX();
      this.getManaCostsToPay().clear();
      VariableManaCost xCosts=new VariableManaCost();
      xCosts.setAmount(xValue);
      this.getManaCostsToPay().add(xCosts);
    }
 else {
      this.getManaCostsToPay().clear();
    }
  }
  if (!activateAlternateOrAdditionalCosts(sourceObject,noMana,controller,game)) {
    if (getAbilityType().equals(AbilityType.SPELL) && ((SpellAbility)this).getSpellAbilityType().equals(SpellAbilityType.FACE_DOWN_CREATURE)) {
      return false;
    }
  }
  VariableManaCost variableManaCost=handleManaXCosts(game,noMana,controller);
  String announceString=handleOtherXCosts(game,controller);
  if (game.replaceEvent(GameEvent.getEvent(GameEvent.EventType.CAST_SPELL_LATE,getId(),getSourceId(),getControllerId()),this)) {
    return false;
  }
  for (  Mode mode : this.getModes().getSelectedModes()) {
    this.getModes().setActiveMode(mode);
    if (sourceObject != null && !this.getAbilityType().equals(AbilityType.TRIGGERED)) {
      sourceObject.adjustTargets(this,game);
    }
    if (mode.getTargets().size() > 0 && mode.getTargets().chooseTargets(getEffects().get(0).getOutcome(),this.controllerId,this,noMana,game) == false) {
      if ((variableManaCost != null || announceString != null) && !game.isSimulation()) {
        game.informPlayer(controller,(sourceObject != null ? sourceObject.getIdName() : "") + ": no valid targets with this value of X");
      }
      return false;
    }
  }
  for (  Cost cost : optionalCosts) {
    if (cost instanceof ManaCost) {
      cost.clearPaid();
      if (controller.chooseUse(Outcome.Benefit,"Pay optional cost " + cost.getText() + "?",this,game)) {
        manaCostsToPay.add((ManaCost)cost);
      }
    }
  }
  if (sourceObject != null) {
    sourceObject.adjustCosts(this,game);
    if (sourceObject instanceof Card) {
      for (      Ability ability : ((Card)sourceObject).getAbilities(game)) {
        if (ability instanceof AdjustingSourceCosts) {
          ((AdjustingSourceCosts)ability).adjustCosts(this,game);
        }
      }
    }
 else {
      for (      Ability ability : sourceObject.getAbilities()) {
        if (ability instanceof AdjustingSourceCosts) {
          ((AdjustingSourceCosts)ability).adjustCosts(this,game);
        }
      }
    }
  }
  if (this instanceof ManaAbility && !costs.pay(this,game,sourceId,controllerId,noMana,null)) {
    logger.debug("activate mana ability failed - non mana costs");
    return false;
  }
  if (costModificationActive) {
    game.getContinuousEffects().costModification(this,game);
  }
 else {
    costModificationActive=true;
  }
  UUID activatorId=controllerId;
  if ((this instanceof ActivatedAbilityImpl) && ((ActivatedAbilityImpl)this).getActivatorId() != null) {
    activatorId=((ActivatedAbilityImpl)this).getActivatorId();
  }
  if (!useAlternativeCost(game)) {
    if (!manaCostsToPay.pay(this,game,sourceId,activatorId,false,null)) {
      return false;
    }
  }
  if (!costs.pay(this,game,sourceId,activatorId,noMana,null)) {
    logger.debug("activate failed - non mana costs");
    return false;
  }
  if (!game.isSimulation()) {
    if (announceString != null) {
      game.informPlayers(announceString);
    }
    if (variableManaCost != null) {
      int xValue=getManaCostsToPay().getX();
      game.informPlayers(controller.getLogName() + " announces a value of " + xValue+ " for "+ variableManaCost.getText());
    }
  }
  activated=true;
  if (this.getAbilityType().equals(AbilityType.MANA)) {
    for (    Cost cost : costs) {
      if (cost instanceof TapSourceCost) {
        Mana mana=null;
        Effect effect=getEffects().get(0);
        if (effect instanceof DynamicManaEffect) {
          mana=((DynamicManaEffect)effect).getMana(game,this);
        }
 else         if (effect instanceof BasicManaEffect) {
          mana=((BasicManaEffect)effect).getMana(game,this);
        }
        if (mana != null && mana.getAny() == 0) {
          ManaEvent event=new ManaEvent(GameEvent.EventType.TAPPED_FOR_MANA,sourceId,sourceId,controllerId,mana);
          if (!game.replaceEvent(event)) {
            game.fireEvent(event);
          }
        }
        break;
      }
    }
  }
  return true;
}
