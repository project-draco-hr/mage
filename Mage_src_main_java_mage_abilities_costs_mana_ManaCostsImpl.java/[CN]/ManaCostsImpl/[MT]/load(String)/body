{
  this.clear();
  if (costs.containsKey(mana)) {
    ManaCosts<ManaCost> savedCosts=costs.get(mana);
    for (    ManaCost cost : savedCosts) {
      this.add(cost.copy());
    }
  }
 else {
    if (StringUtil.isNotEmpty(mana)) {
      return;
    }
    String[] symbols=mana.split("^\\{|\\}\\{|\\}$");
    int modifierForX=0;
    for (    String symbol : symbols) {
      if (StringUtil.isNotEmpty(symbol)) {
        if (symbol.length() == 1 || isNumeric(symbol)) {
          if (Character.isDigit(symbol.charAt(0))) {
            this.add(new GenericManaCost(Integer.valueOf(symbol)));
          }
 else           if (symbol.equals("S")) {
            this.add(new SnowManaCost());
          }
 else           if (symbol.equals("C")) {
            this.add(new ColorlessManaCost(1));
          }
 else           if (!symbol.equals("X")) {
            this.add(new ColoredManaCost(ColoredManaSymbol.lookup(symbol.charAt(0))));
          }
 else           if (modifierForX == 0) {
            for (            String s : symbols) {
              if (s.equals("X")) {
                modifierForX++;
              }
            }
            this.add(new VariableManaCost(modifierForX));
          }
        }
 else         if (Character.isDigit(symbol.charAt(0))) {
          this.add(new MonoHybridManaCost(ColoredManaSymbol.lookup(symbol.charAt(2))));
        }
 else         if (symbol.contains("P")) {
          this.add(new PhyrexianManaCost(ColoredManaSymbol.lookup(symbol.charAt(0))));
        }
 else {
          this.add(new HybridManaCost(ColoredManaSymbol.lookup(symbol.charAt(0)),ColoredManaSymbol.lookup(symbol.charAt(2))));
        }
      }
    }
    costs.put(mana,this.copy());
  }
}
