{
  Set<ManaSymbol> countColored=new HashSet<>();
  ManaAbility chosenManaAbility=null;
  ManaAbility chosenManaAbilityForHybrid;
  for (  ManaAbility ability : useableAbilities.values()) {
    chosenManaAbility=getManaAbility(symbols,countColored,chosenManaAbility,ability);
    chosenManaAbilityForHybrid=checkRedMana(symbols,countColored,ability);
    chosenManaAbility=chosenManaAbilityForHybrid != null ? chosenManaAbilityForHybrid : chosenManaAbility;
    chosenManaAbilityForHybrid=checkBlackMana(symbols,countColored,ability);
    chosenManaAbility=chosenManaAbilityForHybrid != null ? chosenManaAbilityForHybrid : chosenManaAbility;
    chosenManaAbilityForHybrid=checkBlueMana(symbols,countColored,ability);
    chosenManaAbility=chosenManaAbilityForHybrid != null ? chosenManaAbilityForHybrid : chosenManaAbility;
    chosenManaAbilityForHybrid=checkWhiteMana(symbols,countColored,ability);
    chosenManaAbility=chosenManaAbilityForHybrid != null ? chosenManaAbilityForHybrid : chosenManaAbility;
    chosenManaAbilityForHybrid=checkGreenMana(symbols,countColored,ability);
    chosenManaAbility=chosenManaAbilityForHybrid != null ? chosenManaAbilityForHybrid : chosenManaAbility;
  }
  if (countColored.isEmpty()) {
    if (unpaidMana.getColorless() > 0) {
      return replace(useableAbilities,useableAbilities.values().iterator().next());
    }
    return useableAbilities;
  }
  if (countColored.size() > 1) {
    Set<ManaSymbol> temp=new HashSet<>();
    temp.addAll(countColored);
    for (    ManaSymbol manaSymbol : countColored) {
      if (manaSymbol.isHybrid()) {
        boolean found1=countColored.contains(manaSymbol.getManaSymbol1());
        boolean found2=countColored.contains(manaSymbol.getManaSymbol2());
        if (found1 && !found2) {
          temp.remove(manaSymbol);
        }
 else         if (!found1 && found2) {
          temp.remove(manaSymbol);
        }
      }
    }
    if (temp.size() == 1) {
      for (      ManaAbility ability : useableAbilities.values()) {
        chosenManaAbility=getManaAbility(symbols,countColored,chosenManaAbility,ability);
      }
      return replace(useableAbilities,chosenManaAbility);
    }
    return useableAbilities;
  }
  return replace(useableAbilities,chosenManaAbility);
}
