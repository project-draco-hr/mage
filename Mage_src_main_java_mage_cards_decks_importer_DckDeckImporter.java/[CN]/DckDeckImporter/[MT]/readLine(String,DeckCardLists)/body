{
  if (line.isEmpty() || line.startsWith("#")) {
    return;
  }
  Matcher m=pattern.matcher(line);
  if (m.matches()) {
    boolean sideboard=false;
    if ("SB:".equals(m.group(1))) {
      sideboard=true;
    }
    int count=Integer.parseInt(m.group(2));
    String setCode=m.group(3);
    String cardNum=m.group(4);
    DeckCardInfo deckCardInfo=null;
    CardInfo cardInfo=CardRepository.instance.findCard(setCode,cardNum);
    if (cardInfo == null) {
      String cardName=m.group(5);
      if (cardName != null && cardName.length() > 0) {
        cardInfo=CardRepository.instance.findPreferedCoreExpansionCard(cardName,false);
        sbMessage.append("Could not find card '" + cardName + "' in set "+ setCode+ " of number "+ cardNum+ ".\n");
        if (cardInfo != null) {
          sbMessage.append("Made substitution of " + cardInfo.getCardNumber() + ", "+ cardInfo.getCard().getExpansionSetCode()+ " instead.\n");
        }
      }
    }
    if (cardInfo != null) {
      deckCardInfo=new DeckCardInfo(cardInfo.getName(),cardInfo.getCardNumber(),cardInfo.getSetCode());
    }
    if (deckCardInfo != null) {
      for (int i=0; i < count; i++) {
        if (!sideboard) {
          deckList.getCards().add(deckCardInfo);
        }
 else {
          deckList.getSideboard().add(deckCardInfo);
        }
      }
    }
 else {
      sbMessage.append("Could not find card '").append("' at line ").append(lineCount).append(": ").append(line).append("\n");
    }
  }
 else   if (line.startsWith("NAME:")) {
    deckList.setName(line.substring(5,line.length()));
  }
 else   if (line.startsWith("AUTHOR:")) {
    deckList.setAuthor(line.substring(7,line.length()));
  }
 else   if (line.startsWith("LAYOUT")) {
    Matcher m2=layoutPattern.matcher(line);
    if (m2.find()) {
      String target=m2.group(1);
      int rows=Integer.parseInt(m2.group(2));
      int cols=Integer.parseInt(m2.group(3));
      String settings=m2.group(4);
      String stackData=m2.group(5);
      Matcher stackMatcher=layoutStackPattern.matcher(stackData);
      List<List<List<DeckCardInfo>>> grid=new ArrayList<>();
      int totalCardCount=0;
      for (int row=0; row < rows; ++row) {
        List<List<DeckCardInfo>> rowData=new ArrayList<>();
        grid.add(rowData);
        for (int col=0; col < cols; ++col) {
          List<DeckCardInfo> stack=new ArrayList<>();
          rowData.add(stack);
          if (stackMatcher.find()) {
            String thisStackData=stackMatcher.group(1);
            Matcher stackEntries=layoutStackEntryPattern.matcher(thisStackData);
            while (stackEntries.find()) {
              ++totalCardCount;
              stack.add(new DeckCardInfo("",stackEntries.group(2),stackEntries.group(1)));
            }
          }
 else {
            sbMessage.append("Missing stack\n.");
          }
        }
      }
      DeckCardLayout layout=new DeckCardLayout(grid,settings);
      int expectedCount=0;
switch (target) {
case "MAIN":
        deckList.setCardLayout(layout);
      expectedCount=deckList.getCards().size();
    break;
case "SIDEBOARD":
  deckList.setSideboardLayout(layout);
expectedCount=deckList.getSideboard().size();
break;
default :
sbMessage.append("Bad target `").append(target).append("` for layout.\n");
break;
}
if (totalCardCount != expectedCount) {
sbMessage.append("Layout mismatch: Expected ").append(expectedCount).append(" cards, but got ").append(totalCardCount).append(" in layout `").append(target).append("`\n.");
}
}
 else {
sbMessage.append("Malformed layout line");
}
}
}
