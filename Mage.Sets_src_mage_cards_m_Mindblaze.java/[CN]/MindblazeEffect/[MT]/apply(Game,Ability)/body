{
  Player player=game.getPlayer(targetPointer.getFirst(game,source));
  Player playerControls=game.getPlayer(source.getControllerId());
  if (player != null && playerControls != null) {
    Choice cardChoice=new ChoiceImpl();
    cardChoice.setChoices(CardRepository.instance.getNonLandNames());
    cardChoice.clearChoice();
    Choice numberChoice=new ChoiceImpl();
    numberChoice.setMessage("Choose a number greater than 0");
    HashSet<String> numbers=new HashSet<>();
    for (int i=1; i <= 4; i++) {
      numbers.add(Integer.toString(i));
    }
    numberChoice.setChoices(numbers);
    while (!playerControls.choose(Outcome.Neutral,cardChoice,game)) {
      if (!playerControls.canRespond()) {
        return false;
      }
    }
    while (!playerControls.choose(Outcome.Neutral,numberChoice,game)) {
      if (!playerControls.canRespond()) {
        return false;
      }
    }
    game.informPlayers("Mindblaze, named card: [" + cardChoice.getChoice() + "]");
    game.informPlayers("Mindblaze, chosen number: [" + numberChoice.getChoice() + "]");
    Cards cards=new CardsImpl();
    cards.addAll(player.getLibrary().getCards(game));
    playerControls.revealCards("Library",cards,game);
    FilterCard filter=new FilterCard();
    filter.add(new NamePredicate(cardChoice.getChoice()));
    int count=Integer.parseInt(numberChoice.getChoice());
    if (player.getLibrary().count(filter,game) == count) {
      player.damage(8,source.getSourceId(),game.copy(),false,true);
    }
    player.shuffleLibrary(source,game);
  }
  return false;
}
