{
  if (newPlayer != null) {
    DraftPlayer newDraftPlayer=new DraftPlayer(newPlayer);
    DraftPlayer oldDraftPlayer=players.get(oldPlayer.getId());
    newDraftPlayer.setBooster(oldDraftPlayer.getBooster());
    Map<UUID,DraftPlayer> newPlayers=new LinkedHashMap<>();
synchronized (players) {
      for (      Map.Entry<UUID,DraftPlayer> entry : players.entrySet()) {
        if (entry.getKey().equals(oldPlayer.getId())) {
          newPlayers.put(newPlayer.getId(),newDraftPlayer);
        }
 else {
          newPlayers.put(entry.getKey(),entry.getValue());
        }
      }
      players.clear();
      for (      Map.Entry<UUID,DraftPlayer> entry : newPlayers.entrySet()) {
        players.put(entry.getKey(),entry.getValue());
      }
    }
synchronized (table) {
      UUID currentId=table.get();
      if (currentId.equals(oldPlayer.getId())) {
        currentId=newPlayer.getId();
      }
      table.clear();
      for (      UUID playerId : players.keySet()) {
        table.add(playerId);
      }
      table.setCurrent(currentId);
    }
    if (oldDraftPlayer.isPicking()) {
      newDraftPlayer.setPicking();
      newDraftPlayer.getPlayer().pickCard(newDraftPlayer.getBooster(),newDraftPlayer.getDeck(),this);
    }
    return true;
  }
  return false;
}
